// Modbus
#include "BASS_ModbusMaster.h"
#include "BASS_ModbusRTUSlave.h"
// Dahili
#include "Wire.h"
#include "SPI.h"
#include "EEPROM.h"
// Komponent
#include "MCP4725.h"
// Ekran
#include "TFT_eSPI.h"
#include "Free_Fonts.h"  // Include the header file attached to this sketch
// Wi-Fi
#include <WiFi.h>
#include <HTTPClient.h>
#include <Update.h>
// Görseller
#include "bass_logo_kucuk.h"
#include "better_solution.h"
#include "basic_settings_icon.h"
#include "advanced_setting_icon.h"
#include "output_icon.h"
#include "communication_icon.h"
#include "display_icon.h"
#include "data_logging_icon.h"
#include "Information_icon.h"
#include "locckk.h"

// ADRESLER
#define MPC_DAC_ADDRESS 0x60  // I²C cihaz adresi

// PİN ATAMALARI
// Modbus DIR pinleri kullanılmıyor
#define DE_RE_PIN_1 -1
#define DE_RE_PIN_2 -1
// Butonlar
#define esc_button 20    // ESC buton GPIO pin numarası
#define up_button 7     // YUKARI buton GPIO pin numarası
#define down_button 5   // AŞAĞI buton GPIO pin numarası
#define enter_button 3 // ENTER buton GPIO pin numarası
// Dijital Çıkışlar
#define relay_pin 15  // röle
#define pulse_pin 16 // pulse
// Analog çıkışlar
// #define DAC_2_PIN_V  - i2c olmuş düzeltilecek
// Analog Girişler
#define NTC_PIN 6
// Uart pinleri (serial)
#define SLAVE_RX_PIN 44
#define SLAVE_TX_PIN 43
// Uart pinleri (serial2)
#define MASTER_RX_PIN 18 
#define MASTER_TX_PIN 17 
// Ekran backlight
#define LCD_BLK 10

// Renk tanımlamarı
#define TFT_GREY        0x94b2      
#define TFT_SHADOW      0xb5b6      
#define TFT_CREAM       0xef15  
#define TFT_BLUEE       0x2439  
#define TFT_GRAYY       0xef7d  


// TFT KÜTÜPHANESİ GÜNCELLENİNCE BU PİNLER EKLENECEK
// #define TFT_MOSI 23 // In some display driver board, it might be written as "SDA" and so on.
// #define TFT_SCLK 18
// #define TFT_CS   15  // Chip select control pin
// #define TFT_DC   2  // Data Command control pin
// #define TFT_RST  4  // Reset pin (could connect to Arduino RESET pin)

char *version = "Version 5.1";

// SABİTLER
enum Languages {
  English,
  Turkish,
};

enum Eeprom_addresses {
  slave_ID_eep_address = 0, // (1 byte)
  eeprom_write_status_address = 1,  // eepromdan okunacak verilerin doğruluğu için ilk yazma gerçekleşti mi kontrol register adresi (1 byte)
  main_password_address = 2, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  modbus_baud_rate_address = 4,  // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  modbus_parity_bit_address = 6,  // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  previous_flow_rate_adress = 8, //bu adres 4 byte veri depoladığından dolayı sonraki adres +4 ileri olacaktır (2 byte)
  modbus_stop_bit_address = 12,  // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  theme_color_address = 14, // bu adres 1 byte veri depoladığından dolayı sonraki adres +1 ileri olacaktır (1 byte)
  analog_out_2_type_address = 15, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  analog_out_3_type_address = 17, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  upper_limit_VDC_address = 19, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  lower_limit_VDC_address = 21, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  upper_limit_mA_address = 23, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  lower_limit_mA_address = 25, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  D_out_2_alarm_state_address = 27, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  D_out_3_alarm_state_address = 29, // bu adres 2 byte veri depoladığından dolayı sonraki adres +2 ileri olacaktır (2 byte)
  conductivity_k_factor_register_address = 31, // bu adres 4 byte veri depoladığından dolayı sonraki adres +4 ileri olacaktır (2 byte)
  screen_refresh_time_value_address = 35, // bu adres 4 byte veri depoladığından dolayı sonraki adres +4 ileri olacaktır (2 byte)
  screen_total_choice_address = 39, // bu adres 1 byte veri depoladığından dolayı sonraki adres +1 ileri olacaktır (2 byte)
};

enum button_definitions {
  press_esc = 1,
  press_up,
  press_down,
  press_enter,
};

enum labels {
  // Main and differantial screens
  main_screen = 1,
  second_screen,

  // Password screen
  password_screen,

  // SETTINGS
  settings,
  basic_settings,
  advanced_settings,
  output,
  communication,
  display,
  data_logging,
  information,

  // BASIC SETTINGS
  quick_setup,
  languages,
  flow_parameters,
  sensor_size,

  // BASIC SETTINGS - Language
  english_language,
  turkish_language,

  // BASIC SETTINGS - Quick setup
  _sensor_size,
  _flow_range,
  _k_factor,
  _pulse_factor,
  _conductivity_alarm_value,

  // BASIC SETTINGS - Flow parameters
  _units,
  flow_range,
  decimal_point,
  response_time,
  flow_cut_off,
  flow_direction,

  // BASIC SETTINGS - Flow parameters - Units
  flow_unit,
  total_unit,

  // BASIC SETTINGS - Flow parameters - Flow unit
  m3_s,
  m3_m,
  m3_h,
  L_s,
  L_m,
  L_h,
  kg_s,
  kg_m,
  kg_h,
  t_s,
  t_m,
  t_h,
  ft3_s,
  ft3_m,
  ft3_h,
  ukgal_s,
  ukgal_m,
  ukgal_h,
  usgal_s,
  usgal_m,
  usgal_h,
  Lb_s,
  Lb_m,
  Lb_h,

  // BASIC SETTINGS - Flow parameters - Total unit
  m3_,
  L_,
  ft3_,
  ukgal_,
  usgal_,
  kg_,
  t_,
  Lb_,

  // BASIC SETTINGS - Flow parameters - Flow direction
  forward_reverse,
  forward,
  reverse,

  // ADVENCED SETTINGS
  zero_function,
  density_conductivity,
  change_password,
  reset,
  meter_k_factor,
  fine_calibration,

  // ADVENCED SETTINGS - Meter - k factor
  meter_factor,
  k_factor,

  // ADVENCED SETTINGS - Fine calibration
  sensitivity,
  application_mode,
  sensor_freqency,
  fine_calibration_en,
  _1_st_point,
  _1_st_value,
  _2_st_point,
  _2_st_value,
  _3_st_point,
  _3_st_value,
  _4_st_point,
  _4_st_value,

  // ADVENCED SETTINGS - Application mode
  normal,
  pulp_or_slurry,

  // ADVENCED SETTINGS - Sensor freqency
  _5_Hz,          
  _4_167_Hz,      
  _3_125_Hz,   

  // ADVENCED SETTINGS - Fine calibration EN
  enable,
  disable,

  // ADVENCED SETTINGS - Density
  density_unit,
  density_value,
  conductivity_alarm_value,
  conductivity_k_factor,

  // ADVENCED SETTINGS - Density - Density unit
  g_cm3,
  kg_m3,
  Lb_ukgal,
  Lb_usgal,
  Lb_f3,

  // ADVENCED SETTINGS - Reset
  factory_reset,
  total_forward_reset,
  total_backward_reset,

  // ADVENCED SETTINGS - Zero function
  automatic_zero,
  manual_zero,

  // ADVENCED SETTINGS - Factory reset
  no,
  yes,

  // OUTPUT
  analog_output,
  digital_output,
  alarms,

  // OUTPUT - Analog output
  analog_out_1_mA,
  analog_out_2_mA,
  analog_out_3_VDC,

  // OUTPUT - Analog output - Analog output 1 mA
  function_analog_out_1_mA,
  output_type_analog_out_1_mA,
  test_mode_analog_out_1_mA,
  output_calibration_analog_out_1_mA,

  // OUTPUT - Analog output - Analog output 2 mA
  function_analog_out_2_mA,
  output_type_analog_out_2_mA,
  test_mode_analog_out_2_mA,
  output_calibration_analog_out_2_mA,

  // OUTPUT - Analog output - Analog output 3 VDC
  function_analog_out_3_VDC,
  output_type_analog_out_3_VDC,
  test_mode_analog_out_3_VDC,
  output_calibration_analog_out_3_VDC,

  // OUTPUT - Analog output - Analog output 1
  ma_4_20,
  ma_4_12_20,
  ma_0_20,

  // OUTPUT - Analog output - Analog output 2 - Function
  flow_type,
  temperature_type,
  conductivity_type,

  // OUTPUT - Analog output - Analog output 2 - Output types
  _ma_4_20,
  _ma_4_12_20,

  // OUTPUT - Analog output - Analog output 3 - Output types
  v_0_10,
  v_0_5_10,

  // OUTPUT - Analog output - Analog output 1 mA - Test mode
  ma_4,
  ma_12,
  ma_20,

  // OUTPUT - Analog output - Analog output 2 mA - Test mode
  ma_4_analog_out_2_mA,
  ma_12_analog_out_2_mA,
  ma_20_analog_out_2_mA,

  // OUTPUT - Analog output - Analog output 3 VDC - Test mode
  v_5_analog_out_3_VDC,
  v_10_analog_out_3_VDC,

  // OUTPUT - Analog output - Analog output 1 - Output calibration
  set_lower_analog_out_1_mA,
  set_upper_analog_out_1_mA,

  // OUTPUT - Analog output - Analog output 2 - Output calibration
  set_lower_analog_out_2_mA,
  set_upper_analog_out_2_mA,

  // OUTPUT - Analog output - Analog output 3 - Output calibration
  set_lower_analog_out_3_VDC,
  set_upper_analog_out_3_VDC,

  // OUTPUT - Digital output
  digital_out_1,
  digital_out_2,
  digital_out_3,
  
  // OUTPUT - Digital output - Digital out 1
  out_functions,
  pulse_settings,

  // OUTPUT - Digital output - Out functions
  high_alarm_out_fnc,
  low_alarm_out_fnc,

  // OUTPUT - Digital output - Pulse settings
  pulse_factor,
  pulse_width,
  max_frequency,
  pulse_test,

  // OUTPUT - Digital output - Digital out 1
  pulse_frequency,
  high_flow_alarm,
  low_flow_alarm,
  conductivity,
  system_alarm,
  direction,

  // OUTPUT - Digital output - Digital out x - Pulse frequency
  pulse,
  frequency,

  // OUTPUT - Alarm
  high_alarm,
  low_alarm,
  sys_alarm,

  // OUTPUT - Alarm - High alarm
  high_alarm_en,
  high_alarm_opt,
  high_alarm_mode,
  high_alarm_value,
  high_alarm_Iout_value,

  // OUTPUT - Alarm - High alarm - Opt
  Q_percent,
  Q_unit,
  total_net,
  total_forward,
  total_reverse,

  // OUTPUT - Alarm - High alarm - Mode
  active_high,
  active_low,

  // OUTPUT - Alarm - Low alarm
  low_alarm_en,
  low_alarm_opt,
  low_alarm_mode,
  low_alarm_value,
  low_alarm_Iout_value,

  // COMMUNICATION
  modbus_,
  ethernet,
  hart,
  profibus,
  bluetooth,
  wifi,

  // COMMUNICATION - Modbus
  modbus_baudrate,
  modbus_id,
  modbus_parity_bit,
  modbus_stop_bit,

  // COMMUNICATION - Modbus - Baudrate
  baud_1200,
  baud_2400,
  baud_4800,
  baud_9600,
  baud_19200,
  baud_38400,

  // COMMUNICATION - Modbus - Parity bit
  none,
  odd,
  even,

  // COMMUNICATION - Modbus - Stop bit
  one,
  two,

  // COMMUNICATION - Wifi - Wifi firmware uptade
  wifi_firmware_uptade,

  // DISPLAY
  reverse_colors,
  screen_refresh_time,
  damping_time,

  // DISPLAY - Reverse colors
  dark_theme,
  white_theme,

  // DATA LOGGING
  interval_unit,
  interval_time,

  // INFORMATION
  serial_no,
  product_date,
  _information,
};

// Diller
char *english[] = {
  "Password",                     // 0
  "Please enter password",        // 1
  "done !",                       // 2
  "Wrong password ! Try again",   // 3
  "Basic Settings",               // 4
  "Advanced Settings",            // 5
  "Output",                       // 6
  "Communication",                // 7
  "Display",                      // 8
  "Data Logging",                 // 9
  "Information",                  // 10
  "MENU",                         // 11
  "MSG :",                        // 12
  "P",                            // 13
  "EMDE V2.0",                    // 14
  "Language",                     // 15
  "Flow Parameters",              // 16
  "Sensor Size",                  // 17
  "Zero Functions",               // 18
  "Density - Conductivity",       // 19
  "Change Password",              // 20
  "Reset",                        // 21
  "Fine Calibration",             // 22
  "Meter - K Factor",             // 23
  "Analog Output",                // 24
  "Digital Output",               // 25
  "Theme Selection",              // 26
  "Line 1",                       // 27
  "Line 2",                       // 28
  "Serial No",                    // 29
  "Product Date",                 // 30
  "Information",                  // 31
  "Flow Unit",                    // 32
  "Flow Range",                   // 33
  "Decimal Point",                // 34
  "Response Time",                // 35
  "Flow Cut-Off",                 // 36
  "Flow Direction",               // 37
  "Interval Unit",                // 38
  "Interval Time",                // 39
  "Modbus",                       // 40
  "Ethernet            [NA]",     // 41
  "Hart                  [NA]",   // 42
  "Profibus            [NA]",     // 43
  "Bluetooth          [NA]",      // 44
  "Wi-Fi",                        // 45
  "[NA]",                         // 46
  "Functions",                    // 47
  "Automatic Zero",               // 48
  "Manual Zero",                  // 49
  "Modbus Baudrate",              // 50
  "Modbus ID",                    // 51
  "Modbus Parity Bit",            // 52
  "0 - 10 V",                     // 53
  "4 - 20 mA",                    // 54
  "Digital Out 1",                // 55
  "Digital Out 2",                // 56
  "Digital Out 3",                // 57
  "0 - 10 mA",                    // 58
  "0 - 20 mA",                    // 59
  "4 - 12 - 20 mA",               // 60
  "Pulse - Frequency",            // 61
  "High Flow Alarm",               // 62
  "Low Flow Alarm",               // 63
  "Conductivity",                 // 64
  "System Alarm",                 // 65
  "Direction",                    // 66
  "Pulse",                        // 67
  "Frequency",                    // 68
  "Range",                        // 69
  "None",                         // 70
  "Odd",                          // 71
  "Even",                         // 72
  "out of range",                 // 73
  "Density Unit",                 // 74
  "Density Value",                // 75
  "active",                       // 76
  "passive",                      // 77
  "English",                      // 78
  "Turkish",                      // 79
  "Normal",                      // 80
  "Reverse",                      // 81
  "Analog Out 1  mA",             // 82
  "Analog Out 2  mA",             // 83
  "Output Type",                  // 84
  "Flow",                         // 85
  "Temperature",                  // 86
  "Conductivity",                 // 87
  "only for flowrate",            // 88
  "Forward - Reverse",            // 89
  "YES",                          // 90
  "NO",                           // 91
  "Please enter valid password",  // 92
  "Please enter new password",    // 93
  "The password was changed",     // 94
  "Factory Reset",                // 95
  "Forward Total Reset",          // 96
  "Backward Total Reset",         // 97
  "Modbus Stop Bit",              // 98
  "Dark Theme",                   // 99
  "White Theme",                  // 100
  "Analog Out 3  VDC",            // 101
  "Test Mode",                    // 102
  "Output Calibration",           // 103
  "Adjust 4 mA",                  // 104
  "Adjust 20 mA",                 // 105
  "Adjust 0 V",                   // 106
  "Adjust 10 V",                  // 107
  "K Factor",                     // 108
  "Units",                        // 109
  "Total Unit",                   // 110
  "Sensitivity",                  // 111
  "Meter Factor",                 // 112
  "Conductivity",                 // 113
  "Density",                      // 114
  "Application Mode",             // 115
  "Sensor Frequency",             // 116
  "1st point",                    // 117
  "1st value",                    // 118
  "2nd point",                    // 119
  "2nd value",                    // 120
  "3rd point",                    // 121
  "3rd value",                    // 122
  "4th point",                    // 123
  "4th value",                    // 124
  "Fine Calibration EN.",         // 125
  "Normal",                       // 126
  "Pulp or Slurry",               // 127
  "Enable",                       // 128
  "Disable",                      // 129 
  "Alarm",                        // 130 
  "Alarm EN.",                    // 131    
  "Alarm Option",                 // 132
  "Alarm Mode",                   // 133
  "Alarm Value",                  // 134
  "Alarm Iout",                   // 135
  "High Alarm",                   // 136
  "Low Alarm",                    // 137
  "System Alarm EN.",             // 138
  "Q [%]",                        // 139
  "Q [unit]",                     // 140
  "Total Net",                    // 141
  "Total Forward",                // 142
  "Total Reverse",                // 143
  "Active High",                  // 144
  "Active Low",                   // 145
  "High Alarm Out Fnc.",          // 146
  "Low Alarm Out Fnc.",           // 147
  "Pulse Factor",                 // 148
  "Pulse Width",                  // 149
  "Max Frequency",                // 150
  "Pulse Test",                   // 151
  "Out Functions",                // 152
  "Pulse Settings",               // 153
  "Quick Setup",                  // 154
  "Conductivity Alarm Value",     // 155
  "Conductivity K Factor",        // 156
  "Sreen Refresh Time",           // 157
  "Damping Time",                 // 158
  "Uptade Software",              // 159
};

char *turkish[] = {
  "Sifre",                          // 0
  "Lutfen sifre girin",             // 1
  "onaylandi !",                    // 2
  "Sifre yanlis ! Tekrar deneyin",  // 3
  "Temel Ayarlar",                  // 4
  "Gelismis Ayarlar",               // 5
  "Cikis Ayarlari",                 // 6
  "Iletisim",                       // 7
  "Ekran",                          // 8
  "Veri Kayit",                     // 9
  "Bilgilendirme",                  // 10
  "MENU",                           // 11
  "MSJ :",                          // 12
  "S",                              // 13
  "EMDE V2.0",                      // 14
  "Dil",                            // 15
  "Akis Parametreleri",             // 16
  "Hat Capi",                       // 17
  "Akis Sifirlama",                 // 18
  "Yogunluk - Iletkenlik",          // 19
  "Sifre Degistir",                 // 20
  "Reset",                          // 21
  "Hassas Kalibrasyon",             // 22
  "Metre - K Faktoru",              // 23
  "Analog cikis",                   // 24
  "Digital Cikis",                  // 25
  "Tema Secimi",                    // 26
  "Satir 1",                        // 27
  "Satir 2",                        // 28
  "Seri Numarasi",                  // 29
  "Urun Tarihi",                    // 30
  "Bilgilendirme",                  // 31
  "Akis Birimi",                    // 32
  "Olcme Araligi",                  // 33
  "Ondalik Nokta",                  // 34
  "Cevap suresi",                   // 35
  "Akis Kesim Siniri",              // 36
  "Akis Yonu",                      // 37
  "Aralik Birimi",                  // 38
  "Aralik Zamani",                  // 39
  "Modbus",                         // 40
  "Ethernet             [NA]",      // 41
  "Hart                    [NA]",   // 42
  "Profibus             [NA]",      // 43
  "Bluetooth           [NA]",       // 44
  "Wi-Fi",                          // 45
  "[NA]",                           // 46
  "Fonksiyonlar",                   // 47
  "Otomatik Sifirlama",             // 48
  "Manuel Sifirlama",               // 49
  "Modbus Baudrate",                // 50
  "Modbus ID",                      // 51
  "Modbus Parity Bit",              // 52
  "0 - 10 V",                       // 53
  "4 - 20 mA",                      // 54
  "Dijital Cikis 1",                // 55
  "Dijital Cikis 2",                // 56
  "Dijital Cikis 3",                // 57
  "0 - 10 mA",                      // 58
  "0 - 20 mA",                      // 59
  "4 - 12 - 20 mA",                 // 60
  "Pulse - Frekans",                // 61
  "Alarm Yuksek",                   // 62
  "Alarm Dusuk",                    // 63
  "Iletkenlik",                     // 64
  "Sistem Alarm",                   // 65
  "Yon",                            // 66
  "Pulse",                          // 67
  "Frekans",                        // 68
  "Aralik",                         // 69
  "None",                           // 70
  "Odd",                            // 71
  "Even",                           // 72
  "araligin disinda",               // 73
  "Yogunluk Birimi",                // 74
  "Yogunluk Degeri",                // 75
  "aktif",                          // 76
  "pasif",                          // 77
  "Ingilizce",                      // 78
  "Turkce",                         // 79
  "Normal",                          // 80
  "Geri",                           // 81
  "Analog Cikis 1  mA",             // 82
  "Analog Cikis 2  mA",             // 83
  "Cikis Tipi",                     // 84
  "Akis",                           // 85
  "Sicaklik",                       // 86
  "Ilenkenlik",                     // 87
  "yalniz akis icindir",            // 88
  "Ileri - Geri",                   // 89
  "EVET",                           // 90
  "HAYIR",                          // 91
  "Lutfen gecerli sifreyi girin",   // 92
  "Lutfen yeni sifreyi girin",      // 93
  "Sifre degistirildi",             // 94
  "Fabrika Ayarlari",               // 95
  "Ileri Total Sifirla",            // 96
  "Geri Total Sifirla",             // 97
  "Modbus Stop bit",                // 98
  "Koyu Tema",                      // 99
  "Beyaz Tema",                     // 100
  "Analog Cikis 3  VDC",            // 101
  "Test Modu",                      // 102
  "Cikis Kalibrasyonu",             // 103
  "Ayarla 4 mA",                    // 104
  "Ayarla 20 mA",                   // 105
  "Ayarla 0 V",                     // 106
  "Ayarla 10 V",                    // 107
  "K Factoru",                      // 108
  "Birimler",                       // 109
  "Toplam Birim",                   // 110
  "Duyarlilik",                     // 111
  "Metre Faktoru",                  // 112
  "Iletkenlik",                     // 113
  "Yogunluk",                       // 114
  "Uygulama Modu",                  // 115
  "Sensor Frekansı",                // 116
  "1. Nokta",                       // 117
  "1. Deger",                       // 118
  "2. Nokta",                       // 119
  "2. Deger",                       // 120
  "3. Nokta",                       // 121
  "3. Deger",                       // 122
  "4. Nokta",                       // 123
  "4. Deger",                       // 124
  "Hassas Kalibrasyon Akt.",        // 125
  "Normal",                         // 126
  "Parcacik ve Bulaniklik",         // 127
  "Aktif",                          // 128
  "Pasif",                          // 129 
  "Alarm",                          // 130 
  "Alarm Akt.",                     // 131    
  "Alarm Secenekleri",              // 132
  "Alarm Modu",                     // 133
  "Alarm Degeri",                   // 134
  "Alarm Iout",                     // 135
  "Yukse Alarm",                    // 136
  "Dusuk Alarm",                    // 137
  "Sistem Alarm Akt.",              // 138
  "Q [%]",                          // 139
  "Q [birim]",                      // 140
  "Total Net",                      // 141
  "Total Ileri",                    // 142
  "Total Geri",                     // 143
  "Aktif Yuksek",                   // 144
  "Aktif Dusuk",                    // 145
  "Yuksek Alarm Cikis Fonk.",       // 146
  "Dusuk Alarm Cikis Fonk.",        // 147
  "Pulse Faktoru",                  // 148
  "Pulse Genisligi",                // 149
  "Max Frekans",                    // 150
  "Pulse Test",                     // 151
  "Cikis Fonksiyonları",            // 152
  "Pulse Ayarlari",                 // 153
  "Hizli Kurulum",                  // 154
  "iletkenlik Alarm Degeri",        // 155
  "iletkenlik K Faktoru",           // 156
  "Ekran Yenilenme Suresi",         // 157
  "Sonumleme Suresi",               // 158
  "Yazilimi Guncelle",              // 159
};

// Birimler
char *units[] = {
  "g / cm3",       // 0
  "kg / m3",       // 1
  "Lb / ukgal",    // 2
  "Lb / f3",       // 3
  "m3 / s",        // 4
  "m3 / m",        // 5
  "m3 / h",        // 6
  "L / s",         // 7
  "L / m",         // 8
  "L / h",         // 9
  "ft3 / s",       // 10
  "ft3 / m",       // 11
  "ft3 / h",       // 12
  "ukgal / s",     // 13
  "ukgal / m",     // 14
  "ukgal / h",     // 15
  "usgal / s",     // 16
  "usgal / m",     // 17
  "usgal / h",     // 18
  "kg / s",        // 19
  "kg / m",        // 20
  "kg / h",        // 21
  "t / s",         // 22
  "t / m",         // 23
  "t / h",         // 24
  "Lb / s",        // 25
  "Lb / m",        // 26
  "Lb / h",        // 27
  "Lb / usgal",    // 28
  "0 - 5 - 10 V",  // 29
  "4 mA",          // 30
  "12 mA",         // 31
  "20 mA",         // 32
  "5 V",           // 33
  "10 V",          // 34
  "m3",            // 35   
  "L",             // 36
  "ft3",           // 37 
  "ukgal",         // 38
  "usgal",         // 39
  "kg",            // 40
  "t",             // 41
  "Lb",            // 42
  "5 Hz",          // 43
  "4.167 Hz",      // 44
  "3.125 Hz",      // 45
};


// DEĞİŞKENLER
// Ayarlanabilir
uint8_t slave_ID = 1;
uint16_t baud_rate_value = 9600;
uint16_t parity_bit_value = 0;  // None = 0, Odd = 1, Even = 2
uint16_t stop_bit_value = 1;
uint16_t main_password = 0000;
const uint16_t master_password = 1863;
uint8_t theme_color = dark_theme;
float screen_refresh_time_value = 1;  // ekran değerleri yenileme süresi

// Modbus slave değişkenleri
const uint8_t holding_registers_quantity = 12;
uint16_t holdingRegisters[holding_registers_quantity];  // Toplamda 6 adet 16-bit register (3 float, 1 int32, 2 uint32)

float flow;       // anlık akış
float flow_rate;  // akış hızı
float mA_out;     // out mA çıkış
float total_differential; // total fark
float total_positive; // total ileri yön
float total_negative; // total geri yön

uint16_t flow_address = 0; 
uint16_t flow_rate_address = 2;
uint16_t mA_out_address = 4;
uint16_t total_differential_address = 6;
uint16_t total_positive_address = 8;
uint16_t total_negative_address = 10;

uint16_t register_adress = 10000; // slave registarlara yazma işlemi olduysa o register ın adresini alır

// Cihaz parametleri
uint16_t language = English;
uint16_t flow_unit_value = 0, total_unit_value = 0;
uint16_t flow_direction_value = 0;
uint16_t density_unit_value = 0;
uint16_t analog_out_1_type = 0, analog_out_2_type = _ma_4_20, analog_out_3_type = v_0_10;
uint16_t measure_mode_value = 0;
float flow_zero_value = 0;

// Fonksiyonlar arası kullanılan değişkenler
uint8_t screen_switch = main_screen; 
uint8_t previous_screen_switch = 0;  // başlangıç ekranını seç
volatile uint8_t button_state = 0;
uint8_t idle = 0;
bool page_change = true;                        // sayfa numarası değişimi takibi için
unsigned long last_time = 0, current_time = 0;  // zamanlama değişkenleri
float time_for_main_sreens = 0, conductivity_temperature_second = 4;
uint8_t half_second = 0, second_for_outputs_set = 0, second_for_menu = 0;  // zamanlama değişkenleri
uint8_t password_validity_time = 150;                                      // zamanlama değişkenleri
int16_t cursor = 0, previous_cursor = 0;                                   // menu ekranı setting seçim değişkeni
bool sign_digit, sign_state, decimal_state;                                // Sayı giriş ekranı "+" "- " işaret durumu değişkeni
int8_t number[8];
int8_t digit, previous_digit;          // Sayı giriş ekranı kırmızı çizgi konumu
float read_or_write_number;            // Veri giriş ekranı sayısı
uint8_t time_after_communication = 8;  // modbus haberleşmesi ardından bir sonraki haberleşme ile çakışma olmaması için beklenecek süre ms cinsinden
uint8_t verification = 1;              // Modbus haberleşme doğrulama değişkeni
float previous_flow_rate = 0;          // Automatic zero için bir önceki akış hızı
uint16_t previous_flow_unit;
float percentage;                                                                                  // anlık akış yüzdesi
uint16_t upper_limit_VDC = 201, lower_limit_VDC = 2, upper_limit_mA = 2567, lower_limit_mA = 482;  // kalibrasyon değerleri
uint16_t calibration_value;                                                                        // kalibrasyon ekranındaki değişen sayı
uint16_t digital_out_selection;
uint8_t page_number;
bool opening_page = true;                          // sayfa ilk görüntüsünü bir kez basma için onay değişkeni
bool left_aligned = true, middle_aligned = false;  // bar stil seçimi
uint16_t tick_location;
uint16_t alarm_state = 0, previous_alarm_state = 0, D_out_2_alarm_state = 4, D_out_3_alarm_state = 8;  // Alarm durumu registerı
float volatile_float;
uint16_t volatile_uint16;
float conductivity_k_factor_value = 1;
float flow_range_value;
uint8_t screen_total_choice = 0;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Buton düzeltme için ekleme kodlar

// Ortak işlemlerde kullandığın değişkenler (projende varsa extern yap)

const uint32_t DEBOUNCE_MS = 60;
const uint32_t QUIET_MS    = 100;

volatile uint32_t quiet_until = 0;

// ESC
volatile uint32_t esc_count = 0;
volatile bool     esc_locked = false;
volatile uint32_t esc_tedge  = 0;

// UP
volatile uint32_t up_count = 0;
volatile bool     up_locked = false;
volatile uint32_t up_tedge  = 0;

// DOWN
volatile uint32_t down_count = 0;
volatile bool     down_locked = false;
volatile uint32_t down_tedge  = 0;

// ENTER
volatile uint32_t enter_count = 0;
volatile bool     enter_locked = false;
volatile uint32_t enter_tedge  = 0;

// Yardımcı
static inline bool pin_low(int pin){ return digitalRead(pin) == LOW; }
static inline bool pin_high(int pin){ return !pin_low(pin); }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// wifi parametleri
const char* ssid = "bass";              // Wi-Fi SSID
const char* password = "12345678";      // Wi-Fi Password
const char* firmwareUrl = "https://raw.githubusercontent.com/BassInstruments/EMDE/main/EMDE.ino.bin";


// NESNELER
ModbusMaster modbus_master;  // Modbus master nesnesini olustur
ModbusRTUSlave modbus_slave(Serial, DE_RE_PIN_1);  // Modbus slave nesnesini oluştur
TFT_eSPI tft = TFT_eSPI();  // TFT nesnesini olustur
MCP4725 MCP(MPC_DAC_ADDRESS); // Akım çıkışı için MCP nesnesi oluştur

// BUTON KESMESİ FONKSİYON PROTOTİPLERİ
void IRAM_ATTR esc_button_interrupt();
void IRAM_ATTR up_button_interrupt();
void IRAM_ATTR down_button_interrupt();
void IRAM_ATTR enter_button_interrupt();
void IRAM_ATTR serial_interrupt();

void setup() {

   digitalWrite(LCD_BLK, LOW);

  // delay(750);  // mcu uyanıp ekranla bağlantı kurması için geçecek süre

  // Modbus haberleşme pinlerini ayarla

  // pinMode(DE_RE_PIN_1, OUTPUT);
  // pinMode(DE_RE_PIN_2, OUTPUT);

  pinMode(relay_pin, OUTPUT);
  pinMode(pulse_pin, OUTPUT);

  pinMode(LCD_BLK, OUTPUT);

  pinMode(esc_button, INPUT);    // Dahili pull-up direncini etkinleştir
  pinMode(up_button, INPUT);     // Dahili pull-up direncini etkinleştir
  pinMode(down_button, INPUT);   // Dahili pull-up direncini etkinleştir
  pinMode(enter_button, INPUT);  // Dahili pull-up direncini etkinleştir 

  // baslangicta modbus dinleme modunda
  // digitalWrite(DE_RE_PIN_1, LOW);
  // digitalWrite(DE_RE_PIN_2, LOW);

  // baslangicta cikislar düsük modda
  digitalWrite(relay_pin, LOW);
  digitalWrite(pulse_pin, LOW);

 

  // Buton kesme fonksiyonlarını butonlarla bağla
  attachInterrupt(digitalPinToInterrupt(esc_button), esc_button_interrupt, CHANGE);      //  kesme tanımla
  attachInterrupt(digitalPinToInterrupt(up_button), up_button_interrupt, CHANGE);        //  kesme tanımla
  attachInterrupt(digitalPinToInterrupt(down_button), down_button_interrupt, CHANGE);    //  kesme tanımla
  attachInterrupt(digitalPinToInterrupt(enter_button), enter_button_interrupt, CHANGE);  //  kesme tanımla 

  // Serial (programlama uartı) kesmesi tanımlaması
  Serial.onReceive(serial_interrupt);

  EEPROM.begin(64);  // Eppromda 64 byte lık yer ayrıldı

  Wire.begin();  // I2C haberleşmesi için
  MCP.begin();   // Akım çıkışı için

  Serial2.begin(9600, SERIAL_8N1, MASTER_RX_PIN, MASTER_TX_PIN);
  modbus_master.begin(1, Serial2);  // Modbus master için slave ID = 1, UART 2 kullan

  tft.init();
  tft.setRotation(1);
  tft.setSwapBytes(true);

  delay(1000);
  digitalWrite(LCD_BLK, HIGH);
  beginning_logo_animation();

  // İlk çalışmada eepromu default değerlerle doldur
  if (EEPROM.readByte(eeprom_write_status_address) == 10) {  // eeprom a ilk değerlerin atamasının yapıldığı bilgisini taşıyan register adresine random atanan 697 değerini kontrol et.
    // ilk değer atamaları yapıldıysa değerleri kullanmak için değişkenlere ata
    slave_ID = EEPROM.readByte(slave_ID_eep_address);
    theme_color = EEPROM.readByte(theme_color_address);
    main_password = EEPROM.readUShort(main_password_address);
    baud_rate_value = EEPROM.readUShort(modbus_baud_rate_address);
    parity_bit_value = EEPROM.readUShort(modbus_parity_bit_address);
    stop_bit_value = EEPROM.readUShort(modbus_stop_bit_address);
    previous_flow_rate = EEPROM.readFloat(previous_flow_rate_adress);
    analog_out_2_type = EEPROM.readUShort(analog_out_2_type_address);
    analog_out_3_type = EEPROM.readUShort(analog_out_3_type_address);
    upper_limit_VDC = EEPROM.readUShort(upper_limit_VDC_address);
    lower_limit_VDC = EEPROM.readUShort(lower_limit_VDC_address);
    upper_limit_mA = EEPROM.readUShort(upper_limit_mA_address);
    lower_limit_mA = EEPROM.readUShort(lower_limit_mA_address);
    D_out_2_alarm_state = EEPROM.readUShort(D_out_2_alarm_state_address);
    D_out_3_alarm_state = EEPROM.readUShort(D_out_3_alarm_state_address);
    screen_total_choice = EEPROM.readUShort(screen_total_choice_address);
    conductivity_k_factor_value = EEPROM.readFloat(conductivity_k_factor_register_address);
    screen_refresh_time_value = EEPROM.readFloat(screen_refresh_time_value_address);
  } else {  // ilk değer atamaları yapılmadıysa ilk değerleri ata
    EEPROM.writeByte(slave_ID_eep_address, slave_ID);
    EEPROM.writeByte(theme_color_address, theme_color);
    EEPROM.writeByte(eeprom_write_status_address, 10);         // eeprom a ilk değerlerin atamasının yapıldığı bu değişkene örneğin 10 değerini kaydederek göster
    EEPROM.writeUShort(main_password_address, main_password);  // şifre değişiminde eeproma bu şekilde yazılacak
    EEPROM.writeUShort(modbus_baud_rate_address, 9600);
    EEPROM.writeUShort(modbus_parity_bit_address, parity_bit_value);
    EEPROM.writeUShort(modbus_stop_bit_address, stop_bit_value);
    EEPROM.writeUShort(analog_out_2_type_address, _ma_4_20);
    EEPROM.writeUShort(analog_out_3_type_address, v_0_10);
    EEPROM.writeUShort(upper_limit_VDC_address, upper_limit_VDC);
    EEPROM.writeUShort(lower_limit_VDC_address, lower_limit_VDC);
    EEPROM.writeUShort(upper_limit_mA_address, upper_limit_mA);
    EEPROM.writeUShort(lower_limit_mA_address, lower_limit_mA);
    EEPROM.writeUShort(D_out_2_alarm_state_address, D_out_2_alarm_state);
    EEPROM.writeUShort(D_out_3_alarm_state_address, D_out_3_alarm_state);
    EEPROM.writeUShort(screen_total_choice_address, screen_total_choice);
    EEPROM.writeFloat(previous_flow_rate_adress, 0);
    EEPROM.writeFloat(conductivity_k_factor_register_address, conductivity_k_factor_value);
    EEPROM.writeFloat(screen_refresh_time_value_address, screen_refresh_time_value);

    EEPROM.commit();  // kaydet

  }

  // Stop bit ve parity bit ayarlarının hafızadan çekilmesi
  if (stop_bit_value == 1) {
    if (parity_bit_value == 0) {
      modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N1, SLAVE_RX_PIN, SLAVE_TX_PIN);
    } else if (parity_bit_value == 1) {
      modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O1, SLAVE_RX_PIN, SLAVE_TX_PIN);
    } else if (parity_bit_value == 2) {
      modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E1, SLAVE_RX_PIN, SLAVE_TX_PIN);
    }
  } else if (stop_bit_value == 2) {
    if (parity_bit_value == 0) {
      modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N2, SLAVE_RX_PIN, SLAVE_TX_PIN);
    } else if (parity_bit_value == 1) {
      modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O2, SLAVE_RX_PIN, SLAVE_TX_PIN);
    } else if (parity_bit_value == 2) {
      modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E2, SLAVE_RX_PIN, SLAVE_TX_PIN);
    }
  }

  modbus_slave.configureHoldingRegisters(holdingRegisters, holding_registers_quantity);  // Tek bir dizi içinde tüm holding registerlar

  // Callbacks allow us to configure the RS485 transceiver correctly
  modbus_master.preTransmission(preTransmission);
  modbus_master.postTransmission(postTransmission);

  // İlk haberleşme geçersiz oluyor
  modbus_master.read_or_write(1, READ_HOLDING, 0x0100, &language);
  delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

  // Dili seç
  modbus_master.read_or_write(1, READ_HOLDING, 0x0100, &language);
  delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

  // Ekranda gösterilecek mA biçimini registerdan oku
  modbus_master.read_or_write(1, READ_HOLDING, 0x0111, &analog_out_1_type);
  delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

  
}

void loop() {

  // Zamanlamayı çalıştır
  count_second();

  // Ekrana görüntü bas (içindeki modbus haberleşmelerinden kaynaklık olarak ms mertebesinden gecikmeleri mevcut)
  screen();

  // // Analog çıkışları ekrandan bağımsız güncelle
  // analog_outputs_set();

  modbus_rx();

}
/*******************************************************************************************************************************************/


/*******************************************************************************************************************************************/
// KONTROL FONKSİYONLARI
void screen() {  // bu fonksiyonu sürekli tekrarlar

  bool high_light = true, low_light = false;  // bar aydınlatma değişkenleri
  static uint16_t uint16_value;
  int16_t int16_value;
  int32_t int32_value;
  bool decimal_number = true, non_decimal_number = false;
  bool non_positive = true, positive = false;
  uint16_t language_state = 0;
  char calibration_value_buffer[6];
  static uint16_t percentage_bar;
  static uint8_t previous_half_second;
  static bool green_rectengular = true;
  static uint16_t alarm_Iout_enable;
  static uint16_t divider_value;
  static float temperature, mtp_value;
  static uint16_t decpoint = 0;  // anlık akış ekranda göstereceği ondalık sayısı
  static bool first_text = false;
  static bool alarm_animation = true;  // Alarm animasyonu için tersleme değişkeni
  static int8_t alarm_counter = 0;     // birden çok alarm gösterme değişkeni
  static float V;                      // out mA çıkış
  uint16_t dac_ma_value, dac_v_value;
  float percentage_V;
  static char flow_buffer[35], total_buffer_main_screen[20], total_buffer_second_screen[20], ma_buffer[10], velocity_buffer[10], temperature_buffer[10], conductivity_value_buffer[15], total_forward_buffer[35], total_reverse_buffer[35], sensor_size_for_screen_buffer[10];  // Sayıyı depolamak için yeterli büyüklükte bir dizi
  static uint16_t sensor_size_for_screen;

  const uint8_t degree[] PROGMEM = {
    0b001100,
    0b010010,
    0b010010,
    0b001100,
  };

  const uint8_t slash[] PROGMEM = {
    0b00000000, 0b00000011,  // ..............**
    0b00000000, 0b00000110,  // .............**.
    0b00000000, 0b00001100,  // ............**..
    0b00000000, 0b00011000,  // ...........**...
    0b00000000, 0b00110000,  // ..........**....
    0b00000000, 0b01100000,  // .........**.....
    0b00000000, 0b11000000,  // ........**......
    0b00000001, 0b10000000,  // .......**.......
    0b00000011, 0b00000000,  // ......**........
    0b00000110, 0b00000000,  // .....**.........
    0b00001100, 0b00000000,  // ....**..........
    0b00011000, 0b00000000,  // ...**...........
    0b00110000, 0b00000000,  // ..**............
    0b01100000, 0b00000000,  // .**.............
    0b11000000, 0b00000000,  // **..............
    0b10000000, 0b00000000   // *...............
  };

  const uint16_t *icons_main[] = {
    basic_settings_icon,
    advanced_setting_icon,
    output_icon,
    communication_icon,
    display_icon,
    data_logging_icon,
    Information_icon
  };

  // Sayfa seçimi
  switch (screen_switch) {
    case main_screen:

      percentage_bar = percentage;
      if (percentage_bar < 0) percentage_bar = percentage_bar * -1;  // eksi ile barı dolduramayacağı için pozitif yapılıyor
      if (percentage_bar > 100) percentage_bar = 100;                // Bar ın taşmaması için limitle


      if (opening_page == true) {
        opening_page = false;
        page_change = true;         // sayfa değişimi olduğunu anlama için
        theme_color = white_theme;  // sil
        tft.fillScreen(TFT_WHITE);
        tft.setTextColor(TFT_BLACK, TFT_WHITE);

        tft.fillRect(0, 0, 320, 35, TFT_BLUEE);

        tft.drawLine(15, 112, 305, 112, TFT_BLUE);

        tft.setTextColor(TFT_WHITE, TFT_BLUEE);
        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama
        tft.drawString(ma_buffer, 85, 6, FONT4);
        tft.drawString(velocity_buffer, 270, 6, FONT4);
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama

        tft.setFreeFont(FSS9);
        tft.drawString("mA", 90, 11);
        tft.drawString("m/s", 275, 11);

        tft.setTextColor(TFT_NAVY, TFT_WHITE);
        tft.setTextDatum(TR_DATUM);                   // Sağa yaslı hizalama
        tft.drawString(flow_buffer, 223, 60, FONT6);  // Sayıyı ekrana yazdır
        draw_sigma(18, 128, TFT_NAVY);
        tft.drawString(total_buffer_main_screen, 223, 128, FONT4);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString("SW : 5.1", 35, 220, FONT2);
        tft.drawString("HW : 4.1", 107, 220, FONT2);
        tft.drawString("MSG :", 195, 220, FONT2);
        tft.drawString("NORMAL", 235, 220, FONT2);

        bar_graph_new(19, 166, percentage_bar, TFT_NAVY, TFT_CYAN, TFT_DARKGREY);

        // Akış birimi oku
        // Total unit ve flow unit oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x021C, &uint16_value);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        // Akış birimi oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0104, &flow_unit_value);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        // Flow Unit
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama
        tft.setFreeFont(FSS12);
        if (flow_unit_value == 0) {
          tft.drawString("m3/s", 235, 77, FONT4);
        } else if (flow_unit_value == 1) {
          tft.drawString("m3/m", 235, 77, FONT4);
        } else if (flow_unit_value == 2) {
          tft.drawString("m3/h", 235, 77, FONT4);
        } else if (flow_unit_value == 3) {
          tft.drawString("L/s", 235, 77, FONT4);
        } else if (flow_unit_value == 4) {
          tft.drawString("L/m", 235, 77, FONT4);
        } else if (flow_unit_value == 5) {
          tft.drawString("L/h", 235, 77, FONT4);
        } else if (flow_unit_value == 6) {
          tft.drawString("ft3/s", 235, 77, FONT4);
        } else if (flow_unit_value == 7) {
          tft.drawString("ft3/m", 235, 77, FONT4);
        } else if (flow_unit_value == 8) {
          tft.drawString("ft3/h", 235, 77, FONT4);
        } else if (flow_unit_value == 9) {
          tft.drawString("ukgal/s", 235, 77, FONT4);
        } else if (flow_unit_value == 10) {
          tft.drawString("ukgal/m", 235, 77, FONT4);
        } else if (flow_unit_value == 11) {
          tft.drawString("ukgal/h", 235, 77, FONT4);
        } else if (flow_unit_value == 12) {
          tft.drawString("usgal/s", 235, 77, FONT4);
        } else if (flow_unit_value == 13) {
          tft.drawString("usgal/m", 235, 77, FONT4);
        } else if (flow_unit_value == 14) {
          tft.drawString("usgal/h", 235, 77, FONT4);
        } else if (flow_unit_value == 15) {
          tft.drawString("kg/s", 235, 77, FONT4);
        } else if (flow_unit_value == 16) {
          tft.drawString("kg/m", 235, 77, FONT4);
        } else if (flow_unit_value == 17) {
          tft.drawString("kg/h", 235, 77, FONT4);
        } else if (flow_unit_value == 18) {
          tft.drawString("t/s", 235, 77, FONT4);
        } else if (flow_unit_value == 19) {
          tft.drawString("t/m", 235, 77, FONT4);
        } else if (flow_unit_value == 20) {
          tft.drawString("t/h", 235, 77, FONT4);
        } else if (flow_unit_value == 21) {
          tft.drawString("lb/s", 235, 77, FONT4);
        } else if (flow_unit_value == 22) {
          tft.drawString("lb/m", 235, 77, FONT4);
        } else if (flow_unit_value == 23) {
          tft.drawString("lb/h", 235, 77, FONT4);
        }

        // Total unit oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x010F, &total_unit_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre

        tft.setFreeFont(FSS9);
        if (total_unit_value >= 0 && total_unit_value <= 3) {
          tft.drawString("m3", 238, 128, FONT4);
        } else if (total_unit_value >= 4 && total_unit_value <= 7) {
          tft.drawString("L", 238, 128, FONT4);
        } else if (total_unit_value >= 8 && total_unit_value <= 11) {
          tft.drawString("ft3", 238, 128, FONT4);
        } else if (total_unit_value >= 12 && total_unit_value <= 15) {
          tft.drawString("ukgal", 238, 128, FONT4);
        } else if (total_unit_value >= 16 && total_unit_value <= 19) {
          tft.drawString("usgal", 238, 128, FONT4);
        } else if (total_unit_value >= 20 && total_unit_value <= 23) {
          tft.drawString("kg", 238, 128, FONT4);
        } else if (total_unit_value >= 24 && total_unit_value <= 27) {
          tft.drawString("t", 238, 128, FONT4);
        } else if (total_unit_value >= 28 && total_unit_value <= 31) {
          tft.drawString("Lb", 238, 128, FONT4);
        }


        // Anlık akış için noktadan sonra kaç basamak olacağını oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0142, &decpoint);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        if (total_unit_value == 3 || total_unit_value == 7 || total_unit_value == 11 || total_unit_value == 15 || total_unit_value == 19 || total_unit_value == 23 || total_unit_value == 27 || total_unit_value == 31) divider_value = 1;
        else if (total_unit_value == 2 || total_unit_value == 6 || total_unit_value == 10 || total_unit_value == 14 || total_unit_value == 18 || total_unit_value == 22 || total_unit_value == 26 || total_unit_value == 30) divider_value = 10;
        else if (total_unit_value == 1 || total_unit_value == 5 || total_unit_value == 9 || total_unit_value == 13 || total_unit_value == 17 || total_unit_value == 21 || total_unit_value == 25 || total_unit_value == 29) divider_value = 100;
        else if (total_unit_value == 0 || total_unit_value == 4 || total_unit_value == 8 || total_unit_value == 12 || total_unit_value == 16 || total_unit_value == 20 || total_unit_value == 24 || total_unit_value == 28) divider_value = 1000;
      }

      if (button_state == press_up) {
        button_state = idle;
        opening_page = true;

        screen_switch = second_screen;

        break;

      } else if (button_state == press_down) {
        button_state = idle;
        opening_page = true;

        screen_switch = second_screen;

        break;

      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;

        if (password_validity_time > 120) screen_switch = password_screen;  // password geçerlilik süresi devam ediyorsa şifre ekranını atla
        else {
          screen_switch = settings;  // devam etmiyorsa şifre ekranına git
        }
      } else if (button_state == press_esc) {
        button_state = idle;

        screen_total_choice++;

        if (screen_total_choice >= 3) screen_total_choice = 0;
        EEPROM.writeUShort(screen_total_choice_address, screen_total_choice);
        EEPROM.commit();  // kaydet
      }

      // Belirlenen sürede ekran verilerini güncelle
      if (time_for_main_sreens >= screen_refresh_time_value) {
        time_for_main_sreens = 0;  // saniye sıfırla

        static uint8_t previous_percentage;                                 // anlık akış yüzdesi
        static int32_t differantiel = 0;                                    // total ileri akış - total geri akış ham değer
        static float differantiel_float = 0;                                // total ileri akış - total geri akış float değeri
        uint8_t number_of_digit = 0;                                        // ekrana yazılacak bamasak sayısı
        static uint8_t previous_flow_digits, previous_differantiel_digits;  // ekrana yazılacak bamasak sayısı
        uint16_t pos_flow = 215, pos_differantiel = 250;                    // Anlık akış değeri başlangıç x koordinatı
        uint8_t character_counter = 0;                                      // bamasak hesaplama sayıcısı


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Anlık akış değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0307, &flow);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        modbus_slave.write_to_holding_registers(holdingRegisters, flow, flow_address);

        // Anlık akış değerine göre ekranda nokta kaydır
        if (decpoint == 1) {
          if (flow < 10 && flow > -10) decpoint = 1;
          else if (flow < 100 && flow > -100) decpoint = 1;
          else if (flow < 1000 && flow > -1000) decpoint = 1;
          else if (flow < 10000 && flow > -10000) decpoint = 1;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        } else if (decpoint == 2) {
          if (flow < 10 && flow > -10) decpoint = 2;
          else if (flow < 100 && flow > -100) decpoint = 2;
          else if (flow < 1000 && flow > -1000) decpoint = 2;
          else if (flow < 10000 && flow > -10000) decpoint = 2;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        } else if (decpoint == 3) {
          if (flow < 10 && flow > -10) decpoint = 3;
          else if (flow < 100 && flow > -100) decpoint = 3;
          else if (flow < 1000 && flow > -1000) decpoint = 3;
          else if (flow < 10000 && flow > -10000) decpoint = 2;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        } else if (decpoint == 4) {
          if (flow < 10 && flow > -10) decpoint = 4;
          else if (flow < 100 && flow > -100) decpoint = 4;
          else if (flow < 1000 && flow > -1000) decpoint = 3;
          else if (flow < 10000 && flow > -10000) decpoint = 2;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        }

        if (decpoint == 0) {
          sprintf(flow_buffer, "%.0f", flow);
        } else if (decpoint == 1) {
          sprintf(flow_buffer, "%.1f", flow);
        } else if (decpoint == 2) {
          sprintf(flow_buffer, "%.2f", flow);
        } else if (decpoint == 3) {
          sprintf(flow_buffer, "%.3f", flow);
        } else if (decpoint == 4) {
          sprintf(flow_buffer, "%.4f", flow);
        }

        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama
        tft.setTextColor(TFT_NAVY, TFT_WHITE);
        tft.setTextPadding(2000);
        tft.drawString(flow_buffer, 223, 60, FONT6);
        tft.setTextPadding(0);


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama

        // if (theme_color == dark_theme) {
        //   tft.setTextColor(TFT_SILVER, TFT_BLACK);
        // } else {
        //   tft.setTextColor(TFT_BLACK, TFT_CREAM);
        // }

        // Alarm durumunu kontrol et ve ekrana bas
        modbus_master.read_or_write(1, READ_HOLDING, 0x0309, &alarm_state);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        // alarm durumunu ekrana bas
        if (screen_switch == main_screen || screen_switch == second_screen) {
          if (alarm_state == 0) {
            if (previous_alarm_state != alarm_state || page_change == true) {
              tft.setTextColor(TFT_NAVY, TFT_WHITE);
              tft.drawString("NORMAL      ", 235, 220, FONT2);
              previous_alarm_state = alarm_state;  // önceki Alarm değerini koru
            }

          } else {  // Alarm yanıp sönme animasyonu için
            alarm_animation = !alarm_animation;

            if (theme_color == dark_theme) {
              if (alarm_animation) {
                tft.setTextColor(TFT_SILVER, TFT_BLACK);
              } else {
                tft.setTextColor(TFT_BLACK, TFT_SILVER);
              }
            } else {
              if (alarm_animation) {
                tft.setTextColor(TFT_WHITE, TFT_NAVY);
              } else {
                tft.setTextColor(TFT_NAVY, TFT_WHITE);
              }
            }

            bool alarm_counter_flag = false;
            while (alarm_counter < 6) {
              if ((alarm_state & (1 << 0)) && alarm_counter == 0) {  // alarm registerının 0. bitini kontrol et
                tft.drawString("ERR - 001", 235, 220, FONT2);        // Empt Pipe Alarm - Boş boru alarmı
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 1)) && alarm_counter == 1) {  // alarm registerının 1. bitini kontrol et
                tft.drawString("ERR - 002", 235, 220, FONT2);               // SYS Alarm (isimlendirilecek)
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 2)) && alarm_counter == 2) {  // alarm registerının 2. bitini kontrol et
                tft.drawString("ERR - 003", 235, 220, FONT2);               // High Flow Alarm - Yüksek akış alarmı
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 3)) && alarm_counter == 3) {  // alarm registerının 3. bitini kontrol et
                tft.drawString("ERR - 004", 235, 220, FONT2);               // Low Flow Alarm - Düşük akış alarmı
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 4)) && alarm_counter == 4) {  // alarm registerının 4. bitini kontrol et
                tft.drawString("ERR - 005", 235, 220, FONT2);               // Excitation Drive Alarm - DRV (isimlendirilecek)
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 5)) && alarm_counter == 5) {  // alarm registerının 5. bitini kontrol et
                tft.drawString("ERR - 006", 235, 220, FONT2);               // Eeprom Alarm (isimlendirilecek)
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if (alarm_counter_flag == false) {
                alarm_counter = -1;
                alarm_counter_flag = true;
              }
              alarm_counter++;
            }

            if (alarm_counter >= 5) alarm_counter = 0;

            previous_alarm_state = alarm_state;  // önceki Alarm değerini koru
          }
          if (theme_color == dark_theme) {
            tft.setTextColor(TFT_WHITE, TFT_BLACK);
          } else {
            tft.setTextColor(TFT_NAVY, TFT_WHITE);
          }
        }

        // Alarm durumuna göre dijital çıkışları organize et
        if (alarm_state & (1 << 0)) {  // alarm registerının 0. bitini kontrol et
          // Empt Pipe Alarm - Boş boru alarmı
          if (D_out_2_alarm_state == 1) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 1) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // Empt Pipe Alarm - Boş boru alarmı
          if (D_out_2_alarm_state == 1) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 1) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (alarm_state & (1 << 1)) {  // alarm registerının 1. bitini kontrol et
          // SYS Alarm (isimlendirilecek)
          if (D_out_2_alarm_state == 2) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 2) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // SYS Alarm (isimlendirilecek)
          if (D_out_2_alarm_state == 2) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 2) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (alarm_state & (1 << 2)) {  // alarm registerının 2. bitini kontrol et
          // High Flow Alarm - Yüksek akış alarmı
          if (D_out_2_alarm_state == 4) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 4) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // High Flow Alarm - Yüksek akış alarmı
          if (D_out_2_alarm_state == 4) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 4) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (alarm_state & (1 << 3)) {  // alarm registerının 3. bitini kontrol et
          // Low Flow Alarm - Düşük akış alarmı
          if (D_out_2_alarm_state == 8) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 8) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // Low Flow Alarm - Düşük akış alarmı
          if (D_out_2_alarm_state == 8) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 8) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (D_out_2_alarm_state == 16) {
          if (flow < 0) {
            digitalWrite(pulse_pin, 1);
          } else {
            digitalWrite(pulse_pin, 0);
          }
        }
        if (D_out_3_alarm_state == 16) {
          if (flow < 0) {
            digitalWrite(relay_pin, 1);
          } else {
            digitalWrite(relay_pin, 0);
          }
        }

        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // TOTAL fark değeri bas
        modbus_master.read_or_write(1, READ_HOLDING, 0x0300, &differantiel);
        delay(time_after_communication);                           // iki modbus komutu arası beklencek min süre
        differantiel_float = (float)differantiel / divider_value;  // Total integer değeri float yap bir basamak kaydır
        total_differential = differantiel_float;
        modbus_slave.write_to_holding_registers(holdingRegisters, total_differential, total_differential_address);

        // TOTAL eksi değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0302, &differantiel);
        delay(time_after_communication);                           // iki modbus komutu arası beklencek min süre
        differantiel_float = (float)differantiel / divider_value;  // Diferansiyel integer değeri float yap bir basamak kaydır
        total_negative = differantiel_float;
        modbus_slave.write_to_holding_registers(holdingRegisters, total_negative, total_negative_address);  // holding registera yaz

        // TOTAL artı değeri bas
        modbus_master.read_or_write(1, READ_HOLDING, 0x0304, &differantiel);
        delay(time_after_communication);                           // iki modbus komutu arası beklencek min süre
        differantiel_float = (float)differantiel / divider_value;  // Diferansiyel integer değeri float yap bir basamak kaydır
        total_positive = differantiel_float;
        modbus_slave.write_to_holding_registers(holdingRegisters, total_positive, total_positive_address);  // holding registera yaz

        tft.setFreeFont(FSS12);
        if (screen_total_choice == 0) {
          tft.fillRect(35, 125, 17, 30, TFT_WHITE);
          tft.drawString("d", 49, 131);
          if (divider_value == 1) {
            sprintf(total_buffer_main_screen, "%.0f", total_differential);
          } else if (divider_value == 10) {
            sprintf(total_buffer_main_screen, "%.1f", total_differential);
          } else if (divider_value == 100) {
            sprintf(total_buffer_main_screen, "%.2f", total_differential);
          } else if (divider_value == 1000) {
            sprintf(total_buffer_main_screen, "%.3f", total_differential);
          }
        } else if (screen_total_choice == 1) {
          tft.fillRect(35, 125, 17, 30, TFT_WHITE);
          tft.drawString("+", 48, 126);
          if (divider_value == 1) {
            sprintf(total_buffer_main_screen, "%.0f", total_positive);
          } else if (divider_value == 10) {
            sprintf(total_buffer_main_screen, "%.1f", total_positive);
          } else if (divider_value == 100) {
            sprintf(total_buffer_main_screen, "%.2f", total_positive);
          } else if (divider_value == 1000) {
            sprintf(total_buffer_main_screen, "%.3f", total_positive);
          }
        } else if (screen_total_choice == 2) {
          tft.fillRect(35, 125, 17, 30, TFT_WHITE);
          tft.drawString("-", 44, 128);
          if (divider_value == 1) {
            sprintf(total_buffer_main_screen, "%.0f", total_negative);
          } else if (divider_value == 10) {
            sprintf(total_buffer_main_screen, "%.1f", total_negative);
          } else if (divider_value == 100) {
            sprintf(total_buffer_main_screen, "%.2f", total_negative);
          } else if (divider_value == 1000) {
            sprintf(total_buffer_main_screen, "%.3f", total_negative);
          }
        }

        tft.setTextPadding(170);
        tft.drawString(total_buffer_main_screen, 223, 128, FONT4);
        tft.setTextPadding(0);
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        // mA değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0317, &mA_out);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        modbus_slave.write_to_holding_registers(holdingRegisters, mA_out, mA_out_address);

        dac_ma_value = mapFloat(mA_out, 4, 21, lower_limit_mA, upper_limit_mA);  // 4 - 20 mA arasını dac için 0 - 255 e uyarla
        MCP.setValue(dac_ma_value);

        // mA değerini bas
        sprintf(ma_buffer, "%.2f", mA_out);

        tft.setFreeFont(FSS9);
        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama
        tft.setTextColor(TFT_WHITE, TFT_BLUEE);
        tft.setTextPadding(100);
        tft.drawString(ma_buffer, 85, 6, FONT4);
        tft.setTextPadding(0);
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Velocity değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x030A, &flow_rate);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        modbus_slave.write_to_holding_registers(holdingRegisters, flow_rate, flow_rate_address);

        sprintf(velocity_buffer, "%.3f", flow_rate);

        // Akış hızı değerini bas
        tft.setFreeFont(FSS9);
        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama
        tft.setTextPadding(100);
        tft.drawString(velocity_buffer, 270, 6, FONT4);
        tft.setTextPadding(0);
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // yüzde değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x030C, &percentage);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        percentage_bar = percentage;
        if (percentage_bar < 0) percentage_bar = percentage_bar * -1;  // eksi ile barı dolduramayacağı için pozitif yapılıyor
        if (percentage_bar > 100) percentage_bar = 100;                // Bar ın taşmaması için limitle

        // Bar ın kırpışmasını azaltmak için anlık akış yüzdesinde değişim yoksa tekrar bastırma
        if (previous_percentage != percentage_bar || page_change == true) {
          bar_graph_new(19, 166, percentage_bar, TFT_NAVY, TFT_CYAN, TFT_DARKGREY);
        }
        previous_percentage = percentage_bar;

        percentage_V = percentage;
        if (percentage_V > 100) percentage_V = 100;  // voltaj çıkışı 0 - 10v arasında olduğu için min max değerler sınırlandırılmıştır
        else if (percentage_V < -100) percentage_V = -100;
        // V değerini akışın yüzdesini baz alarak hesapla ve seçilen biçime göre çıkış ver
        if (analog_out_3_type == v_0_10) {                         // Akım çıkışı 4 - 20 mA seçildiyse
          if (percentage_V < 0) percentage_V = percentage_V * -1;  // Ters yöndeki akışı hesaplamalar için pozitife dönüştür
          if (percentage_V > 100) percentage_V = 100;              // 20.50 mA da sınırlaması için
          V = percentage_V * 10 / 100;
        } else if (analog_out_3_type == v_0_5_10) {  // Akım çıkışı 4 - 12 - 20 mA seçildiyse
          V = (percentage_V * 5 / 100) + 5;
        }

        dac_v_value = mapFloat(V, 0, 10, lower_limit_VDC, upper_limit_VDC);  // 0 - 10 VDC arasını dac için 0 - 255 e uyarla
        // dacWrite(DAC_2_PIN_V, dac_v_value);

        page_change = false;  // sayfa değişimi olmadığını göstermek için
      }

      break;

    case second_screen:

      if (opening_page == true) {
        opening_page = false;
        theme_color = white_theme;
        tft.fillScreen(TFT_WHITE);

        modbus_master.read_or_write(1, READ_HOLDING, 0x0103, &sensor_size_for_screen);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        tft.fillRect(0, 0, 320, 35, TFT_BLUEE);
        tft.fillRect(0, 35, 320, 120, TFT_GRAYY);

        tft.drawLine(20, 92, 300, 92, TFT_BLUE);    // yan çizgi
        tft.drawLine(160, 45, 160, 145, TFT_BLUE);  // dik çizgi

        tft.setTextColor(TFT_WHITE, TFT_BLUEE);
        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama
        tft.drawString(ma_buffer, 85, 6, FONT4);
        tft.drawString(velocity_buffer, 270, 6, FONT4);
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama

        tft.setFreeFont(FSS9);
        tft.drawString("mA", 90, 11);
        tft.drawString("m/s", 275, 11);

        tft.setFreeFont(FSS18);
        tft.setTextColor(TFT_NAVY, TFT_WHITE);
        draw_sigma(18, 175, TFT_NAVY);
        tft.setTextDatum(TR_DATUM);                            // Sağa yaslı hizalama
        tft.drawString(total_buffer_second_screen, 241, 172);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                            // Sağa yaslı hizalama
        tft.drawString("SW : 5.1", 35, 220, FONT2);
        tft.drawString("HW : 4.1", 107, 220, FONT2);
        tft.drawString("MSG :", 195, 220, FONT2);
        tft.drawString("NORMAL", 235, 220, FONT2);
        tft.setFreeFont(FSS12);
        tft.setTextColor(TFT_NAVY, TFT_GRAYY);
        tft.setFreeFont(FSSB12);
        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama
        tft.drawString(flow_buffer, 95, 55);
        tft.setFreeFont(FSS12);
        sprintf(sensor_size_for_screen_buffer, "%d", sensor_size_for_screen);
        tft.drawString(sensor_size_for_screen_buffer, 240, 55);
        if (mtp_value <= 3) {
          tft.drawString("> 5000", 95, 109);  // Sayıyı ekrana yazdır
        } else if (mtp_value > 4000) {
          tft.drawString("< 5", 95, 109);  // Sayıyı ekrana yazdır
        } else {
          tft.drawString(conductivity_value_buffer, 95, 109);  // Sayıyı ekrana yazdır
        }
        tft.drawString(temperature_buffer, 240, 109);
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama
        tft.setFreeFont(FSS9);
        tft.drawString("mm", 250, 60);
        tft.drawString("O", 170, 57);
        tft.drawBitmap(170, 57, slash, 16, 16, TFT_NAVY);
        tft.drawString("uS", 108, 114);
        // tft.drawString("D", 5, 112);
        tft.drawString("C", 255, 114);
        tft.drawBitmap(250, 111, degree, 8, 4, TFT_NAVY);
        tft.drawString("T", 170, 111);


        // Akış birimi oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0104, &flow_unit_value);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        // Flow Unit
        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama
        if (flow_unit_value == 0) {
          tft.drawString("m3/s", 108, 60);
        } else if (flow_unit_value == 1) {
          tft.drawString("m3/m", 108, 60);
        } else if (flow_unit_value == 2) {
          tft.drawString("m3/h", 108, 60);
        } else if (flow_unit_value == 3) {
          tft.drawString("L/s", 108, 60);
        } else if (flow_unit_value == 4) {
          tft.drawString("L/m", 108, 60);
        } else if (flow_unit_value == 5) {
          tft.drawString("L/h", 108, 60);
        } else if (flow_unit_value == 6) {
          tft.drawString("ft3/s", 108, 60);
        } else if (flow_unit_value == 7) {
          tft.drawString("ft3/m", 108, 60);
        } else if (flow_unit_value == 8) {
          tft.drawString("ft3/h", 108, 60);
        } else if (flow_unit_value == 9) {
          tft.drawString("ukgal/s", 108, 60);
        } else if (flow_unit_value == 10) {
          tft.drawString("ukgal/m", 108, 60);
        } else if (flow_unit_value == 11) {
          tft.drawString("ukgal/h", 108, 60);
        } else if (flow_unit_value == 12) {
          tft.drawString("usgal/s", 108, 60);
        } else if (flow_unit_value == 13) {
          tft.drawString("usgal/m", 108, 60);
        } else if (flow_unit_value == 14) {
          tft.drawString("usgal/h", 108, 60);
        } else if (flow_unit_value == 15) {
          tft.drawString("kg/s", 108, 60);
        } else if (flow_unit_value == 16) {
          tft.drawString("kg/m", 108, 60);
        } else if (flow_unit_value == 17) {
          tft.drawString("kg/h", 108, 60);
        } else if (flow_unit_value == 18) {
          tft.drawString("t/s", 108, 60);
        } else if (flow_unit_value == 19) {
          tft.drawString("t/m", 108, 60);
        } else if (flow_unit_value == 20) {
          tft.drawString("t/h", 108, 60);
        } else if (flow_unit_value == 21) {
          tft.drawString("lb/s", 108, 60);
        } else if (flow_unit_value == 22) {
          tft.drawString("lb/m", 108, 60);
        } else if (flow_unit_value == 23) {
          tft.drawString("lb/h", 108, 60);
        }


        // Total unit oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x010F, &total_unit_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre

        // Total Unit
        tft.setFreeFont(FSS12);
        tft.setTextColor(TFT_NAVY, TFT_WHITE);
        if (total_unit_value >= 0 && total_unit_value <= 3) {
          tft.drawString("m3", 258, 180);
        } else if (total_unit_value >= 4 && total_unit_value <= 7) {
          tft.drawString("L", 258, 180);
        } else if (total_unit_value >= 8 && total_unit_value <= 11) {
          tft.drawString("ft3", 258, 180);
        } else if (total_unit_value >= 12 && total_unit_value <= 15) {
          tft.drawString("ukgal", 258, 180);
        } else if (total_unit_value >= 16 && total_unit_value <= 19) {
          tft.drawString("usgal", 258, 180);
        } else if (total_unit_value >= 20 && total_unit_value <= 23) {
          tft.drawString("kg", 258, 180);
        } else if (total_unit_value >= 24 && total_unit_value <= 27) {
          tft.drawString("t", 258, 180);
        } else if (total_unit_value >= 28 && total_unit_value <= 31) {
          tft.drawString("Lb", 258, 180);
        }


        // Anlık akış için noktadan sonra kaç basamak olacağını oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0142, &decpoint);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre



        if (total_unit_value == 3 || total_unit_value == 7 || total_unit_value == 11 || total_unit_value == 15 || total_unit_value == 19 || total_unit_value == 23 || total_unit_value == 27 || total_unit_value == 31) divider_value = 1;
        else if (total_unit_value == 2 || total_unit_value == 6 || total_unit_value == 10 || total_unit_value == 14 || total_unit_value == 18 || total_unit_value == 22 || total_unit_value == 26 || total_unit_value == 30) divider_value = 10;
        else if (total_unit_value == 1 || total_unit_value == 5 || total_unit_value == 9 || total_unit_value == 13 || total_unit_value == 17 || total_unit_value == 21 || total_unit_value == 25 || total_unit_value == 29) divider_value = 100;
        else if (total_unit_value == 0 || total_unit_value == 4 || total_unit_value == 8 || total_unit_value == 12 || total_unit_value == 16 || total_unit_value == 20 || total_unit_value == 24 || total_unit_value == 28) divider_value = 1000;
      }

      if (button_state == press_up) {
        button_state = idle;
        opening_page = true;

        screen_switch = main_screen;

        break;

      } else if (button_state == press_down) {
        button_state = idle;
        opening_page = true;

        screen_switch = main_screen;

        break;

      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;
        if (password_validity_time > 120) screen_switch = password_screen;  // password geçerlilik süresi devam etmiyorsa şifre ekranına git
        else {
          screen_switch = settings;  // password geçerlilik süresi devam ediyorsa şifre ekranını atla
        }
      } else if (button_state == press_esc) {
        button_state = idle;

        screen_total_choice++;

        if (screen_total_choice >= 3) screen_total_choice = 0;
        EEPROM.writeUShort(screen_total_choice_address, screen_total_choice);
        EEPROM.commit();  // kaydet
      }

      // Belirlenen sürede girecek
      if (time_for_main_sreens >= screen_refresh_time_value) {
        time_for_main_sreens = 0;  // saniye sıfırla

        static uint8_t previous_percentage;               // anlık akış yüzdesi
        uint8_t number_of_digit = 0;                      // ekrana yazılacak bamasak sayısı
        static uint8_t previous_flow_digits;              // ekrana yazılacak bamasak sayısı
        uint16_t pos_flow = 215, pos_differantiel = 250;  // Anlık akış değeri başlangıç x koordinatı
        uint8_t character_counter = 0;                    // bamasak hesaplama sayıcısı
        static int32_t differantiel = 0;                  // total ileri akış - total geri akış ham değer
        float differantiel_float = 0;
        static uint8_t previous_differantiel_digits_p, previous_differantiel_digits_n, previous_differantiel_digits_d;  // ekrana yazılacak bamasak sayısı
        char number_buffer[15];                                                                                         // ekrana numara yazmak için buffer

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        tft.setFreeFont(FSSB12);
        tft.setTextDatum(TR_DATUM);
        tft.setTextColor(TFT_NAVY, TFT_GRAYY);

        // Anlık akış değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0307, &flow);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        modbus_slave.write_to_holding_registers(holdingRegisters, flow, flow_address);

        // Anlık akış değerine göre ekranda nokta kaydır
        if (decpoint == 1) {
          if (flow < 10 && flow > -10) decpoint = 1;
          else if (flow < 100 && flow > -100) decpoint = 1;
          else if (flow < 1000 && flow > -1000) decpoint = 1;
          else if (flow < 10000 && flow > -10000) decpoint = 1;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        } else if (decpoint == 2) {
          if (flow < 10 && flow > -10) decpoint = 2;
          else if (flow < 100 && flow > -100) decpoint = 2;
          else if (flow < 1000 && flow > -1000) decpoint = 2;
          else if (flow < 10000 && flow > -10000) decpoint = 2;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        } else if (decpoint == 3) {
          if (flow < 10 && flow > -10) decpoint = 3;
          else if (flow < 100 && flow > -100) decpoint = 3;
          else if (flow < 1000 && flow > -1000) decpoint = 3;
          else if (flow < 10000 && flow > -10000) decpoint = 2;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        } else if (decpoint == 4) {
          if (flow < 10 && flow > -10) decpoint = 4;
          else if (flow < 100 && flow > -100) decpoint = 4;
          else if (flow < 1000 && flow > -1000) decpoint = 3;
          else if (flow < 10000 && flow > -10000) decpoint = 2;
          else if (flow < 100000 && flow > -100000) decpoint = 1;
          else if (flow < 1000000 && flow > -1000000) decpoint = 0;
        }

        if (decpoint == 0) {
          sprintf(flow_buffer, "%.0f", flow);
        } else if (decpoint == 1) {
          sprintf(flow_buffer, "%.1f", flow);
        } else if (decpoint == 2) {
          sprintf(flow_buffer, "%.2f", flow);
        } else if (decpoint == 3) {
          sprintf(flow_buffer, "%.3f", flow);
        } else if (decpoint == 4) {
          sprintf(flow_buffer, "%.4f", flow);
        }

        tft.setTextPadding(100);
        tft.drawString(flow_buffer, 95, 55);  // Sayıyı ekrana yazdır
        tft.setTextPadding(0);

        tft.setFreeFont(FSS12);

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        tft.setTextDatum(TL_DATUM);  // Sağa yaslı hizalama

        // if (theme_color == dark_theme) {
        //   tft.setTextColor(TFT_SILVER, TFT_BLACK);
        // } else {
        //   tft.setTextColor(TFT_BLACK, TFT_CREAM);
        // }

        // Alarm durumunu kontrol et ve ekrana bas
        modbus_master.read_or_write(1, READ_HOLDING, 0x0309, &alarm_state);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        // alarm durumunu ekrana bas
        if (screen_switch == main_screen || screen_switch == second_screen) {
          if (alarm_state == 0) {
            if (previous_alarm_state != alarm_state || page_change == true) {
              tft.setTextColor(TFT_NAVY, TFT_WHITE);
              tft.drawString("NORMAL      ", 235, 220, FONT2);
              previous_alarm_state = alarm_state;  // önceki Alarm değerini koru
            }

          } else {  // Alarm yanıp sönme animasyonu için
            alarm_animation = !alarm_animation;

            if (theme_color == dark_theme) {
              if (alarm_animation) {
                tft.setTextColor(TFT_SILVER, TFT_BLACK);
              } else {
                tft.setTextColor(TFT_BLACK, TFT_SILVER);
              }
            } else {
              if (alarm_animation) {
                tft.setTextColor(TFT_WHITE, TFT_NAVY);
              } else {
                tft.setTextColor(TFT_NAVY, TFT_WHITE);
              }
            }

            bool alarm_counter_flag = false;
            while (alarm_counter < 6) {
              if ((alarm_state & (1 << 0)) && alarm_counter == 0) {  // alarm registerının 0. bitini kontrol et
                tft.drawString("ERR - 001", 235, 220, FONT2);        // Empt Pipe Alarm - Boş boru alarmı
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 1)) && alarm_counter == 1) {  // alarm registerının 1. bitini kontrol et
                tft.drawString("ERR - 002", 235, 220, FONT2);               // SYS Alarm (isimlendirilecek)
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 2)) && alarm_counter == 2) {  // alarm registerının 2. bitini kontrol et
                tft.drawString("ERR - 003", 235, 220, FONT2);               // High Flow Alarm - Yüksek akış alarmı
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 3)) && alarm_counter == 3) {  // alarm registerının 3. bitini kontrol et
                tft.drawString("ERR - 004", 235, 220, FONT2);               // Low Flow Alarm - Düşük akış alarmı
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 4)) && alarm_counter == 4) {  // alarm registerının 4. bitini kontrol et
                tft.drawString("ERR - 005", 235, 220, FONT2);               // Excitation Drive Alarm - DRV (isimlendirilecek)
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if ((alarm_state & (1 << 5)) && alarm_counter == 5) {  // alarm registerının 5. bitini kontrol et
                tft.drawString("ERR - 006", 235, 220, FONT2);               // Eeprom Alarm (isimlendirilecek)
                alarm_counter++;
                alarm_counter_flag = true;
                break;
              } else if (alarm_counter_flag == false) {
                alarm_counter = -1;
                alarm_counter_flag = true;
              }
              alarm_counter++;
            }

            if (alarm_counter >= 5) alarm_counter = 0;

            previous_alarm_state = alarm_state;  // önceki Alarm değerini koru
          }
          if (theme_color == dark_theme) {
            tft.setTextColor(TFT_WHITE, TFT_BLACK);
          } else {
            tft.setTextColor(TFT_NAVY, TFT_WHITE);
          }
        }

        // Alarm durumuna göre dijital çıkışları organize et
        if (alarm_state & (1 << 0)) {  // alarm registerının 0. bitini kontrol et
          // Empt Pipe Alarm - Boş boru alarmı
          if (D_out_2_alarm_state == 1) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 1) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // Empt Pipe Alarm - Boş boru alarmı
          if (D_out_2_alarm_state == 1) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 1) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (alarm_state & (1 << 1)) {  // alarm registerının 1. bitini kontrol et
          // SYS Alarm (isimlendirilecek)
          if (D_out_2_alarm_state == 2) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 2) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // SYS Alarm (isimlendirilecek)
          if (D_out_2_alarm_state == 2) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 2) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (alarm_state & (1 << 2)) {  // alarm registerının 2. bitini kontrol et
          // High Flow Alarm - Yüksek akış alarmı
          if (D_out_2_alarm_state == 4) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 4) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // High Flow Alarm - Yüksek akış alarmı
          if (D_out_2_alarm_state == 4) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 4) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (alarm_state & (1 << 3)) {  // alarm registerının 3. bitini kontrol et
          // Low Flow Alarm - Düşük akış alarmı
          if (D_out_2_alarm_state == 8) {
            digitalWrite(pulse_pin, 1);
          }
          if (D_out_3_alarm_state == 8) {
            digitalWrite(relay_pin, 1);
          }
        } else {
          // Low Flow Alarm - Düşük akış alarmı
          if (D_out_2_alarm_state == 8) {
            digitalWrite(pulse_pin, 0);
          }
          if (D_out_3_alarm_state == 8) {
            digitalWrite(relay_pin, 0);
          }
        }
        if (D_out_2_alarm_state == 16) {
          if (flow < 0) {
            digitalWrite(pulse_pin, 1);
          } else {
            digitalWrite(pulse_pin, 0);
          }
        }
        if (D_out_3_alarm_state == 16) {
          if (flow < 0) {
            digitalWrite(relay_pin, 1);
          } else {
            digitalWrite(relay_pin, 0);
          }
        }

        tft.setTextDatum(TR_DATUM);  // Sağa yaslı hizalama

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        tft.setTextColor(TFT_NAVY, TFT_GRAYY);
        // İletkenlik değeri bas
        if (conductivity_temperature_second >= 3) {

          modbus_master.read_or_write(1, READ_HOLDING, 0x030E, &mtp_value);
          delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

          float conductivity_value = interpolateMTPToUS(mtp_value);

          conductivity_value = conductivity_value * conductivity_k_factor_value;  // düzeltme katsayısı ile düzelt


          tft.setTextPadding(71);
          if (mtp_value <= 3) {
            tft.drawString("> 5000", 95, 109);  // Sayıyı ekrana yazdır
          } else if (mtp_value > 4000) {
            tft.drawString("< 5", 95, 109);  // Sayıyı ekrana yazdır
          } else {
            sprintf(conductivity_value_buffer, "%.0f", conductivity_value);
            tft.drawString(conductivity_value_buffer, 95, 109);  // Sayıyı ekrana yazdır
          }
          tft.setTextPadding(0);
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Temperature değerini bas
        if (conductivity_temperature_second >= 3) {
          conductivity_temperature_second = 0;

          temperature = read_temperature();

          if (temperature != -50) {
            sprintf(temperature_buffer, "%.1f", temperature);
          } else {
            strcpy(temperature_buffer, "NO");
          }

          sprintf(temperature_buffer, "%.1f", temperature);

          tft.setTextPadding(50);
          tft.drawString(temperature_buffer, 240, 109);
          tft.setTextPadding(0);
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // TOTAL fark değeri bas
        modbus_master.read_or_write(1, READ_HOLDING, 0x0300, &differantiel);
        delay(time_after_communication);                           // iki modbus komutu arası beklencek min süre
        differantiel_float = (float)differantiel / divider_value;  // Total integer değeri float yap bir basamak kaydır
        total_differential = differantiel_float;
        modbus_slave.write_to_holding_registers(holdingRegisters, total_differential, total_differential_address);

        // TOTAL eksi değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0302, &differantiel);
        delay(time_after_communication);                           // iki modbus komutu arası beklencek min süre
        differantiel_float = (float)differantiel / divider_value;  // Diferansiyel integer değeri float yap bir basamak kaydır
        total_negative = differantiel_float;
        modbus_slave.write_to_holding_registers(holdingRegisters, total_negative, total_negative_address);  // holding registera yaz

        // TOTAL artı değeri bas
        modbus_master.read_or_write(1, READ_HOLDING, 0x0304, &differantiel);
        delay(time_after_communication);                           // iki modbus komutu arası beklencek min süre
        differantiel_float = (float)differantiel / divider_value;  // Diferansiyel integer değeri float yap bir basamak kaydır
        total_positive = differantiel_float;
        modbus_slave.write_to_holding_registers(holdingRegisters, total_positive, total_positive_address);  // holding registera yaz

        tft.setFreeFont(FSS12);
        tft.setTextColor(TFT_NAVY, TFT_WHITE);
        if (screen_total_choice == 0) {
          tft.fillRect(35, 172, 17, 30, TFT_WHITE);
          tft.drawString("d", 49, 178);
          if (divider_value == 1) {
            sprintf(total_buffer_second_screen, "%.0f", total_differential);
          } else if (divider_value == 10) {
            sprintf(total_buffer_second_screen, "%.1f", total_differential);
          } else if (divider_value == 100) {
            sprintf(total_buffer_second_screen, "%.2f", total_differential);
          } else if (divider_value == 1000) {
            sprintf(total_buffer_second_screen, "%.3f", total_differential);
          }
        } else if (screen_total_choice == 1) {
          tft.fillRect(35, 172, 17, 30, TFT_WHITE);
          tft.drawString("+", 48, 173);
          if (divider_value == 1) {
            sprintf(total_buffer_second_screen, "%.0f", total_positive);
          } else if (divider_value == 10) {
            sprintf(total_buffer_second_screen, "%.1f", total_positive);
          } else if (divider_value == 100) {
            sprintf(total_buffer_second_screen, "%.2f", total_positive);
          } else if (divider_value == 1000) {
            sprintf(total_buffer_second_screen, "%.3f", total_positive);
          }
        } else if (screen_total_choice == 2) {
          tft.fillRect(35, 172, 17, 30, TFT_WHITE);
          tft.drawString("-", 44, 175);
          if (divider_value == 1) {
            sprintf(total_buffer_second_screen, "%.0f", total_negative);
          } else if (divider_value == 10) {
            sprintf(total_buffer_second_screen, "%.1f", total_negative);
          } else if (divider_value == 100) {
            sprintf(total_buffer_second_screen, "%.2f", total_negative);
          } else if (divider_value == 1000) {
            sprintf(total_buffer_second_screen, "%.3f", total_negative);
          }
        }

        tft.setFreeFont(FSS18);
        tft.setTextPadding(185);
        tft.drawString(total_buffer_second_screen, 241, 172);
        tft.setTextPadding(0);

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // yüzde değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x030C, &percentage);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        percentage_bar = percentage;

        if (percentage_bar < 0) percentage_bar = percentage_bar * -1;  // eksi ile barı dolduramayacağı için pozitif yapılıyor

        if (percentage_bar > 100) percentage_bar = 100;  // Bar ın taşmaması için limitle

        percentage_V = percentage;
        if (percentage_V > 100) percentage_V = 100;  // voltaj çıkışı 0 - 10v arasında olduğu için min max değerler sınırlandırılmıştır
        else if (percentage_V < -100) percentage_V = -100;
        // V değerini akışın yüzdesini baz alarak hesapla ve seçilen biçime göre çıkış ver
        if (analog_out_3_type == v_0_10) {                         // Akım çıkışı 4 - 20 mA seçildiyse
          if (percentage_V < 0) percentage_V = percentage_V * -1;  // Ters yöndeki akışı hesaplamalar için pozitife dönüştür
          if (percentage_V > 100) percentage_V = 100;              // 20.50 mA da sınırlaması için
          V = percentage_V * 10 / 100;
        } else if (analog_out_3_type == v_0_5_10) {  // Akım çıkışı 4 - 12 - 20 mA seçildiyse
          V = (percentage_V * 5 / 100) + 5;
        }

        dac_v_value = mapFloat(V, 0, 10, lower_limit_VDC, upper_limit_VDC);  // 0 - 10 VDC arasını dac için 0 - 255 e uyarla
        // dacWrite(DAC_2_PIN_V, dac_v_value);

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // mA değerini oku, slave olarak registerda göstermesi için
        tft.setTextColor(TFT_WHITE, TFT_BLUEE);

        modbus_master.read_or_write(1, READ_HOLDING, 0x0317, &mA_out);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        modbus_slave.write_to_holding_registers(holdingRegisters, mA_out, mA_out_address);

        dac_ma_value = mapFloat(mA_out, 4, 21, lower_limit_mA, upper_limit_mA);  // 4 - 20 mA arasını dac için 0 - 255 e uyarla
        MCP.setValue(dac_ma_value);

        sprintf(ma_buffer, "%.2f", mA_out);
        tft.setTextPadding(100);
        tft.drawString(ma_buffer, 85, 6, FONT4);
        tft.setTextPadding(0);

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // Velocity değerini oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x030A, &flow_rate);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        modbus_slave.write_to_holding_registers(holdingRegisters, flow_rate, flow_rate_address);

        sprintf(velocity_buffer, "%.3f", flow_rate);
        tft.setTextPadding(100);
        tft.drawString(velocity_buffer, 270, 6, FONT4);
        tft.setTextPadding(0);

        tft.setTextDatum(TL_DATUM);

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        page_change = false;  // sayfa değişimi olmadığını belirtmek için
      }

      break;

    case password_screen:

      if (opening_page == true) {
        opening_page = false;

        tft.fillScreen(TFT_BLACK);

        tft.setTextColor(TFT_ORANGE, TFT_BLACK);
        tft.setFreeFont(FSS18);
        if (language == English) {
          tft.drawString(english[0], 81, 40);  // Password
          tft.setFreeFont(FSS9);
          tft.drawString(english[1], 69, 190);  // Please Enter Password
        } else if (language == Turkish) {
          tft.drawString(turkish[0], 125, 40);  // Sifre
          tft.setFreeFont(FSS9);
          tft.drawString(turkish[1], 100, 190);  // Lutfen Sifre girin
        }

        tft.drawWideLine(270, 95, 50, 95, 3, TFT_SILVER, TFT_SILVER);  // çizgi

        tft.pushImage(70, 120, 40, 40, locckk);  // kilit ikonu

        draw_char(0, 115, 121, TFT_BLACK, TFT_WHITE);
        draw_char(0, 148, 121, TFT_WHITE, TFT_BLACK);
        draw_char(0, 181, 121, TFT_WHITE, TFT_BLACK);
        draw_char(0, 214, 121, TFT_WHITE, TFT_BLACK);

        digit = 0;

        memset(number, 0, sizeof(number));
      }

      // Şifre ekranında işlem yapılmadıysa 30 Sn sonra ana ekrana dön
      if (second_for_menu > 30) {
        second_for_menu = 0;  // saniye sıfırla
        screen_switch = main_screen;
        opening_page = true;
      }

      if (button_state == press_up) {
        button_state = idle;
        if (digit == 0) {
          number[0]++;
          if (number[0] > 9) number[0] = 0;
          draw_char(number[0], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 1) {
          number[1]++;
          if (number[1] > 9) number[1] = 0;
          draw_char(number[1], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 2) {
          number[2]++;
          if (number[2] > 9) number[2] = 0;
          draw_char(number[2], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 3) {
          number[3]++;
          if (number[3] > 9) number[3] = 0;
          draw_char(number[3], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        }


      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
        if (digit > 3) digit = 0;

        if (digit == 0) {
          draw_char(number[3], 115 + 3 * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[0], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 1) {
          draw_char(number[0], 115 + (digit - 1) * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[1], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 2) {
          draw_char(number[1], 115 + (digit - 1) * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[2], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 3) {
          draw_char(number[2], 115 + (digit - 1) * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[3], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        }



      } else if (button_state == press_enter) {
        button_state = idle;
        cursor = 6;           // menu ekranında kursor basic_settings den başlayacak
        previous_cursor = 6;  // menu ekranında kursor basic_settings den başlayacak

        uint16_t password = number[0] * 1000 + number[1] * 100 + number[2] * 10 + number[3];  // girilen şifreyi password değişkenine ata
        if (main_password == password || master_password == password) {
          tft.setFreeFont(FSS18);
          tft.setTextColor(TFT_DARKGREEN, TFT_BLACK);
          tft.fillRect(20, 190, 300, 20, TFT_BLACK);
          if (language == English) {
            tft.drawString(english[0], 81, 40);  // password
            tft.setFreeFont(FSSB9);
            tft.drawString(english[2], 130, 190);  // done

          } else if (language == Turkish) {
            tft.drawString(turkish[0], 125, 40);  // Sifre
            tft.setFreeFont(FSSB9);
            tft.drawString(turkish[2], 115, 190);  // onaylandı
          }
          tft.setFreeFont(FSS18);
          delay(1500);
          screen_switch = settings;
          opening_page = true;
          password_validity_time = 0;  // şifrenin 2 dk geçerlilik süresi başladı
        } else {

          tft.fillRect(80, 190, 200, 20, TFT_BLACK);
          tft.setTextColor(TFT_RED, TFT_BLACK);
          tft.setFreeFont(FSS9);
          if (language == English) {
            tft.drawString(english[3], 45, 190);  // Wrong Password !  Try Again
            tft.setFreeFont(FSS18);
            tft.drawString(english[0], 81, 40);  // Password
            delay(1500);
            tft.setTextColor(TFT_ORANGE, TFT_BLACK);
            tft.drawString(english[0], 81, 40);  // Password
          } else if (language == Turkish) {
            tft.drawString(turkish[3], 45, 190);  // Şifre yanlış Tekrar deneyin
            tft.setFreeFont(FSS18);
            tft.drawString(turkish[0], 125, 40);  // Sifre
            delay(1500);
            tft.setTextColor(TFT_ORANGE, TFT_BLACK);
            tft.drawString(turkish[0], 125, 40);  // Sifre
          }
        }



      } else if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = main_screen;
      }
      break;

    case settings:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = main_screen;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
         button_state = idle;
         cursor++;        
      }

      bar_select(icons_main, 75, left_aligned, 4, 5, 6, 7, 8, 9, 10, basic_settings, information);

      break;

    case basic_settings:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = settings;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(basic_settings_icon, 4, 75, left_aligned, 154, 15, 16, 17, quick_setup, sensor_size);

      break;

    case languages:

      if (opening_page == true) {
        opening_page = false;
        tft.fillScreen(0xc658);
        centered_language_bar(high_light);

        if (cursor == english_language) {
          turkish_bar(high_light);
          english_bar(low_light);
        } else if (cursor == turkish_language) {
          english_bar(high_light);
          turkish_bar(low_light);
        }

        // Dili seç
        uint16_t language_state = 0;
        verification = modbus_master.read_or_write(1, READ_HOLDING, 0x0100, &language_state);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre
        if (verification == 0) language = language_state;

        // seçilen dilin yeşil tik ini çiz
        if (language == English) {
          draw_tick(105, 50, TFT_DARKGREEN);
        } else {
          draw_tick(105, 83, TFT_DARKGREEN);
        }
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = basic_settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;

        //  tik işaretini sil
        if (language == English) {
          draw_tick(105, 50, TFT_WHITE);
        } else {
          draw_tick(105, 83, TFT_WHITE);
        }

        // imleç ile seçili dili register a yaz
        if (cursor == english_language) language_state = English;
        else language_state = Turkish;

        verification = modbus_master.read_or_write(1, WRITE_MULTI, 0x0100, &language_state);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        // yazma doğrulandıysa dili değiştir
        if (verification == 0) {
          if (language_state == English) language = English;
          else language = Turkish;
        }

        // seçilen dilin yeşil tik ini çiz
        if (language == English) {
          draw_tick(105, 50, TFT_DARKGREEN);
        } else {
          draw_tick(105, 83, TFT_DARKGREEN);
        }
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > turkish_language) cursor = english_language;  // kursoru baştaysa sona döndür
      if (cursor < english_language) cursor = turkish_language;  // kursoru sondaysa başa döndür


      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == english_language) {
          turkish_bar(high_light);
          english_bar(low_light);
        } else if (cursor == turkish_language) {
          english_bar(high_light);
          turkish_bar(low_light);
        }
        previous_cursor = cursor;

        if (language == English) {
          draw_tick(105, 50, TFT_DARKGREEN);
        } else {
          draw_tick(105, 83, TFT_DARKGREEN);
        }
      }

      break;

    case flow_parameters:

      if (opening_page == true) {
        opening_page = false;
        cursor = _units;
        tft.fillScreen(0xc658);
        flow_range_bar(high_light);
        decimal_point_bar(high_light);
        response_time_bar(high_light);
        flow_cut_off_bar(high_light);
        flow_direction_bar(high_light);
        centered_flow_parameters_bar(high_light);
        units_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = basic_settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        if (cursor == _units) cursor = m3_s;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > flow_direction) cursor = _units;  // kursoru baştaysa sona döndür
      if (cursor < _units) cursor = flow_direction;  // kursoru sondaysa başa döndür


      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == _units) {
          if (previous_cursor == flow_direction) {
            flow_direction_bar(high_light);
          } else if (previous_cursor == flow_range) {
            flow_range_bar(high_light);
          }
          units_bar(low_light);
        } else if (cursor == flow_range) {
          if (previous_cursor == _units) {
            units_bar(high_light);
          } else if (previous_cursor == decimal_point) {
            decimal_point_bar(high_light);
          }
          flow_range_bar(low_light);
        } else if (cursor == decimal_point) {
          if (previous_cursor == flow_range) {
            flow_range_bar(high_light);
          } else if (previous_cursor == response_time) {
            response_time_bar(high_light);
          }
          decimal_point_bar(low_light);
        } else if (cursor == response_time) {
          if (previous_cursor == decimal_point) {
            decimal_point_bar(high_light);
          } else if (previous_cursor == flow_cut_off) {
            flow_cut_off_bar(high_light);
          }
          response_time_bar(low_light);
        } else if (cursor == flow_cut_off) {
          if (previous_cursor == response_time) {
            response_time_bar(high_light);
          } else if (previous_cursor == flow_direction) {
            flow_direction_bar(high_light);
          }
          flow_cut_off_bar(low_light);
        } else if (cursor == flow_direction) {
          if (previous_cursor == flow_cut_off) {
            flow_cut_off_bar(high_light);
          } else if (previous_cursor == _units) {
            units_bar(high_light);
          }
          flow_direction_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case _units:

      if (opening_page == true) {
        opening_page = false;
        cursor = flow_unit;
        tft.fillScreen(0xc658);
        total_unit_bar(high_light);
        centered_units_bar(high_light);
        flow_unit_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = flow_parameters;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > total_unit) cursor = flow_unit;  // kursoru baştaysa sona döndür
      if (cursor < flow_unit) cursor = total_unit;  // kursoru sondaysa başa döndür


      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == flow_unit) {
          total_unit_bar(high_light);
          flow_unit_bar(low_light);
        } else if (cursor == total_unit) {
          flow_unit_bar(high_light);
          total_unit_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case flow_unit:

      if (previous_cursor == flow_unit) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x0104, &flow_unit_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                         // iki modbus haberleşmesi arası beklenecek min süre

        covert_flow_unit_value();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = _units;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_flow_unit();

        if (cursor == m3_s) flow_unit_value = 0;           // birimi sabit tutan register
        else if (cursor == m3_m) flow_unit_value = 1;      // birimi sabit tutan register
        else if (cursor == m3_h) flow_unit_value = 2;      // birimi sabit tutan register
        else if (cursor == L_s) flow_unit_value = 3;       // birimi sabit tutan register
        else if (cursor == L_m) flow_unit_value = 4;       // birimi sabit tutan register
        else if (cursor == L_h) flow_unit_value = 5;       // birimi sabit tutan register
        else if (cursor == ft3_s) flow_unit_value = 6;     // birimi sabit tutan register
        else if (cursor == ft3_m) flow_unit_value = 7;     // birimi sabit tutan register
        else if (cursor == ft3_h) flow_unit_value = 8;     // birimi sabit tutan register
        else if (cursor == ukgal_s) flow_unit_value = 9;   // birimi sabit tutan register
        else if (cursor == ukgal_m) flow_unit_value = 10;  // birimi sabit tutan register
        else if (cursor == ukgal_h) flow_unit_value = 11;  // birimi sabit tutan register
        else if (cursor == usgal_s) flow_unit_value = 12;  // birimi sabit tutan register
        else if (cursor == usgal_m) flow_unit_value = 13;  // birimi sabit tutan register
        else if (cursor == usgal_h) flow_unit_value = 14;  // birimi sabit tutan register
        else if (cursor == kg_s) flow_unit_value = 15;     // birimi sabit tutan register
        else if (cursor == kg_m) flow_unit_value = 16;     // birimi sabit tutan register
        else if (cursor == kg_h) flow_unit_value = 17;     // birimi sabit tutan register
        else if (cursor == t_s) flow_unit_value = 18;      // birimi sabit tutan register
        else if (cursor == t_m) flow_unit_value = 19;      // birimi sabit tutan register
        else if (cursor == t_h) flow_unit_value = 20;      // birimi sabit tutan register
        else if (cursor == Lb_s) flow_unit_value = 21;     // birimi sabit tutan register
        else if (cursor == Lb_m) flow_unit_value = 22;     // birimi sabit tutan register
        else if (cursor == Lb_h) flow_unit_value = 23;     // birimi sabit tutan register

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0104, &flow_unit_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                        // iki modbus haberleşmesi arası beklenecek min süre

        covert_flow_unit_value();

        write_tick_for_flow_unit();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor < m3_s) {
        previous_cursor = m3_s;
        cursor = Lb_h;  // kursoru sondaysa başa döndür
        opening_page = true;
      }
      if (cursor > Lb_h) {
        previous_cursor = Lb_h;
        cursor = m3_s;  // kursoru baştaysa sona döndür
        opening_page = true;
      }

      if (cursor == m3_s && previous_cursor == Lb_h) opening_page = true;
      else if (cursor == Lb_h && previous_cursor == m3_s) opening_page = true;
      else if (cursor == kg_s && previous_cursor == L_h) opening_page = true;
      else if (cursor == L_h && previous_cursor == kg_s) opening_page = true;
      else if (cursor == ft3_s && previous_cursor == t_h) opening_page = true;
      else if (cursor == t_h && previous_cursor == ft3_s) opening_page = true;
      else if (cursor == usgal_s && previous_cursor == ukgal_h) opening_page = true;
      else if (cursor == ukgal_h && previous_cursor == usgal_s) opening_page = true;

      if (cursor >= m3_s && cursor <= L_h) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          m3_m_bar(high_light);
          m3_h_bar(high_light);
          L_s_bar(high_light);
          L_m_bar(high_light);
          L_h_bar(high_light);
          m3_s_bar(high_light);
          centered_flow_unit_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("1/4", 210, 13);
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == m3_s) {
            if (previous_cursor == L_h) {
              L_h_bar(high_light);
            } else if (previous_cursor == m3_m) {
              m3_m_bar(high_light);
            }
            m3_s_bar(low_light);
          } else if (cursor == m3_m) {
            if (previous_cursor == m3_s) {
              m3_s_bar(high_light);
            } else if (previous_cursor == m3_h) {
              m3_h_bar(high_light);
            }
            m3_m_bar(low_light);
          } else if (cursor == m3_h) {
            if (previous_cursor == m3_m) {
              m3_m_bar(high_light);
            } else if (previous_cursor == L_s) {
              L_s_bar(high_light);
            }
            m3_h_bar(low_light);
          } else if (cursor == L_s) {
            if (previous_cursor == m3_h) {
              m3_h_bar(high_light);
            } else if (previous_cursor == L_m) {
              L_m_bar(high_light);
            }
            L_s_bar(low_light);
          } else if (cursor == L_m) {
            if (previous_cursor == L_s) {
              L_s_bar(high_light);
            } else if (previous_cursor == L_h) {
              L_h_bar(high_light);
            }
            L_m_bar(low_light);
          } else if (cursor == L_h) {
            if (previous_cursor == L_m) {
              L_m_bar(high_light);
            } else if (previous_cursor == m3_s) {
              m3_s_bar(high_light);
            }
            L_h_bar(low_light);
          }
          previous_cursor = cursor;
          if (flow_unit_value >= m3_s && flow_unit_value <= L_h) write_tick_for_flow_unit();
        }
      } else if (cursor >= kg_s && cursor <= t_h) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          kg_s_bar(high_light);
          kg_m_bar(high_light);
          kg_h_bar(high_light);
          t_s_bar(high_light);
          t_m_bar(high_light);
          centered_flow_unit_bar(high_light);
          t_h_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("2/4", 210, 13);
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == kg_s) {
            if (previous_cursor == t_h) {
              t_h_bar(high_light);
            } else if (previous_cursor == kg_m) {
              kg_m_bar(high_light);
            }
            kg_s_bar(low_light);
          } else if (cursor == kg_m) {
            if (previous_cursor == kg_s) {
              kg_s_bar(high_light);
            } else if (previous_cursor == kg_h) {
              kg_h_bar(high_light);
            }
            kg_m_bar(low_light);
          } else if (cursor == kg_h) {
            if (previous_cursor == kg_m) {
              kg_m_bar(high_light);
            } else if (previous_cursor == t_s) {
              t_s_bar(high_light);
            }
            kg_h_bar(low_light);
          } else if (cursor == t_s) {
            if (previous_cursor == kg_h) {
              kg_h_bar(high_light);
            } else if (previous_cursor == t_m) {
              t_m_bar(high_light);
            }
            t_s_bar(low_light);
          } else if (cursor == t_m) {
            if (previous_cursor == t_s) {
              t_s_bar(high_light);
            } else if (previous_cursor == t_h) {
              t_h_bar(high_light);
            }
            t_m_bar(low_light);
          } else if (cursor == t_h) {
            if (previous_cursor == t_m) {
              t_m_bar(high_light);
            } else if (previous_cursor == kg_s) {
              kg_s_bar(high_light);
            }
            t_h_bar(low_light);
          }
          previous_cursor = cursor;
          if (flow_unit_value >= kg_s && flow_unit_value <= t_h) write_tick_for_flow_unit();
        }
      } else if (cursor >= ft3_s && cursor <= ukgal_h) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          ft3_s_bar(high_light);
          ft3_m_bar(high_light);
          ft3_h_bar(high_light);
          ukgal_s_bar(high_light);
          ukgal_m_bar(high_light);
          centered_flow_unit_bar(high_light);
          ukgal_h_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("3/4", 210, 13);
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == ft3_s) {
            if (previous_cursor == ukgal_h) {
              ukgal_h_bar(high_light);
            } else if (previous_cursor == ft3_m) {
              ft3_m_bar(high_light);
            }
            ft3_s_bar(low_light);
          } else if (cursor == ft3_m) {
            if (previous_cursor == ft3_s) {
              ft3_s_bar(high_light);
            } else if (previous_cursor == ft3_h) {
              ft3_h_bar(high_light);
            }
            ft3_m_bar(low_light);
          } else if (cursor == ft3_h) {
            if (previous_cursor == ft3_m) {
              ft3_m_bar(high_light);
            } else if (previous_cursor == ukgal_s) {
              ukgal_s_bar(high_light);
            }
            ft3_h_bar(low_light);
          } else if (cursor == ukgal_s) {
            if (previous_cursor == ft3_h) {
              ft3_h_bar(high_light);
            } else if (previous_cursor == ukgal_m) {
              ukgal_m_bar(high_light);
            }
            ukgal_s_bar(low_light);
          } else if (cursor == ukgal_m) {
            if (previous_cursor == ukgal_s) {
              ukgal_s_bar(high_light);
            } else if (previous_cursor == ukgal_h) {
              ukgal_h_bar(high_light);
            }
            ukgal_m_bar(low_light);
          } else if (cursor == ukgal_h) {
            if (previous_cursor == ukgal_m) {
              ukgal_m_bar(high_light);
            } else if (previous_cursor == ft3_s) {
              ft3_s_bar(high_light);
            }
            ukgal_h_bar(low_light);
          }
          previous_cursor = cursor;
          if (flow_unit_value >= ft3_s && flow_unit_value <= ukgal_h) write_tick_for_flow_unit();
        }
      } else if (cursor >= usgal_s && cursor <= Lb_h) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          usgal_s_bar(high_light);
          usgal_m_bar(high_light);
          usgal_h_bar(high_light);
          Lb_s_bar(high_light);
          Lb_m_bar(high_light);
          centered_flow_unit_bar(high_light);
          Lb_h_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("4/4", 210, 13);
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == usgal_s) {
            if (previous_cursor == Lb_h) {
              Lb_h_bar(high_light);
            } else if (previous_cursor == usgal_m) {
              usgal_m_bar(high_light);
            }
            usgal_s_bar(low_light);
          } else if (cursor == usgal_m) {
            if (previous_cursor == usgal_s) {
              usgal_s_bar(high_light);
            } else if (previous_cursor == usgal_h) {
              usgal_h_bar(high_light);
            }
            usgal_m_bar(low_light);
          } else if (cursor == usgal_h) {
            if (previous_cursor == usgal_m) {
              usgal_m_bar(high_light);
            } else if (previous_cursor == Lb_s) {
              Lb_s_bar(high_light);
            }
            usgal_h_bar(low_light);
          } else if (cursor == Lb_s) {
            if (previous_cursor == usgal_h) {
              usgal_h_bar(high_light);
            } else if (previous_cursor == Lb_m) {
              Lb_m_bar(high_light);
            }
            Lb_s_bar(low_light);
          } else if (cursor == Lb_m) {
            if (previous_cursor == Lb_s) {
              Lb_s_bar(high_light);
            } else if (previous_cursor == Lb_h) {
              Lb_h_bar(high_light);
            }
            Lb_m_bar(low_light);
          } else if (cursor == Lb_h) {
            if (previous_cursor == Lb_m) {
              Lb_m_bar(high_light);
            } else if (previous_cursor == usgal_s) {
              usgal_s_bar(high_light);
            }
            Lb_h_bar(low_light);
          }
          previous_cursor = cursor;
          if (flow_unit_value >= usgal_s && flow_unit_value <= Lb_h) write_tick_for_flow_unit();
        }
      }

      break;

    case total_unit:

      if (previous_cursor == total_unit) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x010F, &total_unit_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre

        covert_total_unit_value();
        write_tick_for_total_unit();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = _units;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_total_unit();

        if (cursor == m3_) total_unit_value = 3;           // birimi sabit tutan register
        else if (cursor == L_) total_unit_value = 7;       // birimi sabit tutan register
        else if (cursor == ft3_) total_unit_value = 11;    // birimi sabit tutan register
        else if (cursor == ukgal_) total_unit_value = 15;  // birimi sabit tutan register
        else if (cursor == usgal_) total_unit_value = 19;  // birimi sabit tutan register
        else if (cursor == kg_) total_unit_value = 23;     // birimi sabit tutan register
        else if (cursor == t_) total_unit_value = 27;      // birimi sabit tutan register
        else if (cursor == Lb_) total_unit_value = 31;     // birimi sabit tutan register

        modbus_master.read_or_write(1, WRITE_MULTI, 0x010F, &total_unit_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                         // iki modbus haberleşmesi arası beklenecek min süre

        covert_total_unit_value();

        write_tick_for_total_unit();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor < m3_) {
        previous_cursor = m3_;
        cursor = Lb_;  // kursoru sondaysa başa döndür
        opening_page = true;
      }
      if (cursor > Lb_) {
        previous_cursor = Lb_;
        cursor = m3_;  // kursoru baştaysa sona döndür
        opening_page = true;
      }

      if (cursor == m3_ && previous_cursor == Lb_) opening_page = true;
      else if (cursor == Lb_ && previous_cursor == m3_) opening_page = true;
      else if (cursor == kg_ && previous_cursor == t_) opening_page = true;
      else if (cursor == t_ && previous_cursor == kg_) opening_page = true;


      if (cursor >= m3_ && cursor <= kg_) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          L_bar(high_light);
          ft3_bar(high_light);
          ukgal_bar(high_light);
          usgal_bar(high_light);
          kg_bar(high_light);
          centered_total_unit_bar(high_light);
          m3_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("1/2", 210, 13);
          page_number = 1;
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == m3_) {
            if (previous_cursor == L_) {
              L_bar(high_light);
            } else if (previous_cursor == kg_) {
              kg_bar(high_light);
            }
            m3_bar(low_light);
          } else if (cursor == L_) {
            if (previous_cursor == m3_) {
              m3_bar(high_light);
            } else if (previous_cursor == ft3_) {
              ft3_bar(high_light);
            }
            L_bar(low_light);
          } else if (cursor == ft3_) {
            if (previous_cursor == L_) {
              L_bar(high_light);
            } else if (previous_cursor == ukgal_) {
              ukgal_bar(high_light);
            }
            ft3_bar(low_light);
          } else if (cursor == ukgal_) {
            if (previous_cursor == ft3_) {
              ft3_bar(high_light);
            } else if (previous_cursor == usgal_) {
              usgal_bar(high_light);
            }
            ukgal_bar(low_light);
          } else if (cursor == usgal_) {
            if (previous_cursor == ukgal_) {
              ukgal_bar(high_light);
            } else if (previous_cursor == kg_) {
              kg_bar(high_light);
            }
            usgal_bar(low_light);
          } else if (cursor == kg_) {
            if (previous_cursor == usgal_) {
              usgal_bar(high_light);
            } else if (previous_cursor == m3_) {
              m3_bar(high_light);
            }
            kg_bar(low_light);
          }
          previous_cursor = cursor;
          if (total_unit_value >= m3_s && total_unit_value <= kg_) {
            write_tick_for_total_unit();
          }
        }
      } else if (cursor >= t_ && cursor <= Lb_) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          Lb_bar(high_light);
          centered_total_unit_bar(high_light);
          t_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("2/2", 210, 13);
          page_number = 2;
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == t_) {
            Lb_bar(high_light);
            t_bar(low_light);
          } else if (cursor == Lb_) {
            t_bar(high_light);
            Lb_bar(low_light);
          }
          previous_cursor = cursor;
          if (total_unit_value >= t_ && total_unit_value <= Lb_) {
            write_tick_for_total_unit();
          }
        }
      }

      break;

    case flow_range:
    case _flow_range:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0105, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[33], 90, 28);  // Flow Range
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 33, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[33], 82, 28);  // ölçme Araligi
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 42, 190);  // Aralik
        }
        tft.drawString("= 0.0001 - 99999", 109, 190);

        // Akış birimi oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0104, &flow_unit_value);
        delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

        tft.setFreeFont(FSS9);

        if (flow_unit_value == 0) {
          tft.drawString("m3/s", 239, 122);
        } else if (flow_unit_value == 1) {
          tft.drawString("m3/m", 239, 122);
        } else if (flow_unit_value == 2) {
          tft.drawString("m3/h", 239, 122);
        } else if (flow_unit_value == 3) {
          tft.drawString("L/s", 239, 122);
        } else if (flow_unit_value == 4) {
          tft.drawString("L/m", 239, 122);
        } else if (flow_unit_value == 5) {
          tft.drawString("L/h", 239, 122);
        } else if (flow_unit_value == 6) {
          tft.drawString("ft3/s", 239, 122);
        } else if (flow_unit_value == 7) {
          tft.drawString("ft3/m", 239, 122);
        } else if (flow_unit_value == 8) {
          tft.drawString("ft3/h", 239, 122);
        } else if (flow_unit_value == 9) {
          tft.drawString("ukgal/s", 239, 122);
        } else if (flow_unit_value == 10) {
          tft.drawString("ukgal/m", 239, 122);
        } else if (flow_unit_value == 11) {
          tft.drawString("ukgal/h", 239, 122);
        } else if (flow_unit_value == 12) {
          tft.drawString("usgal/s", 239, 122);
        } else if (flow_unit_value == 13) {
          tft.drawString("usgal/m", 239, 122);
        } else if (flow_unit_value == 14) {
          tft.drawString("usgal/h", 239, 122);
        } else if (flow_unit_value == 15) {
          tft.drawString("kg/s", 239, 122);
        } else if (flow_unit_value == 16) {
          tft.drawString("kg/m", 239, 122);
        } else if (flow_unit_value == 17) {
          tft.drawString("kg/h", 239, 122);
        } else if (flow_unit_value == 18) {
          tft.drawString("t/s", 239, 122);
        } else if (flow_unit_value == 19) {
          tft.drawString("t/m", 239, 122);
        } else if (flow_unit_value == 20) {
          tft.drawString("t/h", 239, 122);
        } else if (flow_unit_value == 21) {
          tft.drawString("lb/s", 239, 122);
        } else if (flow_unit_value == 22) {
          tft.drawString("lb/m", 239, 122);
        } else if (flow_unit_value == 23) {
          tft.drawString("lb/h", 239, 122);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;

        if (previous_screen_switch == quick_setup) {
          screen_switch = quick_setup;
          previous_screen_switch = 0;
        } else {
          screen_switch = flow_parameters;
        }

      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.000095 && read_or_write_number <= 99999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0105, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 33, 190);  // Range
            tft.drawString("= 0.0001 - 99999", 109, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 42, 190);  // Aralik
            tft.drawString("= 0.0001 - 99999", 109, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);  // done !
        } else {                                                    // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 33, 190);  // Range
            tft.drawString("= 0.0001 - 99999", 109, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 42, 190);  // Aralik
            tft.drawString("= 0.0001 - 99999", 109, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);  // done !
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case decimal_point:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0142, &uint16_value);        // Registerdan istenilen değeri oku
        delay(time_after_communication);                                            // iki modbus haberleşmesi arası beklenecek min süre
        read_or_write_number = (float)uint16_value;                                 // Okunan değeri basamaklara ayrılıp ekrana yazılması için global değişkene at
        number_entry_opening_page(read_or_write_number, positive, decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        digit = 7;                                                                  // imleçin en sağdaki basamakta kalması için

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[34], 75, 28);
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 80, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[34], 76, 28);
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 90, 190);
        }
        tft.drawString("=  0 - 5", 160, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = flow_parameters;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar
        uint16_value = (uint16_t)read_or_write_number;

        if (uint16_value >= 0 && uint16_value <= 5) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0142, &uint16_value);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 80, 190);  // Range
            tft.drawString("=  0 - 5", 160, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 90, 190);  // Aralik
            tft.drawString("=  0 - 5", 160, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap
          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 80, 190);  // Range
            tft.drawString("=  0 - 5", 160, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 90, 190);  // Aralik
            tft.drawString("=  0 - 5", 160, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        if (number[7] >= 5) number[7] = -1;
        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case response_time:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0107, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        // digit = 4;                                                                      // cursor başlangıç digit
        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[35], 70, 28);  // Response Time
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 60, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[35], 83, 28);  // Cevap Suresi
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 69, 190);  // Aralik
        }
        tft.drawString("= 1.0 - 50.0", 136, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = flow_parameters;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 1 && read_or_write_number <= 50.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0107, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 60, 190);  // Range
            tft.drawString("= 1.0 - 50.0", 136, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 69, 190);  // Aralik
            tft.drawString("= 1.0 - 50.0", 136, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 60, 190);  // Range
            tft.drawString("= 1.0 - 50.0", 136, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 69, 190);  // Aralik
            tft.drawString("= 1.0 - 50.0", 136, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
        // if (digit > 7) digit = 4;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
      break;

    case flow_cut_off:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x010C, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        // digit = 4;
        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[36], 85, 28);  // Flow Cut-Off
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 60, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[36], 60, 28);  // Akis Kesim Siniri
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 69, 190);  // Aralik
        }
        tft.drawString("= 0.0 - 99.0", 136, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = flow_parameters;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0 && read_or_write_number <= 99.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x010C, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 60, 190);  // Range
            tft.drawString("= 0.0 - 99.0", 136, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 69, 190);  // Aralik
            tft.drawString("= 0.0 - 99.0", 136, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 60, 190);  // Range
            tft.drawString("= 0.0 - 99.0", 136, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 69, 190);  // Aralik
            tft.drawString("= 0.0 - 99.0", 136, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
        // if (digit > 7) digit = 4;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
      break;

    case flow_direction:

      uint16_t flow_direction_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = flow_parameters;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(105);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == forward) {
          flow_direction_register = 0;
          tick_location = 1;
        } else if (cursor == reverse) {
          flow_direction_register = 1;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0109, &flow_direction_register);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick(105);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        tick_location = 0;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0109, &flow_direction_register);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        if (flow_direction_register == 0) tick_location = 1;
        else if (flow_direction_register == 1) tick_location = 2;
      }

      bar_select(basic_settings_icon, 37, 140, middle_aligned, 80, 81, forward, reverse);


      break;

    case sensor_size:
    case _sensor_size:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0103, &uint16_value);        // Registerdan istenilen değeri oku
        delay(time_after_communication);                                            // iki modbus haberleşmesi arası beklenecek min süre
        read_or_write_number = (float)uint16_value;                                 // Okunan değeri basamaklara ayrılıp ekrana yazılması için global değişkene at
        number_entry_opening_page(read_or_write_number, positive, decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        // digit = 4;
        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[17], 85, 28);  // Sensor Size
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 60, 190);
        } else if (language == Turkish) {
          tft.drawString(turkish[17], 110, 28);  // Hat Capi
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 72, 190);  // aralik
        }
        tft.drawString("= 3 - 3000", 140, 190);
        tft.drawString("mm", 239, 118);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        if (previous_screen_switch == quick_setup) {
          screen_switch = quick_setup;
          previous_screen_switch = 0;
        } else {
          screen_switch = basic_settings;
        }

      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar
        uint16_value = (uint16_t)read_or_write_number;

        if (uint16_value >= 3 && uint16_value <= 3000) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0103, &uint16_value);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 60, 190);  // Range
            tft.drawString("= 3 - 3000", 140, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 72, 190);  // Aralik
            tft.drawString("= 3 - 3000", 140, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap
          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 60, 190);  // Range
            tft.drawString("= 3 - 3000", 140, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 72, 190);  // Aralik
            tft.drawString("= 3 - 3000", 140, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
        // if (digit > 7) digit = 4;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case quick_setup:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = basic_settings;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        previous_screen_switch = quick_setup;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(basic_settings_icon, 154, 75, left_aligned, 17, 33, 108, 148, 113, _sensor_size, _conductivity_alarm_value);

      break;

    case advanced_settings:

      if (opening_page == true) {
        opening_page = false;
        cursor = zero_function;
        tft.fillScreen(0xc658);
        density_conductivity_alarm_valuebar(high_light);
        change_password_bar(high_light);
        reset_bar(high_light);
        fine_calibration_bar(high_light);
        meter_k_factor_bar(high_light);
        centered_advanced_settings_bar(high_light);
        zero_function_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > fine_calibration) cursor = zero_function;  // kursoru baştaysa sona döndür
      if (cursor < zero_function) cursor = fine_calibration;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == zero_function) {
          if (previous_cursor == density_conductivity) {
            density_conductivity_alarm_valuebar(high_light);
          } else if (previous_cursor == fine_calibration) {
            fine_calibration_bar(high_light);
          }
          zero_function_bar(low_light);
        } else if (cursor == density_conductivity) {
          if (previous_cursor == zero_function) {
            zero_function_bar(high_light);
          } else if (previous_cursor == change_password) {
            change_password_bar(high_light);
          }
          density_conductivity_alarm_valuebar(low_light);
        } else if (cursor == change_password) {
          if (previous_cursor == density_conductivity) {
            density_conductivity_alarm_valuebar(high_light);
          } else if (previous_cursor == reset) {
            reset_bar(high_light);
          }
          change_password_bar(low_light);
        } else if (cursor == reset) {
          if (previous_cursor == change_password) {
            change_password_bar(high_light);
          } else if (previous_cursor == meter_k_factor) {
            meter_k_factor_bar(high_light);
          }
          reset_bar(low_light);
        } else if (cursor == meter_k_factor) {
          if (previous_cursor == reset) {
            reset_bar(high_light);
          } else if (previous_cursor == fine_calibration) {
            fine_calibration_bar(high_light);
          }
          meter_k_factor_bar(low_light);
        } else if (cursor == fine_calibration) {
          if (previous_cursor == meter_k_factor) {
            meter_k_factor_bar(high_light);
          } else if (previous_cursor == zero_function) {
            zero_function_bar(high_light);
          }
          fine_calibration_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case zero_function:

      if (opening_page == true) {
        opening_page = false;
        cursor = automatic_zero;
        tft.fillScreen(0xc658);
        manual_zero_bar(high_light);
        centered_zero_functions_bar(high_light);
        automatic_zero_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = advanced_settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        if (cursor == automatic_zero) first_text = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > manual_zero) cursor = automatic_zero;  // kursoru baştaysa sona döndür
      if (cursor < automatic_zero) cursor = manual_zero;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == automatic_zero) {
          manual_zero_bar(high_light);
          automatic_zero_bar(low_light);
        } else if (cursor == manual_zero) {
          automatic_zero_bar(high_light);
          manual_zero_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case automatic_zero:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = zero_function;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;

        float flow_rate = 0;  // akış hızı

        if (cursor == yes) {

          // 2.adım akış hızı oku
          verification = modbus_master.read_or_write(1, READ_HOLDING, 778, &flow_rate);
          delay(time_after_communication);  // iki modbus komutu arası beklencek min süre

          flow_rate = flow_rate + previous_flow_rate;

          if (verification == 0) {
            // 3.adım anlık akış hızını sıfırlama registerına (flow zero) yaz
            modbus_master.read_or_write(1, WRITE_MULTI, 0x010A, &flow_rate);
            delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

            previous_flow_rate = flow_rate;

            EEPROM.writeFloat(previous_flow_rate_adress, previous_flow_rate);
            EEPROM.commit();  // kaydet

            tft.setTextColor(TFT_DARKGREEN, 0xc658);
            tft.setFreeFont(FSSB12);
            if (language == English) {
              tft.drawString(english[2], 125, 108);  // done !
              delay(1500);
            } else if (language == Turkish) {
              tft.drawString(turkish[2], 100, 108);  // onaylandi !
              delay(1500);
            }
          }
        }

        screen_switch = zero_function;  // ayarlar sayfasına git

        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(advanced_setting_icon, 48, 140, middle_aligned, 91, 90, no, yes);

      if (first_text == true) {
        first_text = false;

        tft.setTextColor(TFT_BLACK, 0xc658);
        if (language == English) {
          tft.setFreeFont(FSS9);
          tft.drawString("Make sure pipe is empty and no flow", 13, 130);
        } else if (language == Turkish) {
          tft.setFreeFont(FSS9);
          tft.drawString("Borunun bos oldugundan ve", 40, 130);
          tft.drawString("akis olmadigindan emin olun", 40, 154);
        }
      }

      break;

    case manual_zero:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x010A, &read_or_write_number);
        delay(time_after_communication);                                                    // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, non_positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[49], 85, 28);  // Manuel zero
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 25, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[49], 63, 28);  // Manuel sıfırlama
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 37, 190);  // Aralik
        }
        tft.drawString("= -9999.0 - 9999.0", 101, 190);

        tft.setFreeFont(FSS12);
        tft.drawString("m/s", 241, 115);
      }
      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = zero_function;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= -9999 && read_or_write_number <= 9999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x010A, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 25, 190);  // Range
            tft.drawString("= -9999.0 - 9999.0", 101, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 37, 190);  // Aralik
            tft.drawString("= -9999.0 - 9999.0", 101, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 25, 190);  // Range
            tft.drawString("= -9999.0 - 9999.0", 101, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 37, 190);  // Aralik
            tft.drawString("= -9999.0 - 9999.0", 101, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
      break;

    case density_conductivity:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = advanced_settings;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(advanced_setting_icon, 19, 55, left_aligned, 74, 75, 155, 156, density_unit, conductivity_k_factor);

      break;

    case density_unit:

      if (opening_page == true) {
        opening_page = false;
        cursor = g_cm3;
        tft.fillScreen(0xc658);
        lb_f3_bar(high_light);
        lb_ukgal_bar(high_light);
        lb_usgal_bar(high_light);
        kg_m3_bar(high_light);
        centered_density_unit_bar(high_light);
        g_cm3_bar(low_light);

        modbus_master.read_or_write(1, READ_HOLDING, 0x014D, &density_unit_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_density_unit();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = density_conductivity;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_density_unit();

        if (cursor == g_cm3) {
          density_unit_value = 0;
        } else if (cursor == kg_m3) {
          density_unit_value = 1;
        } else if (cursor == Lb_ukgal) {
          density_unit_value = 2;
        } else if (cursor == Lb_usgal) {
          density_unit_value = 3;
        } else if (cursor == Lb_f3) {
          density_unit_value = 4;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x014D, &density_unit_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_density_unit();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > Lb_f3) cursor = g_cm3;  // kursoru baştaysa sona döndür
      if (cursor < g_cm3) cursor = Lb_f3;  // kursoru sondaysa başa döndür


      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == g_cm3) {
          if (previous_cursor == kg_m3) {
            kg_m3_bar(high_light);
          } else if (previous_cursor == Lb_f3) {
            lb_f3_bar(high_light);
          }
          g_cm3_bar(low_light);
        } else if (cursor == kg_m3) {
          if (previous_cursor == g_cm3) {
            g_cm3_bar(high_light);
          } else if (previous_cursor == Lb_ukgal) {
            lb_ukgal_bar(high_light);
          }
          kg_m3_bar(low_light);
        } else if (cursor == Lb_ukgal) {
          if (previous_cursor == kg_m3) {
            kg_m3_bar(high_light);
          } else if (previous_cursor == Lb_usgal) {
            lb_usgal_bar(high_light);
          }
          lb_ukgal_bar(low_light);
        } else if (cursor == Lb_usgal) {
          if (previous_cursor == Lb_ukgal) {
            lb_ukgal_bar(high_light);
          } else if (previous_cursor == Lb_f3) {
            lb_f3_bar(high_light);
          }
          lb_usgal_bar(low_light);
        } else if (cursor == Lb_f3) {
          if (previous_cursor == Lb_usgal) {
            lb_usgal_bar(high_light);
          } else if (previous_cursor == g_cm3) {
            g_cm3_bar(high_light);
          }
          lb_f3_bar(low_light);
        }
        previous_cursor = cursor;

        write_tick_for_density_unit();
      }

      break;

    case density_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x014B, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        uint16_value = 2;                                                     // kg_m3 ye tekabül eder
        modbus_master.read_or_write(1, READ_HOLDING, 0x014D, &uint16_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                      // iki modbus haberleşmesi arası beklenecek min süre

        tft.setFreeFont(FSS9);
        if (uint16_value == 0) {  // registerden okunan değer g_cm3 ise
          tft.drawString(units[0], 239, 121);
        } else if (uint16_value == 1) {  // registerden okunan değer kg_m3 ise
          tft.drawString(units[1], 239, 121);
        } else if (uint16_value == 2) {  // registerden okunan değer Lb_ukgal ise
          tft.drawString("Lb /", 241, 105);
          tft.drawString("ukgal", 241, 120);
        } else if (uint16_value == 3) {  // registerden okunan değer Lb_usgal ise
          tft.drawString("Lb /", 241, 105);
          tft.drawString("usgal", 241, 120);
        } else if (uint16_value == 4) {  // registerden okunan değer Lb_f3 ise
          tft.drawString(units[3], 239, 121);
        }

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[114], 110, 28);  // Density
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 34, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[114], 110, 28);  // Yogunluk
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 45, 190);  // Aralik
        }
        tft.drawString("= 0.0001 - 99999", 110, 190);
      }


      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = density_conductivity;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0001 && read_or_write_number <= 99999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x014B, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 34, 190);  // Range
            tft.drawString("= 0.0001 - 99999", 110, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 45, 190);  // Aralik
            tft.drawString("= 0.0001 - 99999", 110, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 34, 190);  // Range
            tft.drawString("= 0.0001 - 99999", 110, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 45, 190);  // Aralik
            tft.drawString("= 0.0001 - 99999", 110, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case conductivity_alarm_value:
    case _conductivity_alarm_value:

      static uint16_t conductivitiy_enable;

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0116, &read_or_write_number);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                              // iki modbus haberleşmesi arası beklenecek min süre

        read_or_write_number = interpolateMTPToUS(read_or_write_number);

        number_entry_opening_page(read_or_write_number, positive, decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        // digit = 6;                                                                           // imleçin en sağdaki basamakta kalması için

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[113], 81, 14);   // conductivity
          tft.drawString(english[130], 116, 39);  // alarm
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 65, 190);  // Range
          tft.drawString("= 1 - 6000", 140, 190);
        } else if (language == Turkish) {
          tft.drawString(turkish[113], 103, 14);  // iletkenlik
          tft.drawString(turkish[130], 116, 39);  // alarm
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 62, 190);  // aralik
          tft.drawString("= 1 - 6000", 135, 190);
        }

        tft.drawString("uS", 245, 119);

        modbus_master.read_or_write(1, READ_HOLDING, 0x0115, &conductivitiy_enable);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                              // iki modbus haberleşmesi arası beklenecek min süre

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS9);
        tft.drawString(english[76], 46, 40);   // active
        tft.drawString(english[77], 213, 40);  // passive

        tft.drawWideLine(275, 70, 45, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.drawRect(57, 14, 20, 20, TFT_DARKGREEN);  // soldaki içi boş kare
        tft.drawRect(231, 14, 20, 20, TFT_RED);       // sağdaki içi boş kare

        if (conductivitiy_enable == 0) {  // sensitivity_ kapalı
          tft.fillRect(232, 15, 18, 18, TFT_RED);
        } else if (conductivitiy_enable == 1) {  // sensitivity_ açık
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;

        if (previous_screen_switch == quick_setup) {
          screen_switch = quick_setup;
          previous_screen_switch = 0;
        } else {
          screen_switch = density_conductivity;
        }

      } else if (button_state == press_enter) {
        button_state = idle;

        if (conductivitiy_enable == 1) {

          if (digit == 8) {
            conductivitiy_enable = 0;
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
            tft.fillRect(232, 15, 18, 18, TFT_RED);

            modbus_master.read_or_write(1, WRITE_MULTI, 0x0115, &conductivitiy_enable);  // Registerdan istenilen değeri oku
            delay(time_after_communication);                                             // iki modbus haberleşmesi arası beklenecek min süre
          }

          number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

          if (read_or_write_number >= 1 && read_or_write_number <= 6000) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

            read_or_write_number = interpolateUSToMTP((int)read_or_write_number);
            modbus_master.read_or_write(1, WRITE_MULTI, 0x0116, &read_or_write_number);
            delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

            tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
            tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[2], 135, 162);  // done !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 65, 190);  // Range
              tft.drawString("= 1 - 6000", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[2], 112, 162);  // onaylandi !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 62, 190);  // Aralik
              tft.drawString("= 1 - 6000", 135, 190);
            }
            delay(1000);
            tft.drawString("                            ", 75, 162);
          } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap
            tft.setTextColor(TFT_RED, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[73], 105, 162);  // out of range
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 65, 190);  // Range
              tft.drawString("= 1 - 6000", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[73], 95, 162);  // araligin disinda
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 62, 190);  // Aralik
              tft.drawString("= 1 - 6000", 135, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            }
            delay(1000);
            tft.drawString("                            ", 75, 162);
          }

        } else {
          conductivitiy_enable = 1;
          tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0115, &conductivitiy_enable);  // Registera istenilen değeri yaz
          delay(time_after_communication);                                             // iki modbus haberleşmesi arası beklenecek min süre
        }

      } else if (button_state == press_up) {
        button_state = idle;

        if (conductivitiy_enable == 1) {
          increase_digit_number();
        }
      } else if (button_state == press_down) {
        button_state = idle;
        if (conductivitiy_enable == 1) {
          digit++;
          // if (digit > 8) {
          //   digit = 6;
          tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          // }
          if (digit == 8) {
            tft.drawWideLine(57 + digit - 1 * 25, 147, 34 + digit * 25, 147, 4, TFT_WHITE, TFT_WHITE);  // imleç kutucuklara geçince önceki pozisyonunun kalıntısını sil
            half_second = previous_half_second;
          }
        }
      }

      if (conductivitiy_enable == 0) {  // kutu animasyonları

        if (half_second != previous_half_second) {
          if (green_rectengular == true) {  // red line çizilimi
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
          } else {
            tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          }
          green_rectengular = !green_rectengular;
          previous_half_second = half_second;
        }
      } else {
        if (digit == 8) {
          if (half_second != previous_half_second) {
            if (green_rectengular == true) {  // red line çizilimi
              tft.fillRect(232, 15, 18, 18, TFT_WHITE);
            } else {
              tft.fillRect(232, 15, 18, 18, TFT_RED);
            }
            green_rectengular = !green_rectengular;
            previous_half_second = half_second;
          }
        } else {
          cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
        }
      }

      break;

    case conductivity_k_factor:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = conductivity_k_factor_value;
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSS12);
        if (language == English) {
          tft.drawString(english[156], 49, 30);  // Conductivity K Factor
          tft.drawString(english[69], 62, 185);  // Range
          tft.drawString("= 0.01 - 2.0", 139, 185);
        } else if (language == Turkish) {
          tft.drawString(turkish[156], 63, 30);  // iletkenlik K Faktoru
          tft.drawString(turkish[69], 68, 185);  // Aralik
          tft.drawString("= 0.01 - 2.0", 135, 185);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;

        screen_switch = density_conductivity;
        break;

      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.01 && read_or_write_number <= 2.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          conductivity_k_factor_value = read_or_write_number;
          EEPROM.writeFloat(conductivity_k_factor_register_address, conductivity_k_factor_value);

          EEPROM.commit();  // kaydet

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 62, 185);  // Range
            tft.drawString("= 0.01 - 2.0", 139, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 68, 185);  // Aralik
            tft.drawString("= 0.01 - 2.0", 135, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 62, 185);  // Range
            tft.drawString("= 0.01 - 2.0", 139, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 68, 185);  // Aralik
            tft.drawString("= 0.01 - 2.0", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir


      break;

    case change_password:

      static bool change_password_key = false;

      if (opening_page == true) {
        opening_page = false;

        tft.fillScreen(TFT_BLACK);

        tft.setTextColor(TFT_ORANGE, TFT_BLACK);
        tft.setFreeFont(FSS18);
        if (language == English) {
          tft.drawString(english[0], 81, 40);  // Password
          tft.setFreeFont(FSS9);
          tft.drawString(english[92], 45, 190);  // Please Enter Valid Password
        } else if (language == Turkish) {
          tft.drawString(turkish[0], 125, 40);  // Sifre
          tft.setFreeFont(FSS9);
          tft.drawString(turkish[92], 65, 190);  // Lutfen Sifre Gecerli Girin
        }

        tft.drawWideLine(270, 95, 50, 95, 3, TFT_SILVER, TFT_SILVER);  // çizgi

        tft.pushImage(70, 120, 40, 40, locckk);  // kilit ikonu

        draw_char(0, 115, 121, TFT_BLACK, TFT_WHITE);
        draw_char(0, 148, 121, TFT_WHITE, TFT_BLACK);
        draw_char(0, 181, 121, TFT_WHITE, TFT_BLACK);
        draw_char(0, 214, 121, TFT_WHITE, TFT_BLACK);

        digit = 0;

        memset(number, 0, sizeof(number));
      }

      if (button_state == press_up) {
        button_state = idle;
        if (digit == 0) {
          number[0]++;
          if (number[0] > 9) number[0] = 0;
          draw_char(number[0], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 1) {
          number[1]++;
          if (number[1] > 9) number[1] = 0;
          draw_char(number[1], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 2) {
          number[2]++;
          if (number[2] > 9) number[2] = 0;
          draw_char(number[2], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 3) {
          number[3]++;
          if (number[3] > 9) number[3] = 0;
          draw_char(number[3], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        }


      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
        if (digit > 3) digit = 0;

        if (digit == 0) {
          draw_char(number[3], 115 + 3 * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[0], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 1) {
          draw_char(number[0], 115 + (digit - 1) * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[1], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 2) {
          draw_char(number[1], 115 + (digit - 1) * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[2], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        } else if (digit == 3) {
          draw_char(number[2], 115 + (digit - 1) * 33, 121, TFT_WHITE, TFT_BLACK);
          draw_char(number[3], 115 + digit * 33, 121, TFT_BLACK, TFT_WHITE);
        }



      } else if (button_state == press_enter) {
        button_state = idle;

        uint16_t password = number[0] * 1000 + number[1] * 100 + number[2] * 10 + number[3];  // girilen şifreyi password değişkenine ata

        if (change_password_key == false) {
          if (main_password == password || master_password == password) {

            change_password_key = true;

            draw_char(0, 115, 121, TFT_BLACK, TFT_WHITE);
            draw_char(0, 148, 121, TFT_WHITE, TFT_BLACK);
            draw_char(0, 181, 121, TFT_WHITE, TFT_BLACK);
            draw_char(0, 214, 121, TFT_WHITE, TFT_BLACK);
            digit = 0;

            memset(number, 0, sizeof(number));
            tft.fillRect(20, 190, 300, 20, TFT_BLACK);

            tft.setTextColor(TFT_DARKGREEN, TFT_BLACK);
            tft.setFreeFont(FSS9);
            if (language == English) {
              tft.drawString(english[2], 145, 190);  // done
              delay(1500);
              tft.setTextColor(TFT_ORANGE, TFT_BLACK);
              tft.drawString(english[93], 50, 190);  // please enter new password
            } else if (language == Turkish) {
              tft.drawString(turkish[2], 120, 190);  // onaylandı
              delay(1500);
              tft.setTextColor(TFT_ORANGE, TFT_BLACK);
              tft.drawString(turkish[93], 75, 190);  // lütfen yeni şifreyi girin
            }

          } else {

            tft.fillRect(80, 190, 200, 20, TFT_BLACK);
            tft.setTextColor(TFT_RED, TFT_BLACK);
            tft.setFreeFont(FSS9);
            if (language == English) {
              tft.drawString(english[3], 45, 190);  // Wrong Password !  Try Again
              tft.setFreeFont(FSS18);
              tft.drawString(english[0], 81, 40);  // Password
              delay(1500);
              tft.setTextColor(TFT_ORANGE, TFT_BLACK);
              tft.drawString(english[0], 81, 40);  // Password
            } else if (language == Turkish) {
              tft.drawString(turkish[3], 45, 190);  // Şifre yanlış Tekrar deneyin
              tft.setFreeFont(FSS18);
              tft.drawString(turkish[0], 125, 40);  // Sifre
              delay(1500);
              tft.setTextColor(TFT_ORANGE, TFT_BLACK);
              tft.drawString(turkish[0], 125, 40);  // Sifre
            }
          }
        } else {
          change_password_key = false;

          EEPROM.writeUShort(main_password_address, password);  // Değiştirilen şifreyi eeproma yazmaya hazırla

          verification = (uint8_t)EEPROM.commit();  // kaydet

          if ((bool)verification) {

            main_password = password;

            tft.fillRect(20, 190, 300, 20, TFT_BLACK);
            tft.setTextColor(TFT_DARKGREEN, TFT_BLACK);
            tft.setFreeFont(FSS9);
            if (language == English) {
              tft.drawString(english[94], 50, 190);  // the password was chanced
            } else if (language == Turkish) {
              tft.drawString(turkish[94], 105, 190);  // sifre degistildi
            }
            delay(2000);
            screen_switch = advanced_settings;

            opening_page = true;
          }
        }

      } else if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        change_password_key = false;
        screen_switch = advanced_settings;
      }

      break;

    case reset:

      if (opening_page == true) {
        opening_page = false;
        cursor = factory_reset;
        tft.fillScreen(0xc658);
        total_forward_reset_bar(high_light);
        total_backward_reset_bar(high_light);
        centered_reset_bar(high_light);
        factory_reset_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = advanced_settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > total_backward_reset) cursor = factory_reset;  // kursoru baştaysa sona döndür
      if (cursor < factory_reset) cursor = total_backward_reset;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // kursor değişirse
        if (cursor == factory_reset) {
          if (previous_cursor == total_backward_reset) {
            total_backward_reset_bar(high_light);
          } else if (previous_cursor == total_forward_reset) {
            total_forward_reset_bar(high_light);
          }
          factory_reset_bar(low_light);
        } else if (cursor == total_forward_reset) {
          if (previous_cursor == factory_reset) {
            factory_reset_bar(high_light);
          } else if (previous_cursor == total_backward_reset) {
            total_backward_reset_bar(high_light);
          }
          total_forward_reset_bar(low_light);
        } else if (cursor == total_backward_reset) {
          if (previous_cursor == total_forward_reset) {
            total_forward_reset_bar(high_light);
          } else if (previous_cursor == factory_reset) {
            factory_reset_bar(high_light);
          }
          total_backward_reset_bar(low_light);
        }
        previous_cursor = cursor;
      }
      break;

    case factory_reset:

      if (opening_page == true) {
        opening_page = false;
        cursor = no;
        tft.fillScreen(0xc658);
        yes_bar(high_light);
        centered_factory_reset_bar(high_light);
        no_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = reset;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;

        if (cursor == yes) {
          // Reset at
          uint16_t resets = 1;
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0404, &resets);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.setTextColor(TFT_DARKGREEN, 0xc658);
          tft.setFreeFont(FSSB12);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            delay(1500);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 100, 160);  // onaylandi !
            delay(1500);
          }

          // Dili seç
          uint16_t language_state = 0;
          verification = modbus_master.read_or_write(1, READ_HOLDING, 0x0100, &language_state);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre
          if (verification == 0) language = language_state;
        }
        screen_switch = reset;  // ayarlar sayfasına git

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > yes) cursor = no;  // kursoru baştaysa sona döndür
      if (cursor < no) cursor = yes;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == no) {
          yes_bar(high_light);
          no_bar(low_light);
        } else if (cursor == yes) {
          no_bar(high_light);
          yes_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case total_forward_reset:

      if (opening_page == true) {
        opening_page = false;
        cursor = no;
        tft.fillScreen(0xc658);
        yes_bar(high_light);
        centered_total_forward_reset_bar(high_light);
        no_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = reset;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;

        if (cursor == yes) {
          // Reset at
          uint32_t zero = 0;
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0304, &zero);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.setTextColor(TFT_DARKGREEN, 0xc658);
          tft.setFreeFont(FSSB12);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            delay(1500);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 100, 160);  // onaylandi !
            delay(1500);
          }
        }
        screen_switch = reset;  // ayarlar sayfasına git

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > yes) cursor = no;  // kursoru baştaysa sona döndür
      if (cursor < no) cursor = yes;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == no) {
          yes_bar(high_light);
          no_bar(low_light);
        } else if (cursor == yes) {
          no_bar(high_light);
          yes_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case total_backward_reset:

      if (opening_page == true) {
        opening_page = false;
        cursor = no;
        tft.fillScreen(0xc658);
        yes_bar(high_light);
        centered_total_backward_reset_bar(high_light);
        no_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = reset;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;

        if (cursor == yes) {
          // Reset at
          uint32_t zero = 0;
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0302, &zero);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.setTextColor(TFT_DARKGREEN, 0xc658);
          tft.setFreeFont(FSSB12);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            delay(1500);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 100, 160);  // onaylandi !
            delay(1500);
          }
        }
        screen_switch = reset;  // ayarlar sayfasına git

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > yes) cursor = no;  // kursoru baştaysa sona döndür
      if (cursor < no) cursor = yes;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == no) {
          yes_bar(high_light);
          no_bar(low_light);
        } else if (cursor == yes) {
          no_bar(high_light);
          yes_bar(low_light);
        }
        previous_cursor = cursor;
      }
      break;

    case meter_k_factor:

      if (opening_page == true) {
        opening_page = false;
        cursor = meter_factor;
        tft.fillScreen(0xc658);
        k_factor_bar(high_light);
        centered_meter_k_factor_bar(high_light);
        meter_factor_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = advanced_settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > k_factor) cursor = meter_factor;  // kursoru baştaysa sona döndür
      if (cursor < meter_factor) cursor = k_factor;  // kursoru sondaysa başa döndür


      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == meter_factor) {
          k_factor_bar(high_light);
          meter_factor_bar(low_light);
        } else if (cursor == k_factor) {
          meter_factor_bar(high_light);
          k_factor_bar(low_light);
        }
        previous_cursor = cursor;
      }


      break;


    case meter_factor:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0122, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        if (language == English) {
          tft.setFreeFont(FSS18);
          tft.drawString(english[112], 63, 20);  // Meter Factor
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 25, 185);  // Range
        } else if (language == Turkish) {
          tft.setFreeFont(FSS18);
          tft.drawString(turkish[112], 50, 20);
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 35, 185);
        }
        tft.drawString("=  0.0001 - 9.9999", 105, 185);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = meter_k_factor;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0001 && read_or_write_number <= 9.9999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0122, &read_or_write_number);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 25, 185);  // Range
            tft.drawString("=  0.0001 - 9.9999", 105, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 35, 185);  // Aralik
            tft.drawString("=  0.0001 - 9.9999", 105, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 25, 185);  // Range
            tft.drawString("=  0.0001 - 9.9999", 105, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 35, 185);  // Aralik
            tft.drawString("=  0.0001 - 9.9999", 105, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case k_factor:
    case _k_factor:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0125, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        if (language == English) {
          tft.setFreeFont(FSS18);
          tft.drawString(english[108], 95, 20);  // K Factor
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 25, 185);  // Range
        } else if (language == Turkish) {
          tft.setFreeFont(FSS18);
          tft.drawString(turkish[108], 85, 20);
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 35, 185);
        }
        tft.drawString("=  0.0001 - 5.9999", 105, 185);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;

        if (previous_screen_switch == quick_setup) {
          screen_switch = quick_setup;
          previous_screen_switch = 0;
        } else {
          screen_switch = meter_k_factor;
        }

      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0001 && read_or_write_number <= 5.9999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0125, &read_or_write_number);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 25, 185);  // Range
            tft.drawString("=  0.0001 - 5.9999", 105, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 35, 185);  // Aralik
            tft.drawString("=  0.0001 - 5.9999", 105, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 25, 185);  // Range
            tft.drawString("=  0.0001 - 5.9999", 105, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 35, 185);  // Aralik
            tft.drawString("=  0.0001 - 5.9999", 105, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case fine_calibration:

      if (cursor == fine_calibration) cursor = sensitivity;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = advanced_settings;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor < sensitivity) {
        previous_cursor = sensitivity;
        cursor = _4_st_value;  // kursoru sondaysa başa döndür
        opening_page = true;
      }
      if (cursor > _4_st_value) {
        previous_cursor = _4_st_value;
        cursor = sensitivity;  // kursoru baştaysa sona döndür
        opening_page = true;
      }

      if (cursor == sensitivity && previous_cursor == _4_st_value) opening_page = true;
      else if (cursor == _4_st_value && previous_cursor == sensitivity) opening_page = true;
      else if (cursor == _1_st_value && previous_cursor == _2_st_point) opening_page = true;
      else if (cursor == _2_st_point && previous_cursor == _1_st_value) opening_page = true;

      if (cursor >= sensitivity && cursor <= _1_st_value) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          application_mode_bar(high_light);
          sensor_freqency_bar(high_light);
          fine_calibration_en_bar(high_light);
          _1_st_point_bar(high_light);
          _1_st_value_bar(high_light);
          centered_fine_calibration_bar(high_light);
          sensitivity_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("1/2", 270, 13);
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == sensitivity) {
            if (previous_cursor == _1_st_value) {
              _1_st_value_bar(high_light);
            } else if (previous_cursor == application_mode) {
              application_mode_bar(high_light);
            }
            sensitivity_bar(low_light);
          } else if (cursor == application_mode) {
            if (previous_cursor == sensitivity) {
              sensitivity_bar(high_light);
            } else if (previous_cursor == sensor_freqency) {
              sensor_freqency_bar(high_light);
            }
            application_mode_bar(low_light);
          } else if (cursor == sensor_freqency) {
            if (previous_cursor == application_mode) {
              application_mode_bar(high_light);
            } else if (previous_cursor == fine_calibration_en) {
              fine_calibration_en_bar(high_light);
            }
            sensor_freqency_bar(low_light);
          } else if (cursor == fine_calibration_en) {
            if (previous_cursor == sensor_freqency) {
              sensor_freqency_bar(high_light);
            } else if (previous_cursor == _1_st_point) {
              _1_st_point_bar(high_light);
            }
            fine_calibration_en_bar(low_light);
          } else if (cursor == _1_st_point) {
            if (previous_cursor == fine_calibration_en) {
              fine_calibration_en_bar(high_light);
            } else if (previous_cursor == _1_st_value) {
              _1_st_value_bar(high_light);
            }
            _1_st_point_bar(low_light);
          } else if (cursor == _1_st_value) {
            if (previous_cursor == _1_st_point) {
              _1_st_point_bar(high_light);
            } else if (previous_cursor == sensitivity) {
              sensitivity_bar(high_light);
            }
            _1_st_value_bar(low_light);
          }
          previous_cursor = cursor;
        }
      } else if (cursor >= _2_st_point && cursor <= _4_st_value) {

        if (opening_page == true) {
          opening_page = false;
          tft.fillScreen(0xc658);
          _2_st_value_bar(high_light);
          _3_st_point_bar(high_light);
          _3_st_value_bar(high_light);
          _4_st_point_bar(high_light);
          _4_st_value_bar(high_light);
          centered_fine_calibration_bar(high_light);
          _2_st_point_bar(high_light);
          tft.setFreeFont(FSS9);
          tft.setTextColor(TFT_BLACK, TFT_WHITE);
          tft.drawString("2/2", 270, 13);
        }

        if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
          if (cursor == _2_st_point) {
            if (previous_cursor == _4_st_value) {
              _4_st_value_bar(high_light);
            } else if (previous_cursor == _2_st_value) {
              _2_st_value_bar(high_light);
            }
            _2_st_point_bar(low_light);
          } else if (cursor == _2_st_value) {
            if (previous_cursor == _2_st_point) {
              _2_st_point_bar(high_light);
            } else if (previous_cursor == _3_st_point) {
              _3_st_point_bar(high_light);
            }
            _2_st_value_bar(low_light);
          } else if (cursor == _3_st_point) {
            if (previous_cursor == _2_st_value) {
              _2_st_value_bar(high_light);
            } else if (previous_cursor == _3_st_value) {
              _3_st_value_bar(high_light);
            }
            _3_st_point_bar(low_light);
          } else if (cursor == _3_st_value) {
            if (previous_cursor == _3_st_point) {
              _3_st_point_bar(high_light);
            } else if (previous_cursor == _4_st_point) {
              _4_st_point_bar(high_light);
            }
            _3_st_value_bar(low_light);
          } else if (cursor == _4_st_point) {
            if (previous_cursor == _3_st_value) {
              _3_st_value_bar(high_light);
            } else if (previous_cursor == _4_st_value) {
              _4_st_value_bar(high_light);
            }
            _4_st_point_bar(low_light);
          } else if (cursor == _4_st_value) {
            if (previous_cursor == _4_st_point) {
              _4_st_point_bar(high_light);
            } else if (previous_cursor == _2_st_point) {
              _2_st_point_bar(high_light);
            }
            _4_st_value_bar(low_light);
          }
          previous_cursor = cursor;
        }
      }

      break;

    case sensitivity:

      static uint16_t sensitivity_enable;

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x013A, &uint16_value);        // Registerdan istenilen değeri oku
        delay(time_after_communication);                                            // iki modbus haberleşmesi arası beklenecek min süre
        read_or_write_number = (float)uint16_value;                                 // Okunan değeri basamaklara ayrılıp ekrana yazılması için global değişkene at
        number_entry_opening_page(read_or_write_number, positive, decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        digit = 6;                                                                  // imleçin en sağdaki basamakta kalması için

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[111], 93, 14);  // sensitivity_
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 80, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[111], 100, 14);
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 80, 190);
        }
        tft.drawString("=  0 - 99", 150, 190);
        tft.setFreeFont(FSS18);
        tft.drawString("%", 240, 107);

        modbus_master.read_or_write(1, READ_HOLDING, 0x0139, &sensitivity_enable);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                            // iki modbus haberleşmesi arası beklenecek min süre

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS9);
        tft.drawString(english[76], 46, 40);   // active
        tft.drawString(english[77], 213, 40);  // passive

        tft.drawWideLine(275, 70, 45, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.drawRect(57, 14, 20, 20, TFT_DARKGREEN);  // soldaki içi boş kare
        tft.drawRect(231, 14, 20, 20, TFT_RED);       // sağdaki içi boş kare

        if (sensitivity_enable == 0) {  // sensitivity_ kapalı
          tft.fillRect(232, 15, 18, 18, TFT_RED);
        } else if (sensitivity_enable == 1) {  // sensitivity_ açık
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = fine_calibration;
        previous_cursor = application_mode;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        if (sensitivity_enable == 1) {

          if (digit == 8) {
            sensitivity_enable = 0;
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
            tft.fillRect(232, 15, 18, 18, TFT_RED);

            modbus_master.read_or_write(1, WRITE_MULTI, 0x0139, &sensitivity_enable);  // Registerdan istenilen değeri oku
            delay(time_after_communication);                                           // iki modbus haberleşmesi arası beklenecek min süre
          }

          number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar
          uint16_value = (uint16_t)read_or_write_number;

          if (uint16_value >= 0 && uint16_value <= 99) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
            modbus_master.read_or_write(1, WRITE_MULTI, 0x013A, &uint16_value);
            delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre


            tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
            tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[2], 135, 162);  // done !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 80, 190);  // Range
              tft.drawString("=  0 - 99", 160, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[2], 112, 162);  // onaylandi !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 80, 190);  // Aralik
              tft.drawString("=  0 - 99", 150, 190);
            }
            delay(1000);
            tft.drawString("                            ", 75, 162);
          } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap
            tft.setTextColor(TFT_RED, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[73], 105, 162);  // out of range
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 80, 190);  // Range
              tft.drawString("=  0 - 99", 160, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[73], 95, 162);  // araligin disinda
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 80, 190);  // Aralik
              tft.drawString("=  0 - 99", 150, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            }
            delay(1000);
            tft.drawString("                            ", 75, 162);
          }

        } else {
          sensitivity_enable = 1;
          tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0139, &sensitivity_enable);  // Registerdan istenilen değeri oku
          delay(time_after_communication);                                           // iki modbus haberleşmesi arası beklenecek min süre
        }

      } else if (button_state == press_up) {
        button_state = idle;

        if (sensitivity_enable == 1) {
          increase_digit_number();
        }
      } else if (button_state == press_down) {
        button_state = idle;
        if (sensitivity_enable == 1) {
          digit++;
          if (digit > 8) {
            digit = 6;
            tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          }
          if (digit == 8) {
            tft.drawWideLine(57 + digit - 1 * 25, 147, 34 + digit * 25, 147, 4, TFT_WHITE, TFT_WHITE);  // imleç kutucuklara geçince önceki pozisyonunun kalıntısını sil
            half_second = previous_half_second;
          }
        }
      }

      if (sensitivity_enable == 0) {  // kutu animasyonları

        if (half_second != previous_half_second) {
          if (green_rectengular == true) {  // red line çizilimi
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
          } else {
            tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          }
          green_rectengular = !green_rectengular;
          previous_half_second = half_second;
        }
      } else {
        if (digit == 8) {
          if (half_second != previous_half_second) {
            if (green_rectengular == true) {  // red line çizilimi
              tft.fillRect(232, 15, 18, 18, TFT_WHITE);
            } else {
              tft.fillRect(232, 15, 18, 18, TFT_RED);
            }
            green_rectengular = !green_rectengular;
            previous_half_second = half_second;
          }
        } else {
          cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
        }
      }

      break;

    case application_mode:

      static uint16_t application_mode_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = fine_calibration;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(55);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == normal) {
          application_mode_register = 0;
          tick_location = 1;
        } else if (cursor == pulp_or_slurry) {
          application_mode_register = 9;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0144, &application_mode_register);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick(55);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        tick_location = 0;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0144, &application_mode_register);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        if (application_mode_register == 0) tick_location = 1;
        else if (application_mode_register == 9) tick_location = 2;
      }

      bar_select(advanced_setting_icon, 115, 90, middle_aligned, 126, 127, normal, pulp_or_slurry);

      break;

    case sensor_freqency:

      static uint16_t sensor_freqency_value;

      if (opening_page == true) {
        opening_page = false;
        cursor = _5_Hz;
        tft.fillScreen(0xc658);
        _4_167_Hz_bar(high_light);
        _3_125_Hz_bar(high_light);
        centered_sensor_freqency_bar(high_light);
        _5_Hz_bar(low_light);

        modbus_master.read_or_write(1, READ_HOLDING, 0x0124, &sensor_freqency_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre
      }


      if (button_state == press_esc) {
        button_state = idle;
        screen_switch = fine_calibration;  // ayarlar sayfasına git
        opening_page = true;
        previous_cursor = application_mode;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_sensor_freqency(sensor_freqency_value);

        if (cursor == _5_Hz) sensor_freqency_value = 0;
        else if (cursor == _4_167_Hz) sensor_freqency_value = 1;
        else if (cursor == _3_125_Hz) sensor_freqency_value = 2;

        // baud rate register ına yaz
        modbus_master.read_or_write(1, WRITE_MULTI, 0x0124, &sensor_freqency_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_sensor_freqency(sensor_freqency_value);

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > _3_125_Hz) cursor = _5_Hz;  // kursoru baştaysa sona döndür
      if (cursor < _5_Hz) cursor = _3_125_Hz;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == _5_Hz) {
          if (previous_cursor == _3_125_Hz) {
            _3_125_Hz_bar(high_light);
          } else if (previous_cursor == _4_167_Hz) {
            _4_167_Hz_bar(high_light);
          }
          _5_Hz_bar(low_light);
        } else if (cursor == _4_167_Hz) {
          if (previous_cursor == _5_Hz) {
            _5_Hz_bar(high_light);
          } else if (previous_cursor == _3_125_Hz) {
            _3_125_Hz_bar(high_light);
          }
          _4_167_Hz_bar(low_light);
        } else if (cursor == _3_125_Hz) {
          if (previous_cursor == _4_167_Hz) {
            _4_167_Hz_bar(high_light);
          } else if (previous_cursor == _5_Hz) {
            _5_Hz_bar(high_light);
          }
          _3_125_Hz_bar(low_light);
        }
        previous_cursor = cursor;

        write_tick_for_sensor_freqency(sensor_freqency_value);
      }

      break;

    case fine_calibration_en:

      static uint16_t fine_calibration_en_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = fine_calibration;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(105);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == enable) {
          fine_calibration_en_register = 1;
          tick_location = 1;
        } else if (cursor == disable) {
          fine_calibration_en_register = 0;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0127, &fine_calibration_en_register);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick(105);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        tick_location = 0;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0127, &fine_calibration_en_register);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        if (fine_calibration_en_register == 1) tick_location = 1;
        else if (fine_calibration_en_register == 0) tick_location = 2;
      }

      bar_select(advanced_setting_icon, 125, 140, middle_aligned, 128, 129, enable, disable);

      break;

    case _1_st_point:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0129, &read_or_write_number);
        delay(time_after_communication);                                                    // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, non_positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[117], 110, 28);  // 1 st point
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 48, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[117], 110, 28);  // 1. nokta
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 55, 190);  // Aralik
        }
        tft.drawString("= - 15.0 - 15.0", 125, 190);

        tft.setFreeFont(FSSB9);
        tft.drawString("m/s", 239, 122);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        cursor = sensitivity;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();                                                       // basamaklardaki rakamları read_or_write_number global değişkenine yazar
        if (read_or_write_number >= -15.0 && read_or_write_number <= 15.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0129, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir


      break;

    case _1_st_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;
        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0131, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[118], 110, 28);  // 1 st value
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 28, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[118], 110, 28);  // 1. değer
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 38, 190);  // Aralik
        }
        tft.drawString("= 1.9999 - 0.0001", 104, 190);

        tft.setFreeFont(FSS9);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        cursor = sensitivity;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        tft.setFreeFont(FSSB9);
        tft.setTextColor(TFT_RED, TFT_WHITE);
        tft.drawString("Prog. Protection !", 80, 162);  // out of range

        // number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        // if (read_or_write_number >= 0.0001 && read_or_write_number <= 1.9999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
        //   modbus_master.read_or_write(1, WRITE_MULTI, 0x0131, &read_or_write_number);
        //   delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
        //   tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
        //   tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
        //   tft.setFreeFont(FSSB9);
        //   if (language == English) {
        //     tft.drawString(english[2], 135, 162);  // done !
        //     tft.setTextColor(TFT_GREY, TFT_WHITE);
        //     tft.setFreeFont(FSS12);
        //     tft.drawString(english[69], 28, 190);  // Range
        //     tft.drawString("= 1.9999 - 0.0001", 104, 190);
        //     delay(1000);
        //   } else if (language == Turkish) {
        //     tft.drawString(turkish[2], 112, 162);  // onaylandi !
        //     tft.setTextColor(TFT_GREY, TFT_WHITE);
        //     tft.setFreeFont(FSS12);
        //     tft.drawString(turkish[69], 38, 190);  // Aralik
        //     tft.drawString("= 1.9999 - 0.0001", 104, 190);
        //     delay(1000);
        //   }
        // } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

        //   tft.setTextColor(TFT_RED, TFT_WHITE);
        //   tft.setFreeFont(FSSB9);
        //   if (language == English) {
        //     tft.drawString(english[73], 105, 162);  // out of range
        //     tft.setFreeFont(FSS12);
        //     tft.drawString(english[69], 28, 190);  // Range
        //     tft.drawString("= 1.9999 - 0.0001", 104, 190);
        //     delay(1000);
        //     tft.setTextColor(TFT_GREY, TFT_WHITE);
        //   } else if (language == Turkish) {
        //     tft.drawString(turkish[73], 95, 162);  // araligin disinda
        //     tft.setFreeFont(FSS12);
        //     tft.drawString(turkish[69], 38, 190);  // Aralik
        //     tft.drawString("= 1.9999 - 0.0001", 104, 190);
        //     delay(1000);
        //     tft.setTextColor(TFT_GREY, TFT_WHITE);
        //   }
        // }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case _2_st_point:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x012B, &read_or_write_number);
        delay(time_after_communication);                                                    // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, non_positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[119], 110, 28);  // 2 st point
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 48, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[119], 110, 28);  // 2. value
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 55, 190);  // Aralik
        }
        tft.drawString("= - 15.0 - 15.0", 125, 190);

        tft.setFreeFont(FSSB9);
        tft.drawString("m/s", 239, 122);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        previous_cursor = application_mode;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();                                                       // basamaklardaki rakamları read_or_write_number global değişkenine yazar
        if (read_or_write_number >= -15.0 && read_or_write_number <= 15.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x012B, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case _2_st_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;
        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0133, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[120], 110, 28);  // 2 st value
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 28, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[120], 110, 28);  // 2. değer
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 38, 190);  // Aralik
        }
        tft.drawString("= 1.9999 - 0.0001", 104, 190);

        tft.setFreeFont(FSS9);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        cursor = _2_st_point;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0001 && read_or_write_number <= 1.9999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0133, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 28, 190);  // Range
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 38, 190);  // Aralik
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 28, 190);  // Range
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 38, 190);  // Aralik
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case _3_st_point:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x012D, &read_or_write_number);
        delay(time_after_communication);                                                    // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, non_positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[121], 110, 28);  // 3 st point
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 48, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[121], 110, 28);  // 3. point
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 55, 190);  // Aralik
        }
        tft.drawString("= - 15.0 - 15.0", 125, 190);

        tft.setFreeFont(FSSB9);
        tft.drawString("m/s", 239, 122);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        cursor = _2_st_point;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= -15.0 && read_or_write_number <= 15.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x012D, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case _3_st_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;
        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0135, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[122], 110, 28);  // 3 st value
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 28, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[122], 110, 28);  // 3. değer
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 38, 190);  // Aralik
        }
        tft.drawString("= 1.9999 - 0.0001", 104, 190);

        tft.setFreeFont(FSS9);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        cursor = _2_st_point;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0001 && read_or_write_number <= 1.9999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0135, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 28, 190);  // Range
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 38, 190);  // Aralik
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 28, 190);  // Range
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 38, 190);  // Aralik
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case _4_st_point:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x012F, &read_or_write_number);
        delay(time_after_communication);                                                    // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, non_positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[123], 110, 28);  // 4 st point
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 48, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[123], 110, 28);  // 4. point
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 55, 190);  // Aralik
        }
        tft.drawString("= - 15.0 - 15.0", 125, 190);

        tft.setFreeFont(FSSB9);
        tft.drawString("m/s", 239, 122);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        cursor = _2_st_point;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= -15.0 && read_or_write_number <= 15.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x012F, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 190);  // Range
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 55, 190);  // Aralik
            tft.drawString("= - 15.0 - 15.0", 125, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case _4_st_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;
        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0137, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[124], 110, 28);  // 4 st value
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 28, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[124], 110, 28);  // 4. değer
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 38, 190);  // Aralik
        }
        tft.drawString("= 1.9999 - 0.0001", 104, 190);

        tft.setFreeFont(FSS9);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = fine_calibration;
        cursor = _2_st_point;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0001 && read_or_write_number <= 1.9999) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0137, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 28, 190);  // Range
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 38, 190);  // Aralik
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 28, 190);  // Range
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 38, 190);  // Aralik
            tft.drawString("= 1.9999 - 0.0001", 104, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case output:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = settings;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(output_icon, 6, 75, left_aligned, 24, 25, 130, analog_output, alarms);

      break;

    case analog_output:

      if (opening_page == true) {
        opening_page = false;
        cursor = analog_out_1_mA;
        tft.fillScreen(0xc658);
        analog_out_2_mA_bar(high_light);
        analog_out_3_VDC_bar(high_light);
        centered_analog_output_bar(high_light);
        analog_out_1_mA_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = output;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > analog_out_3_VDC) cursor = analog_out_1_mA;  // kursoru baştaysa sona döndür
      if (cursor < analog_out_1_mA) cursor = analog_out_3_VDC;  // kursoru sondaysa başa döndür


      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == analog_out_1_mA) {
          if (previous_cursor == analog_out_2_mA) {
            analog_out_2_mA_bar(high_light);
          } else if (previous_cursor == analog_out_3_VDC) {
            analog_out_3_VDC_bar(high_light);
          }
          analog_out_1_mA_bar(low_light);
        } else if (cursor == analog_out_2_mA) {
          if (previous_cursor == analog_out_1_mA) {
            analog_out_1_mA_bar(high_light);
          } else if (previous_cursor == analog_out_3_VDC) {
            analog_out_3_VDC_bar(high_light);
          }
          analog_out_2_mA_bar(low_light);
        } else if (cursor == analog_out_3_VDC) {
          if (previous_cursor == analog_out_2_mA) {
            analog_out_2_mA_bar(high_light);
          } else if (previous_cursor == analog_out_1_mA) {
            analog_out_1_mA_bar(high_light);
          }
          analog_out_3_VDC_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case analog_out_1_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = function_analog_out_1_mA;
        tft.fillScreen(0xc658);
        output_type_bar(high_light);
        test_mode_bar(high_light);
        output_calibration_bar(high_light);
        centered_analog_output_1_mA_bar(high_light);
        function_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_output;
      } else if (button_state == press_enter) {
        button_state = idle;

        if (cursor != function_analog_out_1_mA) {
          screen_switch = cursor;
          opening_page = true;  // Analog output 1 için function seçeneğine gitme
        }

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > output_calibration_analog_out_1_mA) cursor = function_analog_out_1_mA;  // kursoru baştaysa sona döndür
      if (cursor < function_analog_out_1_mA) cursor = output_calibration_analog_out_1_mA;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == function_analog_out_1_mA) {
          if (previous_cursor == output_calibration_analog_out_1_mA) {
            output_calibration_bar(high_light);
          } else if (previous_cursor == output_type_analog_out_1_mA) {
            output_type_bar(high_light);
          }
          function_analog_out_1_mA_bar(low_light);
        } else if (cursor == output_type_analog_out_1_mA) {
          if (previous_cursor == function_analog_out_1_mA) {
            function_analog_out_1_mA_bar(high_light);
          } else if (previous_cursor == test_mode_analog_out_1_mA) {
            test_mode_bar(high_light);
          }
          output_type_bar(low_light);
        } else if (cursor == test_mode_analog_out_1_mA) {
          if (previous_cursor == output_type_analog_out_1_mA) {
            output_type_bar(high_light);
          } else if (previous_cursor == output_calibration_analog_out_1_mA) {
            output_calibration_bar(high_light);
          }
          test_mode_bar(low_light);
        } else if (cursor == output_calibration_analog_out_1_mA) {
          if (previous_cursor == test_mode_analog_out_1_mA) {
            test_mode_bar(high_light);
          } else if (previous_cursor == function_analog_out_1_mA) {
            function_analog_out_1_mA_bar(high_light);
          }
          output_calibration_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case analog_out_2_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = function_analog_out_2_mA;
        tft.fillScreen(0xc658);
        output_type_bar(high_light);
        test_mode_bar(high_light);
        output_calibration_bar(high_light);
        centered_analog_output_2_mA_bar(high_light);
        function_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_output;
      } else if (button_state == press_enter) {
        button_state = idle;

        screen_switch = cursor;
        opening_page = true;  // Analog output 1 için function seçeneğine gitme

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > output_calibration_analog_out_2_mA) cursor = function_analog_out_2_mA;  // kursoru baştaysa sona döndür
      if (cursor < function_analog_out_2_mA) cursor = output_calibration_analog_out_2_mA;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == function_analog_out_2_mA) {
          if (previous_cursor == output_calibration_analog_out_2_mA) {
            output_calibration_bar(high_light);
          } else if (previous_cursor == output_type_analog_out_2_mA) {
            output_type_bar(high_light);
          }
          function_bar(low_light);
        } else if (cursor == output_type_analog_out_2_mA) {
          if (previous_cursor == function_analog_out_2_mA) {
            function_bar(high_light);
          } else if (previous_cursor == test_mode_analog_out_2_mA) {
            test_mode_bar(high_light);
          }
          output_type_bar(low_light);
        } else if (cursor == test_mode_analog_out_2_mA) {
          if (previous_cursor == output_type_analog_out_2_mA) {
            output_type_bar(high_light);
          } else if (previous_cursor == output_calibration_analog_out_2_mA) {
            output_calibration_bar(high_light);
          }
          test_mode_bar(low_light);
        } else if (cursor == output_calibration_analog_out_2_mA) {
          if (previous_cursor == test_mode_analog_out_2_mA) {
            test_mode_bar(high_light);
          } else if (previous_cursor == function_analog_out_2_mA) {
            function_bar(high_light);
          }
          output_calibration_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case analog_out_3_VDC:

      if (opening_page == true) {
        opening_page = false;
        cursor = function_analog_out_3_VDC;
        tft.fillScreen(0xc658);
        output_type_bar(high_light);
        test_mode_bar(high_light);
        output_calibration_bar(high_light);
        centered_analog_output_3_VDC_bar(high_light);
        function_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_output;
      } else if (button_state == press_enter) {
        button_state = idle;

        screen_switch = cursor;
        opening_page = true;  // Analog output 1 için function seçeneğine gitme

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > output_calibration_analog_out_3_VDC) cursor = function_analog_out_3_VDC;  // kursoru baştaysa sona döndür
      if (cursor < function_analog_out_3_VDC) cursor = output_calibration_analog_out_3_VDC;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == function_analog_out_3_VDC) {
          if (previous_cursor == output_calibration_analog_out_3_VDC) {
            output_calibration_bar(high_light);
          } else if (previous_cursor == output_type_analog_out_3_VDC) {
            output_type_bar(high_light);
          }
          function_bar(low_light);
        } else if (cursor == output_type_analog_out_3_VDC) {
          if (previous_cursor == function_analog_out_3_VDC) {
            function_bar(high_light);
          } else if (previous_cursor == test_mode_analog_out_3_VDC) {
            test_mode_bar(high_light);
          }
          output_type_bar(low_light);
        } else if (cursor == test_mode_analog_out_3_VDC) {
          if (previous_cursor == output_type_analog_out_3_VDC) {
            output_type_bar(high_light);
          } else if (previous_cursor == output_calibration_analog_out_3_VDC) {
            output_calibration_bar(high_light);
          }
          test_mode_bar(low_light);
        } else if (cursor == output_calibration_analog_out_3_VDC) {
          if (previous_cursor == test_mode_analog_out_3_VDC) {
            test_mode_bar(high_light);
          } else if (previous_cursor == function_analog_out_3_VDC) {
            function_bar(high_light);
          }
          output_calibration_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case function_analog_out_1_mA:

      break;

    case function_analog_out_2_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = flow_type;
        tft.fillScreen(0xc658);
        temperature_type_bar(high_light);
        conductivity_type_bar(high_light);
        centered_funciton_bar(high_light);
        flow_type_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_2_mA;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > conductivity_type) cursor = flow_type;  // kursoru baştaysa sona döndür
      if (cursor < flow_type) cursor = conductivity_type;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == flow_type) {
          if (previous_cursor == conductivity_type) {
            conductivity_type_bar(high_light);
          } else if (previous_cursor == temperature_type) {
            temperature_type_bar(high_light);
          }
          flow_type_bar(low_light);
        } else if (cursor == temperature_type) {
          if (previous_cursor == flow_type) {
            flow_type_bar(high_light);
          } else if (previous_cursor == conductivity_type) {
            conductivity_type_bar(high_light);
          }
          temperature_type_bar(low_light);
        } else if (cursor == conductivity_type) {
          if (previous_cursor == temperature_type) {
            temperature_type_bar(high_light);
          } else if (previous_cursor == flow_type) {
            flow_type_bar(high_light);
          }
          conductivity_type_bar(low_light);
        }
        previous_cursor = cursor;
        draw_tick(76, 50, TFT_DARKGREEN);  // tick işareti
      }

      break;

    case function_analog_out_3_VDC:

      if (opening_page == true) {
        opening_page = false;
        cursor = flow_type;
        tft.fillScreen(0xc658);
        temperature_type_bar(high_light);
        conductivity_type_bar(high_light);
        centered_funciton_bar(high_light);
        flow_type_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_3_VDC;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > conductivity_type) cursor = flow_type;  // kursoru baştaysa sona döndür
      if (cursor < flow_type) cursor = conductivity_type;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == flow_type) {
          if (previous_cursor == conductivity_type) {
            conductivity_type_bar(high_light);
          } else if (previous_cursor == temperature_type) {
            temperature_type_bar(high_light);
          }
          flow_type_bar(low_light);
        } else if (cursor == temperature_type) {
          if (previous_cursor == flow_type) {
            flow_type_bar(high_light);
          } else if (previous_cursor == conductivity_type) {
            conductivity_type_bar(high_light);
          }
          temperature_type_bar(low_light);
        } else if (cursor == conductivity_type) {
          if (previous_cursor == temperature_type) {
            temperature_type_bar(high_light);
          } else if (previous_cursor == flow_type) {
            flow_type_bar(high_light);
          }
          conductivity_type_bar(low_light);
        }
        previous_cursor = cursor;
        draw_tick(76, 50, TFT_DARKGREEN);  // tick işareti
      }

      break;

    case output_type_analog_out_1_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = ma_4_20;
        tft.fillScreen(0xc658);
        ma_0_20_bar(high_light);
        ma_4_12_20_bar(high_light);
        centered_output_type_bar(high_light);
        ma_4_20_bar(low_light);

        tft.setFreeFont(FSSB9);
        tft.setTextColor(TFT_BLACK, 0xc658);
        if (language == English) {
          tft.drawString(english[88], 80, 162);  // only for flowmeter
        } else {
          tft.drawString(turkish[88], 76, 162);  // yalnız akis icindir
        }

        modbus_master.read_or_write(1, READ_HOLDING, 0x0111, &analog_out_1_type);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_analog_out_1_type();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_1_mA;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_analog_out_1_type();

        if (cursor == ma_4_20) analog_out_1_type = 1;
        else if (cursor == ma_4_12_20) analog_out_1_type = 2;
        else if (cursor == ma_0_20) analog_out_1_type = 3;

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0111, &analog_out_1_type);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_analog_out_1_type();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > ma_0_20) cursor = ma_4_20;  // kursoru baştaysa sona döndür
      if (cursor < ma_4_20) cursor = ma_0_20;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == ma_4_20) {
          if (previous_cursor == ma_0_20) {
            ma_0_20_bar(high_light);
          } else if (previous_cursor == ma_4_12_20) {
            ma_4_12_20_bar(high_light);
          }
          ma_4_20_bar(low_light);
        } else if (cursor == ma_4_12_20) {
          if (previous_cursor == ma_4_20) {
            ma_4_20_bar(high_light);
          } else if (previous_cursor == ma_0_20) {
            ma_0_20_bar(high_light);
          }
          ma_4_12_20_bar(low_light);
        } else if (cursor == ma_0_20) {
          if (previous_cursor == ma_4_12_20) {
            ma_4_12_20_bar(high_light);
          } else if (previous_cursor == ma_4_20) {
            ma_4_20_bar(high_light);
          }
          ma_0_20_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_analog_out_1_type();
      }

      break;

    case output_type_analog_out_2_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = _ma_4_20;
        tft.fillScreen(0xc658);
        _ma_4_12_20_bar(high_light);
        centered_output_type_bar(high_light);
        _ma_4_20_bar(low_light);

        analog_out_2_type = EEPROM.readUShort(analog_out_2_type_address);

        write_tick_for_analog_out_2_type();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_2_mA;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_analog_out_2_type();

        if (cursor == _ma_4_20) analog_out_2_type = _ma_4_20;
        else if (cursor == _ma_4_12_20) analog_out_2_type = _ma_4_12_20;

        EEPROM.writeUShort(analog_out_2_type_address, analog_out_2_type);
        EEPROM.commit();  // kaydet

        write_tick_for_analog_out_2_type();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > _ma_4_12_20) cursor = _ma_4_20;  // kursoru baştaysa sona döndür
      if (cursor < _ma_4_20) cursor = _ma_4_12_20;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == _ma_4_20) {
          _ma_4_12_20_bar(high_light);
          _ma_4_20_bar(low_light);
        } else if (cursor == _ma_4_12_20) {
          _ma_4_20_bar(high_light);
          _ma_4_12_20_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_analog_out_2_type();
      }

      break;

    case output_type_analog_out_3_VDC:

      if (opening_page == true) {
        opening_page = false;
        cursor = v_0_10;
        tft.fillScreen(0xc658);
        v_0_5_10_bar(high_light);
        centered_output_type_bar(high_light);
        v_0_10_bar(low_light);

        analog_out_3_type = EEPROM.readUShort(analog_out_3_type_address);

        write_tick_for_analog_out_3_type();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_3_VDC;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_analog_out_3_type();

        if (cursor == v_0_10) analog_out_3_type = v_0_10;
        else if (cursor == v_0_5_10) analog_out_3_type = v_0_5_10;

        EEPROM.writeUShort(analog_out_3_type_address, analog_out_3_type);
        EEPROM.commit();  // kaydet

        write_tick_for_analog_out_3_type();
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > v_0_5_10) cursor = v_0_10;  // kursoru baştaysa sona döndür
      if (cursor < v_0_10) cursor = v_0_5_10;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == v_0_10) {
          v_0_5_10_bar(high_light);
          v_0_10_bar(low_light);
        } else if (cursor == v_0_5_10) {
          v_0_10_bar(high_light);
          v_0_5_10_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_analog_out_3_type();
      }

      break;

    case test_mode_analog_out_1_mA:

      float test_value;

      if (opening_page == true) {
        opening_page = false;
        cursor = ma_4;
        tft.fillScreen(0xc658);
        ma_20_bar(high_light);
        ma_12_bar(high_light);
        centered_test_mode_bar(high_light);
        ma_4_bar(low_light);

        tft.setFreeFont(FSSB9);
        tft.setTextColor(TFT_BLACK, 0xc658);
        if (language == English) {
          tft.drawString(english[88], 80, 162);  // only for flowmeter
        } else {
          tft.drawString(turkish[88], 76, 162);  // yalnız akis icindir
        }

        analog_out_1_type = 1;  // tick işareti için
        test_value = 4.0;
        modbus_master.read_or_write(1, WRITE_MULTI, 0x0400, &test_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_analog_out_1_type();
      }

      if (button_state == press_esc) {
        button_state = idle;

        test_value = 0.0;
        modbus_master.read_or_write(1, WRITE_MULTI, 0x0400, &test_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre
        opening_page = true;
        screen_switch = analog_out_1_mA;  // ayarlar sayfasına git

      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_analog_out_1_type();

        if (cursor == ma_4) {
          analog_out_1_type = 1;  // tick işareti için
          test_value = 4.0;
        } else if (cursor == ma_12) {
          analog_out_1_type = 2;  // tick işareti için
          test_value = 12.0;
        } else if (cursor == ma_20) {
          analog_out_1_type = 3;  // tick işareti için
          test_value = 20.0;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0400, &test_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_analog_out_1_type();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > ma_20) cursor = ma_4;  // kursoru baştaysa sona döndür
      if (cursor < ma_4) cursor = ma_20;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == ma_4) {
          if (previous_cursor == ma_20) {
            ma_20_bar(high_light);
          } else if (previous_cursor == ma_12) {
            ma_12_bar(high_light);
          }
          ma_4_bar(low_light);
        } else if (cursor == ma_12) {
          if (previous_cursor == ma_4) {
            ma_4_bar(high_light);
          } else if (previous_cursor == ma_20) {
            ma_20_bar(high_light);
          }
          ma_12_bar(low_light);
        } else if (cursor == ma_20) {
          if (previous_cursor == ma_12) {
            ma_12_bar(high_light);
          } else if (previous_cursor == ma_4) {
            ma_4_bar(high_light);
          }
          ma_20_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_analog_out_1_type();
      }

      break;

    case test_mode_analog_out_2_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = ma_4;
        tft.fillScreen(0xc658);
        ma_20_bar(high_light);
        ma_12_bar(high_light);
        centered_test_mode_bar(high_light);
        ma_4_bar(low_light);

        tft.setFreeFont(FSSB9);
        tft.setTextColor(TFT_BLACK, 0xc658);
        if (language == English) {
          tft.drawString(english[88], 80, 162);  // only for flowmeter
        } else {
          tft.drawString(turkish[88], 76, 162);  // yalnız akis icindir
        }

        analog_out_2_type = ma_4;  // tick işareti için
        MCP.setValue(lower_limit_mA);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        analog_out_2_type = EEPROM.readUShort(analog_out_2_type_address);  // test modundan çıkarken hangi çıkış tipi seçiliyse onunla devam etmesi için
        screen_switch = analog_out_2_mA;                                   // ayarlar sayfasına git

      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_analog_out_2_test();

        if (cursor == ma_4) {
          analog_out_2_type = ma_4;      // tick işareti için
          MCP.setValue(lower_limit_mA);  // 4 ma değeri
        } else if (cursor == ma_12) {
          analog_out_2_type = ma_12;  // tick işareti için
          MCP.setValue(1468);         // 12 ma değeri
        } else if (cursor == ma_20) {
          analog_out_2_type = ma_20;  // tick işareti için
          MCP.setValue(2445);         // 20 ma değeri
        }

        write_tick_for_analog_out_2_test();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > ma_20) cursor = ma_4;  // kursoru baştaysa sona döndür
      if (cursor < ma_4) cursor = ma_20;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == ma_4) {
          if (previous_cursor == ma_20) {
            ma_20_bar(high_light);
          } else if (previous_cursor == ma_12) {
            ma_12_bar(high_light);
          }
          ma_4_bar(low_light);
        } else if (cursor == ma_12) {
          if (previous_cursor == ma_4) {
            ma_4_bar(high_light);
          } else if (previous_cursor == ma_20) {
            ma_20_bar(high_light);
          }
          ma_12_bar(low_light);
        } else if (cursor == ma_20) {
          if (previous_cursor == ma_12) {
            ma_12_bar(high_light);
          } else if (previous_cursor == ma_4) {
            ma_4_bar(high_light);
          }
          ma_20_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_analog_out_2_test();
      }

      break;

    case test_mode_analog_out_3_VDC:

      if (opening_page == true) {
        opening_page = false;
        cursor = v_0_10;
        tft.fillScreen(0xc658);
        v_5_bar(high_light);
        centered_output_type_bar(high_light);
        v_10_bar(low_light);

        // dacWrite(DAC_2_PIN_V, upper_limit_VDC / 2);  // 5 v değeri
        analog_out_3_type = v_0_10;
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_3_VDC;  // ayarlar sayfasına git
        analog_out_3_type = EEPROM.readUShort(analog_out_3_type_address);
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_analog_out_3_type();

        if (cursor == v_0_10) analog_out_3_type = v_0_10;
        else if (cursor == v_0_5_10) analog_out_3_type = v_0_5_10;

        if (cursor == v_0_10) {
          analog_out_3_type = v_0_10;                  // tick işareti için
          // dacWrite(DAC_2_PIN_V, upper_limit_VDC / 2);  // 5 v değeri
        } else if (cursor == v_0_5_10) {
          analog_out_3_type = v_0_5_10;            // tick işareti için
          // dacWrite(DAC_2_PIN_V, upper_limit_VDC);  // 10 v değeri
        }

        write_tick_for_analog_out_3_type();
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > v_0_5_10) cursor = v_0_10;  // kursoru baştaysa sona döndür
      if (cursor < v_0_10) cursor = v_0_5_10;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == v_0_10) {
          v_10_bar(high_light);
          v_5_bar(low_light);
        } else if (cursor == v_0_5_10) {
          v_5_bar(high_light);
          v_10_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_analog_out_3_type();
      }

      break;

    case output_calibration_analog_out_1_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = set_lower_analog_out_1_mA;
        tft.fillScreen(0xc658);
        adjust_20_ma_bar(high_light);
        centered_output_calibration_bar(high_light);
        adjust_4_ma_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_1_mA;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > set_upper_analog_out_1_mA) cursor = set_lower_analog_out_1_mA;  // kursoru baştaysa sona döndür
      if (cursor < set_lower_analog_out_1_mA) cursor = set_upper_analog_out_1_mA;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == set_lower_analog_out_1_mA) {
          adjust_20_ma_bar(high_light);
          adjust_4_ma_bar(low_light);
        } else if (cursor == set_upper_analog_out_1_mA) {
          adjust_4_ma_bar(high_light);
          adjust_20_ma_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case output_calibration_analog_out_2_mA:

      if (opening_page == true) {
        opening_page = false;
        cursor = set_lower_analog_out_2_mA;
        tft.fillScreen(0xc658);
        adjust_20_ma_bar(high_light);
        centered_output_calibration_bar(high_light);
        adjust_4_ma_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_2_mA;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > set_upper_analog_out_2_mA) cursor = set_lower_analog_out_2_mA;  // kursoru baştaysa sona döndür
      if (cursor < set_lower_analog_out_2_mA) cursor = set_upper_analog_out_2_mA;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == set_lower_analog_out_2_mA) {
          adjust_20_ma_bar(high_light);
          adjust_4_ma_bar(low_light);
        } else if (cursor == set_upper_analog_out_2_mA) {
          adjust_4_ma_bar(high_light);
          adjust_20_ma_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case output_calibration_analog_out_3_VDC:

      if (opening_page == true) {
        opening_page = false;
        cursor = set_lower_analog_out_3_VDC;
        tft.fillScreen(0xc658);
        adjust_10_V_bar(high_light);
        centered_output_calibration_bar(high_light);
        adjust_0_V_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = analog_out_3_VDC;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > set_upper_analog_out_3_VDC) cursor = set_lower_analog_out_3_VDC;  // kursoru baştaysa sona döndür
      if (cursor < set_lower_analog_out_3_VDC) cursor = set_upper_analog_out_3_VDC;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == set_lower_analog_out_3_VDC) {
          adjust_10_V_bar(high_light);
          adjust_0_V_bar(low_light);
        } else if (cursor == set_upper_analog_out_3_VDC) {
          adjust_0_V_bar(high_light);
          adjust_10_V_bar(low_light);
        }
        previous_cursor = cursor;
      }

      break;

    case set_lower_analog_out_1_mA:

      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = 4.0;  // kalibrasyon kayıklığını görmek için Iout test modu olarak 4 mA da başlat
        modbus_master.read_or_write(1, WRITE_MULTI, 0x0400, &read_or_write_number);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        modbus_master.read_or_write(1, READ_HOLDING, 0x0200, &read_or_write_number);    // 4 mA kalibrasyon değerini oku
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        // digit = 3;  // cursor başlangıç digit

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[104], 90, 28);  // adjust 4 ma
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 68, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[104], 89, 28);  // ayarla 4 ma
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 79, 190);  // Aralik
        }
        tft.drawString("= 3.5 - 4.5", 145, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        read_or_write_number = 0.0;                                                  // kalibrasyon kayıklığını görmek için Iout test modu olarak 4 mA da başlat
        modbus_master.read_or_write(1, WRITE_MULTI, 0x0400, &read_or_write_number);  // test modundan çıkış yapmak için 0 yaz
        delay(time_after_communication);

        opening_page = true;
        screen_switch = output_calibration_analog_out_1_mA;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 3.5 && read_or_write_number <= 4.5) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0200, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 68, 190);  // Range
            tft.drawString("= 3.5 - 4.5", 145, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 79, 190);  // Aralik
            tft.drawString("= 3.5 - 4.5", 145, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 73, 190);  // Range
            tft.drawString("= 3.5 - 4.5", 145, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 79, 190);  // Aralik
            tft.drawString("= 3.5 - 4.5", 145, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
        // if (digit > 7) digit = 3;  // cursor başlangıç digit
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case set_upper_analog_out_1_mA:

      if (opening_page == true) {
        opening_page = false;


        read_or_write_number = 20.0;  // kalibrasyon kayıklığını görmek için Iout test modu olarak 4 mA da başlat
        modbus_master.read_or_write(1, WRITE_MULTI, 0x0400, &read_or_write_number);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        modbus_master.read_or_write(1, READ_HOLDING, 0x0202, &read_or_write_number);    // 4 mA kalibrasyon değerini oku
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        // digit = 2;  // cursor başlangıç digit

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[105], 90, 28);  // adjust 20 ma
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 68, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[105], 82, 28);  // ayarla 20 ma
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 75, 190);  // Aralik
        }
        tft.drawString("= 18 - 22", 145, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        read_or_write_number = 0.0;                                                  // kalibrasyon kayıklığını görmek için Iout test modu olarak 4 mA da başlat
        modbus_master.read_or_write(1, WRITE_MULTI, 0x0400, &read_or_write_number);  // test modundan çıkış yapmak için 0 yaz
        delay(time_after_communication);

        opening_page = true;
        screen_switch = output_calibration_analog_out_1_mA;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 18 && read_or_write_number <= 22) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0202, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 68, 190);  // Range
            tft.drawString("= 18 - 22", 145, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 75, 190);  // Aralik
            tft.drawString("= 18 - 22", 145, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 68, 190);  // Range
            tft.drawString("= 18 - 22", 145, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 75, 190);  // Aralik
            tft.drawString("= 18 - 22", 145, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
        // if (digit > 7) digit = 2;  // cursor başlangıç digit
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case set_lower_analog_out_2_mA:

      if (opening_page == true) {
        opening_page = false;

        calibration_value = lower_limit_mA;

        MCP.setValue(calibration_value);

        tft.fillScreen(0xc658);
        tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);       // yumuşak köşeli beyaz arka plan
        tft.drawWideLine(260, 70, 60, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS24);

        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 200, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[104], 90, 28);  // adjust 4 ma
          tft.setFreeFont(FSS12);
        } else if (language == Turkish) {
          tft.drawString(turkish[104], 88, 28);  // ayarla 4 ma
          tft.setFreeFont(FSS12);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = output_calibration_analog_out_2_mA;
      } else if (button_state == press_enter) {
        button_state = idle;

        lower_limit_mA = calibration_value;

        EEPROM.writeUShort(lower_limit_mA_address, lower_limit_mA);

        EEPROM.commit();  // kaydet

        tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
        tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
        tft.setFreeFont(FSSB9);
        if (language == English) {
          tft.drawString(english[2], 135, 162);  // done !
          tft.setTextColor(TFT_GREY, TFT_WHITE);
          tft.setFreeFont(FSS12);
        } else if (language == Turkish) {
          tft.drawString(turkish[2], 112, 162);  // onaylandi !
          tft.setTextColor(TFT_GREY, TFT_WHITE);
          tft.setFreeFont(FSS12);
        }
        delay(1000);
        tft.drawString("                            ", 75, 162);

      } else if (button_state == press_up) {
        button_state = idle;

        calibration_value++;
        if (calibration_value == 65535) calibration_value = 0;

        MCP.setValue(calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 200, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

      } else if (button_state == press_down) {
        button_state = idle;

        calibration_value--;
        if (calibration_value == 65535) calibration_value = 0;

        MCP.setValue(calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 200, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama
      }

      break;

    case set_upper_analog_out_2_mA:

      if (opening_page == true) {
        opening_page = false;

        calibration_value = upper_limit_mA;

        MCP.setValue(calibration_value);

        tft.fillScreen(0xc658);
        tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);       // yumuşak köşeli beyaz arka plan
        tft.drawWideLine(260, 70, 60, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS24);

        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 216, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[105], 90, 28);  // adjust 4 ma
          tft.setFreeFont(FSS12);
        } else if (language == Turkish) {
          tft.drawString(turkish[105], 86, 28);  // ayarla 20 ma
          tft.setFreeFont(FSS12);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = output_calibration_analog_out_2_mA;
      } else if (button_state == press_enter) {
        button_state = idle;

        upper_limit_mA = calibration_value;

        EEPROM.writeUShort(upper_limit_mA_address, upper_limit_mA);

        EEPROM.commit();  // kaydet

        tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
        tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
        tft.setFreeFont(FSSB9);
        if (language == English) {
          tft.drawString(english[2], 135, 162);  // done !
          tft.setTextColor(TFT_GREY, TFT_WHITE);
          tft.setFreeFont(FSS12);
        } else if (language == Turkish) {
          tft.drawString(turkish[2], 112, 162);  // onaylandi !
          tft.setTextColor(TFT_GREY, TFT_WHITE);
          tft.setFreeFont(FSS12);
        }
        delay(1000);
        tft.drawString("                            ", 75, 162);

      } else if (button_state == press_up) {
        button_state = idle;

        calibration_value++;
        if (calibration_value == 65535) calibration_value = 0;

        MCP.setValue(calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 216, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

      } else if (button_state == press_down) {
        button_state = idle;

        calibration_value--;
        if (calibration_value == 65535) calibration_value = 0;

        MCP.setValue(calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 216, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama
      }

      break;

    case set_lower_analog_out_3_VDC:

      if (opening_page == true) {
        opening_page = false;

        calibration_value = lower_limit_VDC;

        // dacWrite(DAC_2_PIN_V, calibration_value);

        tft.fillScreen(0xc658);
        tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);       // yumuşak köşeli beyaz arka plan
        tft.drawWideLine(260, 70, 60, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS24);

        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 175, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[106], 100, 28);  // adjust 0 VDC
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 72, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[106], 101, 28);  // ayarla 0 VDC
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 80, 190);  // Aralik
        }
        tft.drawString("= 0 - 255", 150, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = output_calibration_analog_out_3_VDC;
      } else if (button_state == press_enter) {
        button_state = idle;

        if (calibration_value >= 0 && calibration_value <= 255) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          lower_limit_VDC = calibration_value;

          EEPROM.writeUShort(lower_limit_VDC_address, lower_limit_VDC);

          EEPROM.commit();  // kaydet

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 72, 190);  // Range
            tft.drawString("= 0 - 255", 150, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 80, 190);  // Aralik
            tft.drawString("= 0 - 255", 150, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 72, 190);  // Range
            tft.drawString("= 0 - 255", 150, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 80, 190);  // Aralik
            tft.drawString("= 0 - 255", 150, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        calibration_value++;
        if (calibration_value == 65535) calibration_value = 0;
        else if (calibration_value > 255) calibration_value = 255;

        // dacWrite(DAC_2_PIN_V, calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 175, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

      } else if (button_state == press_down) {
        button_state = idle;

        calibration_value--;
        if (calibration_value == 65535) calibration_value = 0;
        else if (calibration_value > 255) calibration_value = 255;

        // dacWrite(DAC_2_PIN_V, calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 175, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama
      }

      break;

    case set_upper_analog_out_3_VDC:

      if (opening_page == true) {
        opening_page = false;

        calibration_value = upper_limit_VDC;

        // dacWrite(DAC_2_PIN_V, calibration_value);

        tft.fillScreen(0xc658);
        tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);       // yumuşak köşeli beyaz arka plan
        tft.drawWideLine(260, 70, 60, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS24);

        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 195, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[107], 95, 28);  // adjust 10 VDC
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 72, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[107], 95, 28);  // ayarla 10 V
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 80, 190);  // Aralik
        }
        tft.drawString("= 0 - 255", 150, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = output_calibration_analog_out_3_VDC;
      } else if (button_state == press_enter) {
        button_state = idle;

        if (calibration_value >= 0 && calibration_value <= 255) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          upper_limit_VDC = calibration_value;

          EEPROM.writeUShort(upper_limit_VDC_address, upper_limit_VDC);

          EEPROM.commit();  // kaydet

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 72, 190);  // Range
            tft.drawString("= 0 - 255", 150, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 80, 190);  // Aralik
            tft.drawString("= 0 - 255", 150, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 72, 190);  // Range
            tft.drawString("= 0 - 255", 150, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 80, 190);  // Aralik
            tft.drawString("= 0 - 255", 150, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        calibration_value++;
        if (calibration_value == 65535) calibration_value = 0;
        else if (calibration_value > 255) calibration_value = 255;

        // dacWrite(DAC_2_PIN_V, calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 195, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama

      } else if (button_state == press_down) {
        button_state = idle;

        calibration_value--;
        if (calibration_value == 65535) calibration_value = 0;
        else if (calibration_value > 255) calibration_value = 255;

        // dacWrite(DAC_2_PIN_V, calibration_value);

        tft.setFreeFont(FSS24);
        sprintf(calibration_value_buffer, "%5d", calibration_value);
        tft.setTextDatum(TR_DATUM);                                 // Sağa yaslı hizalama
        tft.drawString(calibration_value_buffer, 195, 110, FONT6);  // Sayıyı ekrana yazdır
        tft.setTextDatum(TL_DATUM);                                 // Sola yaslı hizalama
      }

      break;

    case digital_output:

      if (opening_page == true) {
        opening_page = false;
        cursor = digital_out_1;
        tft.fillScreen(0xc658);
        digital_out_2_bar(high_light);
        digital_out_3_bar(high_light);
        centered_digital_output_bar(high_light);
        digital_out_1_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = output;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > digital_out_3) cursor = digital_out_1;  // kursoru baştaysa sona döndür
      if (cursor < digital_out_1) cursor = digital_out_3;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == digital_out_1) {
          if (previous_cursor == digital_out_2) {
            digital_out_2_bar(high_light);
          } else if (previous_cursor == digital_out_3) {
            digital_out_3_bar(high_light);
          }
          digital_out_1_bar(low_light);
        } else if (cursor == digital_out_2) {
          if (previous_cursor == digital_out_1) {
            digital_out_1_bar(high_light);
          } else if (previous_cursor == digital_out_3) {
            digital_out_3_bar(high_light);
          }
          digital_out_2_bar(low_light);
        } else if (cursor == digital_out_3) {
          if (previous_cursor == digital_out_1) {
            digital_out_1_bar(high_light);
          } else if (previous_cursor == digital_out_2) {
            digital_out_2_bar(high_light);
          }
          digital_out_3_bar(low_light);
        }
        previous_cursor = cursor;
      }
      break;

    case digital_out_1:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = digital_output;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(output_icon, 55, 75, left_aligned, 152, 153, out_functions, pulse_settings);


      break;

    case digital_out_2:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = digital_output;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(65);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == high_flow_alarm) {
          D_out_2_alarm_state = 4;
          tick_location = 1;
        } else if (cursor == low_flow_alarm) {
          D_out_2_alarm_state = 8;
          tick_location = 2;
        } else if (cursor == conductivity) {
          D_out_2_alarm_state = 1;
          tick_location = 3;
        } else if (cursor == system_alarm) {
          D_out_2_alarm_state = 2;
          tick_location = 4;
        } else if (cursor == direction) {
          D_out_2_alarm_state = 16;
          tick_location = 5;
        }

        EEPROM.writeUShort(D_out_2_alarm_state_address, D_out_2_alarm_state);

        EEPROM.commit();  // kaydet

        write_tick(65);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        tick_location = 0;

        if (D_out_2_alarm_state == 4) tick_location = 1;
        else if (D_out_2_alarm_state == 8) tick_location = 2;
        else if (D_out_2_alarm_state == 1) tick_location = 3;
        else if (D_out_2_alarm_state == 2) tick_location = 4;
        else if (D_out_2_alarm_state == 16) tick_location = 5;
      }

      bar_select(output_icon, 56, 100, middle_aligned, 62, 63, 64, 65, 66, high_flow_alarm, direction);


      break;

    case digital_out_3:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = digital_output;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(65);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == high_flow_alarm) {
          D_out_3_alarm_state = 4;
          tick_location = 1;
        } else if (cursor == low_flow_alarm) {
          D_out_3_alarm_state = 8;
          tick_location = 2;
        } else if (cursor == conductivity) {
          D_out_3_alarm_state = 1;
          tick_location = 3;
        } else if (cursor == system_alarm) {
          D_out_3_alarm_state = 2;
          tick_location = 4;
        } else if (cursor == direction) {
          D_out_3_alarm_state = 16;
          tick_location = 5;
        }

        EEPROM.writeUShort(D_out_3_alarm_state_address, D_out_3_alarm_state);

        EEPROM.commit();  // kaydet

        write_tick(65);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        tick_location = 0;

        if (D_out_3_alarm_state == 4) tick_location = 1;
        else if (D_out_3_alarm_state == 8) tick_location = 2;
        else if (D_out_3_alarm_state == 1) tick_location = 3;
        else if (D_out_3_alarm_state == 2) tick_location = 4;
        else if (D_out_3_alarm_state == 16) tick_location = 5;
      }

      bar_select(output_icon, 57, 100, middle_aligned, 62, 63, 64, 65, 66, high_flow_alarm, direction);

      break;

    case out_functions:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = digital_out_1;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(output_icon, 152, 45, left_aligned, 146, 147, high_alarm_out_fnc, low_alarm_out_fnc);


      break;

    case pulse_settings:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = digital_out_1;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(output_icon, 153, 75, left_aligned, 148, 149, 150, 151, pulse_factor, pulse_test);

      break;

    case high_alarm_out_fnc:

      static uint16_t high_alarm_out_fnc_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = out_functions;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        if (cursor == pulse_frequency) {
          opening_page = true;
          screen_switch = pulse_frequency;  // ayarlar sayfasına git
          break;
        }

        delete_tick(65);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == high_flow_alarm) {
          high_alarm_out_fnc_register = 2;
          tick_location = 2;
        } else if (cursor == low_flow_alarm) {
          high_alarm_out_fnc_register = 3;
          tick_location = 3;
        } else if (cursor == conductivity) {
          high_alarm_out_fnc_register = 5;
          tick_location = 4;
        } else if (cursor == system_alarm) {
          high_alarm_out_fnc_register = 6;
          tick_location = 5;
        } else if (cursor == direction) {
          high_alarm_out_fnc_register = 4;
          tick_location = 6;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0112, &high_alarm_out_fnc_register);
        delay(time_after_communication);

        write_tick(65);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        tick_location = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0112, &high_alarm_out_fnc_register);
        delay(time_after_communication);

        if (high_alarm_out_fnc_register == 2) tick_location = 2;
        else if (high_alarm_out_fnc_register == 3) tick_location = 3;
        else if (high_alarm_out_fnc_register == 4) tick_location = 6;
        else if (high_alarm_out_fnc_register == 5) tick_location = 4;
        else if (high_alarm_out_fnc_register == 6) tick_location = 5;
      }

      bar_select(output_icon, 146, 100, middle_aligned, 61, 62, 63, 64, 65, 66, pulse_frequency, direction);

      break;

    case low_alarm_out_fnc:

      static uint16_t low_alarm_out_fnc_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = out_functions;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(65);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == high_flow_alarm) {
          low_alarm_out_fnc_register = 2;
          tick_location = 1;
        } else if (cursor == low_flow_alarm) {
          low_alarm_out_fnc_register = 0;
          tick_location = 2;
        } else if (cursor == conductivity) {
          low_alarm_out_fnc_register = 3;
          tick_location = 3;
        } else if (cursor == system_alarm) {
          low_alarm_out_fnc_register = 4;
          tick_location = 4;
        } else if (cursor == direction) {
          low_alarm_out_fnc_register = 1;
          tick_location = 5;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0143, &low_alarm_out_fnc_register);
        delay(time_after_communication);

        write_tick(65);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x0143, &low_alarm_out_fnc_register);
        delay(time_after_communication);

        if (low_alarm_out_fnc_register == 0) tick_location = 2;
        else if (low_alarm_out_fnc_register == 1) tick_location = 5;
        else if (low_alarm_out_fnc_register == 2) tick_location = 1;
        else if (low_alarm_out_fnc_register == 3) tick_location = 3;
        else if (low_alarm_out_fnc_register == 4) tick_location = 4;
      }

      bar_select(output_icon, 147, 100, middle_aligned, 62, 63, 64, 65, 66, high_flow_alarm, direction);

      break;

    case pulse_frequency:

      if (opening_page == true) {
        opening_page = false;
        cursor = pulse;
        tft.fillScreen(0xc658);
        frequency_bar(high_light);
        centered_pulse_frequency_bar(high_light);
        pulse_bar(low_light);

        modbus_master.read_or_write(1, READ_HOLDING, 0x0112, &digital_out_selection);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_pulse_freqency();
      }

      if (cursor > frequency) cursor = pulse;  // kursoru baştaysa sona döndür
      if (cursor < pulse) cursor = frequency;  // kursoru sondaysa başa döndür
      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = high_alarm_out_fnc;  // ayarlar sayfasına git
        break;
      }
      if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_pulse_freqency();

        if (cursor == pulse) digital_out_selection = 1;
        else if (cursor == frequency) digital_out_selection = 0;

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0112, &digital_out_selection);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        write_tick_for_pulse_freqency();
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == pulse) {
          frequency_bar(high_light);
          pulse_bar(low_light);
        } else if (cursor == frequency) {
          pulse_bar(high_light);
          frequency_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_pulse_freqency();
      }

      break;

    case pulse_factor:
    case _pulse_factor:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        // total unit oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x010F, &total_unit_value);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre

        // pulse factor oku
        modbus_master.read_or_write(1, READ_HOLDING, 0x0147, &read_or_write_number);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        if (total_unit_value == 3 || total_unit_value == 7 || total_unit_value == 11 || total_unit_value == 15 || total_unit_value == 19 || total_unit_value == 23 || total_unit_value == 27 || total_unit_value == 31) read_or_write_number = read_or_write_number * 1;
        else if (total_unit_value == 2 || total_unit_value == 6 || total_unit_value == 10 || total_unit_value == 14 || total_unit_value == 18 || total_unit_value == 22 || total_unit_value == 26 || total_unit_value == 30) read_or_write_number = read_or_write_number * 10;
        else if (total_unit_value == 1 || total_unit_value == 5 || total_unit_value == 9 || total_unit_value == 13 || total_unit_value == 17 || total_unit_value == 21 || total_unit_value == 25 || total_unit_value == 29) read_or_write_number = read_or_write_number * 100;
        else if (total_unit_value == 0 || total_unit_value == 4 || total_unit_value == 8 || total_unit_value == 12 || total_unit_value == 16 || total_unit_value == 20 || total_unit_value == 24 || total_unit_value == 28) read_or_write_number = read_or_write_number * 1000;

        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSS9);
        if (total_unit_value >= 0 && total_unit_value <= 3) {
          tft.drawString("/ m3", 239, 121);
        } else if (total_unit_value >= 4 && total_unit_value <= 7) {
          tft.drawString("/ L", 239, 121);
        } else if (total_unit_value >= 8 && total_unit_value <= 11) {
          tft.drawString("/ ft3", 239, 121);
        } else if (total_unit_value >= 12 && total_unit_value <= 15) {
          tft.drawString("/ ukgal", 239, 121);
        } else if (total_unit_value >= 16 && total_unit_value <= 19) {
          tft.drawString("/ usgal", 239, 121);
        } else if (total_unit_value >= 20 && total_unit_value <= 23) {
          tft.drawString("/ kg", 239, 121);
        } else if (total_unit_value >= 24 && total_unit_value <= 27) {
          tft.drawString("/ t", 239, 121);
        } else if (total_unit_value >= 28 && total_unit_value <= 31) {
          tft.drawString("/ Lb", 239, 121);
        }

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[148], 85, 28);  // Pulse factor
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 29, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[148], 75, 28);  // Pulse faktoru
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 40, 190);  // Aralik
        }
        tft.drawString("= 1000000 - 0.001", 106, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;

        if (previous_screen_switch == quick_setup) {
          screen_switch = quick_setup;
          previous_screen_switch = 0;
        } else {
          screen_switch = pulse_settings;
        }

        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.001 && read_or_write_number <= 1000000) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          if (read_or_write_number >= 0.001 && read_or_write_number <= 1000) {
            read_or_write_number = read_or_write_number / 1;
            if (total_unit_value == 0 || total_unit_value == 1 || total_unit_value == 2 || total_unit_value == 3) total_unit_value = 3;
            else if (total_unit_value == 4 || total_unit_value == 5 || total_unit_value == 6 || total_unit_value == 7) total_unit_value = 7;
            else if (total_unit_value == 8 || total_unit_value == 9 || total_unit_value == 10 || total_unit_value == 11) total_unit_value = 11;
            else if (total_unit_value == 12 || total_unit_value == 13 || total_unit_value == 14 || total_unit_value == 15) total_unit_value = 15;
            else if (total_unit_value == 16 || total_unit_value == 17 || total_unit_value == 18 || total_unit_value == 19) total_unit_value = 19;
            else if (total_unit_value == 20 || total_unit_value == 21 || total_unit_value == 22 || total_unit_value == 23) total_unit_value = 23;
            else if (total_unit_value == 24 || total_unit_value == 25 || total_unit_value == 26 || total_unit_value == 27) total_unit_value = 27;
            else if (total_unit_value == 28 || total_unit_value == 29 || total_unit_value == 30 || total_unit_value == 31) total_unit_value = 31;
          } else if (read_or_write_number > 1000 && read_or_write_number <= 10000) {
            read_or_write_number = read_or_write_number / 10;
            if (total_unit_value == 0 || total_unit_value == 1 || total_unit_value == 2 || total_unit_value == 3) total_unit_value = 2;
            else if (total_unit_value == 4 || total_unit_value == 5 || total_unit_value == 6 || total_unit_value == 7) total_unit_value = 6;
            else if (total_unit_value == 8 || total_unit_value == 9 || total_unit_value == 10 || total_unit_value == 11) total_unit_value = 10;
            else if (total_unit_value == 12 || total_unit_value == 13 || total_unit_value == 14 || total_unit_value == 15) total_unit_value = 14;
            else if (total_unit_value == 16 || total_unit_value == 17 || total_unit_value == 18 || total_unit_value == 19) total_unit_value = 18;
            else if (total_unit_value == 20 || total_unit_value == 21 || total_unit_value == 22 || total_unit_value == 23) total_unit_value = 22;
            else if (total_unit_value == 24 || total_unit_value == 25 || total_unit_value == 26 || total_unit_value == 27) total_unit_value = 26;
            else if (total_unit_value == 28 || total_unit_value == 29 || total_unit_value == 30 || total_unit_value == 31) total_unit_value = 30;

          } else if (read_or_write_number > 10000 && read_or_write_number <= 100000) {
            read_or_write_number = read_or_write_number / 100;
            if (total_unit_value == 0 || total_unit_value == 1 || total_unit_value == 2 || total_unit_value == 3) total_unit_value = 1;
            else if (total_unit_value == 4 || total_unit_value == 5 || total_unit_value == 6 || total_unit_value == 7) total_unit_value = 5;
            else if (total_unit_value == 8 || total_unit_value == 9 || total_unit_value == 10 || total_unit_value == 11) total_unit_value = 9;
            else if (total_unit_value == 12 || total_unit_value == 13 || total_unit_value == 14 || total_unit_value == 15) total_unit_value = 13;
            else if (total_unit_value == 16 || total_unit_value == 17 || total_unit_value == 18 || total_unit_value == 19) total_unit_value = 17;
            else if (total_unit_value == 20 || total_unit_value == 21 || total_unit_value == 22 || total_unit_value == 23) total_unit_value = 21;
            else if (total_unit_value == 24 || total_unit_value == 25 || total_unit_value == 26 || total_unit_value == 27) total_unit_value = 25;
            else if (total_unit_value == 28 || total_unit_value == 29 || total_unit_value == 30 || total_unit_value == 31) total_unit_value = 29;

          } else if (read_or_write_number > 100000 && read_or_write_number <= 1000000) {
            read_or_write_number = read_or_write_number / 1000;
            if (total_unit_value == 0 || total_unit_value == 1 || total_unit_value == 2 || total_unit_value == 3) total_unit_value = 0;
            else if (total_unit_value == 4 || total_unit_value == 5 || total_unit_value == 6 || total_unit_value == 7) total_unit_value = 4;
            else if (total_unit_value == 8 || total_unit_value == 9 || total_unit_value == 10 || total_unit_value == 11) total_unit_value = 8;
            else if (total_unit_value == 12 || total_unit_value == 13 || total_unit_value == 14 || total_unit_value == 15) total_unit_value = 12;
            else if (total_unit_value == 16 || total_unit_value == 17 || total_unit_value == 18 || total_unit_value == 19) total_unit_value = 16;
            else if (total_unit_value == 20 || total_unit_value == 21 || total_unit_value == 22 || total_unit_value == 23) total_unit_value = 20;
            else if (total_unit_value == 24 || total_unit_value == 25 || total_unit_value == 26 || total_unit_value == 27) total_unit_value = 24;
            else if (total_unit_value == 28 || total_unit_value == 29 || total_unit_value == 30 || total_unit_value == 31) total_unit_value = 28;
          }

          modbus_master.read_or_write(1, WRITE_MULTI, 0x010F, &total_unit_value);  // Registerdan istenilen değeri oku
          delay(time_after_communication);                                         // iki modbus haberleşmesi arası beklenecek min süre


          modbus_master.read_or_write(1, WRITE_MULTI, 0x0147, &read_or_write_number);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 29, 190);  // Range
            tft.drawString("= 1000000 - 0.001", 106, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 40, 190);  // Aralik
            tft.drawString("= 1000000 - 0.001", 106, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);  // done !
        } else {                                                    // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 29, 190);  // Range
            tft.drawString("= 1000000 - 0.001", 106, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 40, 190);  // Aralik
            tft.drawString("= 1000000 - 0.001", 106, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);  // done !
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir


      break;

    case pulse_width:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0149, &read_or_write_number);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSS12);
        tft.drawString("ms", 245, 118);

        if (language == English) {
          tft.setFreeFont(FSS18);
          tft.drawString(english[149], 63, 20);  // Pulse Width
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 55, 185);  // Range
        } else if (language == Turkish) {
          tft.setFreeFont(FSS18);
          tft.drawString(turkish[149], 46, 20);  // Pulse genişliği
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 65, 185);
        }
        tft.drawString("= 0.1 - 250.0", 135, 185);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = pulse_settings;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.01 && read_or_write_number <= 250.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0149, &read_or_write_number);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 55, 185);  // Range
            tft.drawString("= 0.1 - 250.0", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 65, 185);  // Aralik
            tft.drawString("= 0.1 - 250.0", 135, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 55, 185);  // Range
            tft.drawString("= 0.1 - 250.0", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 65, 185);  // Aralik
            tft.drawString("= 0.1 - 250.0", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case max_frequency:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0114, &uint16_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        read_or_write_number = (float)uint16_value;
        number_entry_opening_page(read_or_write_number, positive, decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSS12);
        tft.drawString("Hz", 245, 118);

        if (language == English) {
          tft.setFreeFont(FSS18);
          tft.drawString(english[150], 40, 20);  // Max Frequency
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 55, 185);  // Range
        } else if (language == Turkish) {
          tft.setFreeFont(FSS18);
          tft.drawString(turkish[150], 60, 20);  // Max frekans
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 67, 185);
        }
        tft.drawString("= 1 - 5000", 135, 185);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = pulse_settings;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 1 && read_or_write_number <= 5000) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          uint16_value = (uint16_t)read_or_write_number;
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0114, &uint16_value);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 55, 185);  // Range
            tft.drawString("= 1 - 5000", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 67, 185);  // Aralik
            tft.drawString("= 1 - 5000", 135, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 55, 185);  // Range
            tft.drawString("= 1 - 5000", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 67, 185);  // Aralik
            tft.drawString("= 1 - 5000", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case pulse_test:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        uint16_value = 1;  // test moduna giriş değeri
        modbus_master.read_or_write(1, WRITE_MULTI, 0x040A, &uint16_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        modbus_master.read_or_write(1, READ_HOLDING, 0x040B, &uint16_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        read_or_write_number = (float)uint16_value;
        number_entry_opening_page(read_or_write_number, positive, decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSS12);
        tft.drawString("Hz", 245, 116);

        if (language == English) {
          tft.setFreeFont(FSS18);
          tft.drawString(english[151], 80, 20);  // Pulse test
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 65, 185);  // Range
        } else if (language == Turkish) {
          tft.setFreeFont(FSS18);
          tft.drawString(turkish[151], 80, 20);  // Pulse test
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 75, 185);
        }
        tft.drawString("= 2 - 5000", 145, 185);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;
        uint16_value = 0;  // test modundan çıkış değeri
        modbus_master.read_or_write(1, WRITE_MULTI, 0x040A, &uint16_value);
        delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

        opening_page = true;
        screen_switch = pulse_settings;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 2 && read_or_write_number <= 5000) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          uint16_value = (uint16_t)read_or_write_number;
          modbus_master.read_or_write(1, WRITE_MULTI, 0x040B, &uint16_value);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 65, 185);  // Range
            tft.drawString("= 2 - 5000", 145, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 75, 185);  // Aralik
            tft.drawString("= 2 - 5000", 145, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 65, 185);  // Range
            tft.drawString("= 2 - 5000", 145, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 75, 185);  // Aralik
            tft.drawString("= 2 - 5000", 145, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;


    case alarms:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = output;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(output_icon, 130, 75, left_aligned, 136, 137, 138, high_alarm, sys_alarm);

      break;

    case high_alarm:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = alarms;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }


      bar_select(output_icon, 136, 75, left_aligned, 131, 132, 133, 134, 135, high_alarm_en, high_alarm_Iout_value);


      break;

    case low_alarm:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = alarms;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }


      bar_select(output_icon, 137, 75, left_aligned, 131, 132, 133, 134, 135, low_alarm_en, low_alarm_Iout_value);


      break;

    case sys_alarm:

      static uint16_t sys_alarm_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = alarms;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(100);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == enable) {
          sys_alarm_register = 1;
          tick_location = 1;
        } else if (cursor == disable) {
          sys_alarm_register = 0;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x011E, &sys_alarm_register);
        delay(time_after_communication);

        write_tick(100);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x011E, &sys_alarm_register);
        delay(time_after_communication);

        if (sys_alarm_register == 1) tick_location = 1;
        else if (sys_alarm_register == 0) tick_location = 2;
      }

      bar_select(output_icon, 138, 135, middle_aligned, 128, 129, enable, disable);

      break;

    case high_alarm_en:

      static uint16_t high_alarm_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = high_alarm;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(100);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == enable) {
          high_alarm_register = 1;
          tick_location = 1;
        } else if (cursor == disable) {
          high_alarm_register = 0;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0118, &high_alarm_register);
        delay(time_after_communication);

        write_tick(100);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x0118, &high_alarm_register);
        delay(time_after_communication);

        if (high_alarm_register == 0) tick_location = 2;
        else if (high_alarm_register == 1) tick_location = 1;
      }

      bar_select(output_icon, 131, 135, middle_aligned, 128, 129, enable, disable);

      break;

    case high_alarm_opt:

      static uint16_t high_alarm_obj_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = high_alarm;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(75);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == Q_percent) {
          high_alarm_obj_register = 1;
          tick_location = 1;
        } else if (cursor == Q_unit) {
          high_alarm_obj_register = 6;
          tick_location = 2;
        } else if (cursor == total_net) {
          high_alarm_obj_register = 5;
          tick_location = 3;
        } else if (cursor == total_forward) {
          high_alarm_obj_register = 3;
          tick_location = 4;
        } else if (cursor == total_reverse) {
          high_alarm_obj_register = 4;
          tick_location = 5;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0156, &high_alarm_obj_register);
        delay(time_after_communication);

        write_tick(75);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x0156, &high_alarm_obj_register);
        delay(time_after_communication);

        if (high_alarm_obj_register == 1) tick_location = 1;
        else if (high_alarm_obj_register == 3) tick_location = 4;
        else if (high_alarm_obj_register == 4) tick_location = 5;
        else if (high_alarm_obj_register == 5) tick_location = 3;
        else if (high_alarm_obj_register == 6) tick_location = 2;
      }

      bar_select(output_icon, 132, 110, middle_aligned, 139, 140, 141, 142, 143, Q_percent, total_reverse);

      break;

    case high_alarm_mode:

      static uint16_t high_alarm_active_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = high_alarm;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(85);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == active_high) {
          high_alarm_active_register = 0;
          tick_location = 1;
        } else if (cursor == active_low) {
          high_alarm_active_register = 1;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0157, &high_alarm_active_register);
        delay(time_after_communication);

        write_tick(85);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x0157, &high_alarm_active_register);
        delay(time_after_communication);

        if (high_alarm_active_register == 0) tick_location = 1;
        else if (high_alarm_active_register == 1) tick_location = 2;
      }

      bar_select(output_icon, 133, 120, middle_aligned, 144, 145, active_high, active_low);

      break;

    case high_alarm_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0119, &read_or_write_number);
        delay(time_after_communication);                                                    // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, non_positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[134], 90, 28);  // Alarm value
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 36, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[134], 80, 28);  // Alarm degeri
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 45, 190);  // Aralik
        }
        tft.drawString("= - 200.0 - 200.0", 115, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = high_alarm;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= -200.0 && read_or_write_number <= 200.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0119, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 36, 190);  // Range
            tft.drawString("= - 200.0 - 200.0", 115, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 45, 190);  // Aralik
            tft.drawString("= - 200.0 - 200.0", 115, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 36, 190);  // Range
            tft.drawString("= - 200.0 - 200.0", 115, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 45, 190);  // Aralik
            tft.drawString("= - 200.0 - 200.0", 115, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case high_alarm_Iout_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x014F, &read_or_write_number);    // Registerdan istenilen değeri oku
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        // digit = 6;                                                                           // imleçin en sağdaki basamakta kalması için

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[135], 95, 14);  // alarm Iout
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 60, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[135], 95, 14);  // alarm Iout
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 70, 190);
        }
        tft.drawString("= 21.5 - 23.0", 140, 190);

        tft.setFreeFont(FSS12);
        tft.drawString("mA", 245, 118);

        modbus_master.read_or_write(1, READ_HOLDING, 0x014E, &alarm_Iout_enable);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                           // iki modbus haberleşmesi arası beklenecek min süre

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS9);
        tft.drawString(english[76], 46, 40);   // active
        tft.drawString(english[77], 213, 40);  // passive

        tft.drawWideLine(275, 70, 45, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.drawRect(57, 14, 20, 20, TFT_DARKGREEN);  // soldaki içi boş kare
        tft.drawRect(231, 14, 20, 20, TFT_RED);       // sağdaki içi boş kare

        if (alarm_Iout_enable == 0) {  // sensitivity_ kapalı
          tft.fillRect(232, 15, 18, 18, TFT_RED);
        } else if (alarm_Iout_enable == 1) {  // sensitivity_ açık
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = high_alarm;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        if (alarm_Iout_enable == 1) {

          if (digit == 8) {
            alarm_Iout_enable = 0;
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
            tft.fillRect(232, 15, 18, 18, TFT_RED);

            modbus_master.read_or_write(1, WRITE_MULTI, 0x014E, &alarm_Iout_enable);  // Registerdan istenilen değeri oku
            delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre
          }

          number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

          if (read_or_write_number >= 21.5 && read_or_write_number <= 23.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
            modbus_master.read_or_write(1, WRITE_MULTI, 0x014F, &read_or_write_number);
            delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre


            tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
            tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[2], 135, 162);  // done !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 60, 190);  // Range
              tft.drawString("= 21.5 - 23.0", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[2], 112, 162);  // onaylandi !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 70, 190);  // Aralik
              tft.drawString("= 21.5 - 23.0", 140, 190);
            }
          } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap
            tft.setTextColor(TFT_RED, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[73], 105, 162);  // out of range
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 60, 190);  // Range
              tft.drawString("= 21.5 - 23.0", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[73], 95, 162);  // araligin disinda
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 70, 190);  // Aralik
              tft.drawString("= 21.5 - 23.0", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            }
            delay(1000);
            tft.drawString("                            ", 75, 162);
          }

        } else {
          alarm_Iout_enable = 1;
          tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          modbus_master.read_or_write(1, WRITE_MULTI, 0x014E, &alarm_Iout_enable);  // Registera istenilen değeri yaz
          delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre
        }

      } else if (button_state == press_up) {
        button_state = idle;

        if (alarm_Iout_enable == 1) {
          increase_digit_number();
        }
      } else if (button_state == press_down) {
        button_state = idle;
        if (alarm_Iout_enable == 1) {
          digit++;
          // if (digit > 8) {
          //   digit = 6;
          tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          // }
          if (digit == 8) {
            tft.drawWideLine(57 + digit - 1 * 25, 147, 34 + digit * 25, 147, 4, TFT_WHITE, TFT_WHITE);  // imleç kutucuklara geçince önceki pozisyonunun kalıntısını sil
            half_second = previous_half_second;
          }
        }
      }

      if (alarm_Iout_enable == 0) {  // kutu animasyonları

        if (half_second != previous_half_second) {
          if (green_rectengular == true) {  // red line çizilimi
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
          } else {
            tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          }
          green_rectengular = !green_rectengular;
          previous_half_second = half_second;
        }
      } else {
        if (digit == 8) {
          if (half_second != previous_half_second) {
            if (green_rectengular == true) {  // red line çizilimi
              tft.fillRect(232, 15, 18, 18, TFT_WHITE);
            } else {
              tft.fillRect(232, 15, 18, 18, TFT_RED);
            }
            green_rectengular = !green_rectengular;
            previous_half_second = half_second;
          }
        } else {
          cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
        }
      }

      break;

    case low_alarm_en:

      static uint16_t low_alarm_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = low_alarm;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(100);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == enable) {
          low_alarm_register = 1;
          tick_location = 1;
        } else if (cursor == disable) {
          low_alarm_register = 0;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x011B, &low_alarm_register);
        delay(time_after_communication);

        write_tick(100);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x011B, &low_alarm_register);
        delay(time_after_communication);

        if (low_alarm_register == 0) tick_location = 2;
        else if (low_alarm_register == 1) tick_location = 1;
      }

      bar_select(output_icon, 131, 135, middle_aligned, 128, 129, enable, disable);

      break;

    case low_alarm_opt:

      static uint16_t low_alarm_obj_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = low_alarm;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(75);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == Q_percent) {
          low_alarm_obj_register = 1;
          tick_location = 1;
        } else if (cursor == Q_unit) {
          low_alarm_obj_register = 6;
          tick_location = 2;
        } else if (cursor == total_net) {
          low_alarm_obj_register = 5;
          tick_location = 3;
        } else if (cursor == total_forward) {
          low_alarm_obj_register = 3;
          tick_location = 4;
        } else if (cursor == total_reverse) {
          low_alarm_obj_register = 4;
          tick_location = 5;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0158, &low_alarm_obj_register);
        delay(time_after_communication);

        write_tick(75);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x0158, &low_alarm_obj_register);
        delay(time_after_communication);

        if (low_alarm_obj_register == 1) tick_location = 1;
        else if (low_alarm_obj_register == 3) tick_location = 4;
        else if (low_alarm_obj_register == 4) tick_location = 5;
        else if (low_alarm_obj_register == 5) tick_location = 3;
        else if (low_alarm_obj_register == 6) tick_location = 2;
      }

      bar_select(output_icon, 132, 110, middle_aligned, 139, 140, 141, 142, 143, Q_percent, total_reverse);


      break;

    case low_alarm_mode:

      static uint16_t low_alarm_active_register;

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = low_alarm;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick(85);  // yazı başlangıcından 35 eksik olmalı

        if (cursor == active_high) {
          low_alarm_active_register = 0;
          tick_location = 1;
        } else if (cursor == active_low) {
          low_alarm_active_register = 1;
          tick_location = 2;
        }

        modbus_master.read_or_write(1, WRITE_MULTI, 0x0159, &low_alarm_active_register);
        delay(time_after_communication);

        write_tick(85);  // yazı başlangıcından 35 eksik olmalı

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (opening_page == true) {
        modbus_master.read_or_write(1, READ_HOLDING, 0x0159, &low_alarm_active_register);
        delay(time_after_communication);

        if (low_alarm_active_register == 0) tick_location = 1;
        else if (low_alarm_active_register == 1) tick_location = 2;
      }

      bar_select(output_icon, 133, 120, middle_aligned, 144, 145, active_high, active_low);


      break;

    case low_alarm_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x011C, &read_or_write_number);
        delay(time_after_communication);                                                    // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, non_positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[134], 90, 28);  // Alarm value
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 36, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[134], 80, 28);  // Alarm degeri
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 45, 190);  // Aralik
        }
        tft.drawString("= - 200.0 - 200.0", 115, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = low_alarm;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= -200.0 && read_or_write_number <= 200.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x011C, &read_or_write_number);
          delay(time_after_communication);            // iki modbus haberleşmesi arası beklenecek min süre
          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 36, 190);  // Range
            tft.drawString("= - 200.0 - 200.0", 115, 190);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 45, 190);  // Aralik
            tft.drawString("= - 200.0 - 200.0", 115, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap

          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 36, 190);  // Range
            tft.drawString("= - 200.0 - 200.0", 115, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 45, 190);  // Aralik
            tft.drawString("= - 200.0 - 200.0", 115, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;

        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir


      break;

    case low_alarm_Iout_value:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        modbus_master.read_or_write(1, READ_HOLDING, 0x0151, &read_or_write_number);    // Registerdan istenilen değeri oku
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        // digit = 6;                                                                           // imleçin en sağdaki basamakta kalması için

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[135], 95, 14);  // alarm Iout
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 60, 190);  // Range
        } else if (language == Turkish) {
          tft.drawString(turkish[135], 95, 14);  // alarm Iout
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 70, 190);
        }
        tft.drawString("=  3.0 - 3.8", 140, 190);

        tft.setFreeFont(FSS12);
        tft.drawString("mA", 245, 118);

        modbus_master.read_or_write(1, READ_HOLDING, 0x014E, &alarm_Iout_enable);  // Registerdan istenilen değeri oku
        delay(time_after_communication);                                           // iki modbus haberleşmesi arası beklenecek min süre

        tft.setTextColor(TFT_GREY, TFT_WHITE);
        tft.setFreeFont(FSS9);
        tft.drawString(english[76], 46, 40);   // active
        tft.drawString(english[77], 213, 40);  // passive

        tft.drawWideLine(275, 70, 45, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi

        tft.drawRect(57, 14, 20, 20, TFT_DARKGREEN);  // soldaki içi boş kare
        tft.drawRect(231, 14, 20, 20, TFT_RED);       // sağdaki içi boş kare

        if (alarm_Iout_enable == 0) {  // sensitivity_ kapalı
          tft.fillRect(232, 15, 18, 18, TFT_RED);
        } else if (alarm_Iout_enable == 1) {  // sensitivity_ açık
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
        }
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = low_alarm;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        if (alarm_Iout_enable == 1) {

          if (digit == 8) {
            alarm_Iout_enable = 0;
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
            tft.fillRect(232, 15, 18, 18, TFT_RED);

            modbus_master.read_or_write(1, WRITE_MULTI, 0x014E, &alarm_Iout_enable);  // Registerdan istenilen değeri oku
            delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre
          }

          number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

          if (read_or_write_number >= 3.0 && read_or_write_number <= 3.8) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
            modbus_master.read_or_write(1, WRITE_MULTI, 0x0151, &read_or_write_number);
            delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre


            tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
            tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[2], 135, 162);  // done !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 60, 190);  // Range
              tft.drawString("=  3.0 - 3.8", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[2], 112, 162);  // onaylandi !
              tft.setTextColor(TFT_GREY, TFT_WHITE);
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 70, 190);  // Aralik
              tft.drawString("=  3.0 - 3.8", 140, 190);
            }
            delay(1000);
            tft.drawString("                            ", 75, 162);
          } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap
            tft.setTextColor(TFT_RED, TFT_WHITE);
            tft.setFreeFont(FSSB9);
            if (language == English) {
              tft.drawString(english[73], 105, 162);  // out of range
              tft.setFreeFont(FSS12);
              tft.drawString(english[69], 60, 190);  // Range
              tft.drawString("=  3.0 - 3.8", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            } else if (language == Turkish) {
              tft.drawString(turkish[73], 95, 162);  // araligin disinda
              tft.setFreeFont(FSS12);
              tft.drawString(turkish[69], 70, 190);  // Aralik
              tft.drawString("=  3.0 - 3.8", 140, 190);
              tft.setTextColor(TFT_GREY, TFT_WHITE);
            }
            delay(1000);
            tft.drawString("                            ", 75, 162);
          }

        } else {
          alarm_Iout_enable = 1;
          tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          modbus_master.read_or_write(1, WRITE_MULTI, 0x014E, &alarm_Iout_enable);  // Registera istenilen değeri yaz
          delay(time_after_communication);                                          // iki modbus haberleşmesi arası beklenecek min süre
        }

      } else if (button_state == press_up) {
        button_state = idle;

        if (alarm_Iout_enable == 1) {
          increase_digit_number();
        }
      } else if (button_state == press_down) {
        button_state = idle;
        if (alarm_Iout_enable == 1) {
          digit++;
          // if (digit > 8) {
          //   digit = 6;
          tft.fillRect(232, 15, 18, 18, TFT_WHITE);
          // }
          if (digit == 8) {
            tft.drawWideLine(57 + digit - 1 * 25, 147, 34 + digit * 25, 147, 4, TFT_WHITE, TFT_WHITE);  // imleç kutucuklara geçince önceki pozisyonunun kalıntısını sil
            half_second = previous_half_second;
          }
        }
      }

      if (alarm_Iout_enable == 0) {  // kutu animasyonları

        if (half_second != previous_half_second) {
          if (green_rectengular == true) {  // red line çizilimi
            tft.fillRect(58, 15, 18, 18, TFT_WHITE);
          } else {
            tft.fillRect(58, 15, 18, 18, TFT_DARKGREEN);
          }
          green_rectengular = !green_rectengular;
          previous_half_second = half_second;
        }
      } else {
        if (digit == 8) {
          if (half_second != previous_half_second) {
            if (green_rectengular == true) {  // red line çizilimi
              tft.fillRect(232, 15, 18, 18, TFT_WHITE);
            } else {
              tft.fillRect(232, 15, 18, 18, TFT_RED);
            }
            green_rectengular = !green_rectengular;
            previous_half_second = half_second;
          }
        } else {
          cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
        }
      }

      break;

    case communication:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = settings;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        if (cursor == modbus_ || cursor == wifi) {
          screen_switch = cursor;  // kursor nerdeyse o ayara git
          opening_page = true;
          if (cursor == wifi) first_text = true;
        }
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(communication_icon, 7, 75, left_aligned, 40, 41, 42, 43, 44, 45, modbus_, wifi);

      break;

    case modbus_:

      if (opening_page == true) {
        opening_page = false;
        cursor = modbus_baudrate;
        tft.fillScreen(0xc658);
        modbus_ID_bar(high_light);
        modbus_parity_bit_bar(high_light);
        modbus_stop_bit_bar(high_light);
        centered_modbus_bar(high_light);
        modbus_baudrate_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = communication;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > modbus_stop_bit) cursor = modbus_baudrate;  // kursoru baştaysa sona döndür
      if (cursor < modbus_baudrate) cursor = modbus_stop_bit;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == modbus_baudrate) {
          if (previous_cursor == modbus_stop_bit) {
            modbus_stop_bit_bar(high_light);
          } else if (previous_cursor == modbus_id) {
            modbus_ID_bar(high_light);
          }
          modbus_baudrate_bar(low_light);
        } else if (cursor == modbus_id) {
          if (previous_cursor == modbus_baudrate) {
            modbus_baudrate_bar(high_light);
          } else if (previous_cursor == modbus_parity_bit) {
            modbus_parity_bit_bar(high_light);
          }
          modbus_ID_bar(low_light);
        } else if (cursor == modbus_parity_bit) {
          if (previous_cursor == modbus_id) {
            modbus_ID_bar(high_light);
          } else if (previous_cursor == modbus_stop_bit) {
            modbus_stop_bit_bar(high_light);
          }
          modbus_parity_bit_bar(low_light);
        } else if (cursor == modbus_stop_bit) {
          if (previous_cursor == modbus_parity_bit) {
            modbus_parity_bit_bar(high_light);
          } else if (previous_cursor == modbus_baudrate) {
            modbus_baudrate_bar(high_light);
          }
          modbus_stop_bit_bar(low_light);
        }
        previous_cursor = cursor;
      }
      break;

    case modbus_baudrate:

      if (opening_page == true) {
        opening_page = false;
        cursor = baud_1200;
        tft.fillScreen(0xc658);
        baud_2400_bar(high_light);
        baud_4800_bar(high_light);
        baud_9600_bar(high_light);
        baud_19200_bar(high_light);
        baud_38400_bar(high_light);
        centered_modbus_baudrate_bar(high_light);
        baud_1200_bar(low_light);

        // Seçili baud rate e tik işaretini koy
        write_tick_for_baud_rate();
      }

      if (button_state == press_esc) {
        button_state = idle;
        screen_switch = modbus_;  // ayarlar sayfasına git
        opening_page = true;
      } else if (button_state == press_enter) {
        button_state = idle;

        // tik işaretini sil
        if (baud_rate_value == 1200) {
          draw_tick(105, 50, TFT_WHITE);
        } else if (baud_rate_value == 2400) {
          draw_tick(105, 83, TFT_WHITE);
        } else if (baud_rate_value == 4800) {
          draw_tick(105, 116, TFT_WHITE);
        } else if (baud_rate_value == 9600) {
          draw_tick(105, 149, TFT_WHITE);
        } else if (baud_rate_value == 19200) {
          draw_tick(105, 182, TFT_WHITE);
        } else if (baud_rate_value == 38400) {
          draw_tick(105, 215, TFT_WHITE);
        }

        // yeni baud rate değerini hazırla
        if (cursor == baud_1200) baud_rate_value = 1200;
        else if (cursor == baud_2400) baud_rate_value = 2400;
        else if (cursor == baud_4800) baud_rate_value = 4800;
        else if (cursor == baud_9600) baud_rate_value = 9600;
        else if (cursor == baud_19200) baud_rate_value = 19200;
        else if (cursor == baud_38400) baud_rate_value = 38400;

        if (stop_bit_value == 1) {
          if (parity_bit_value == 0) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 1) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 2) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          }
        } else if (stop_bit_value == 2) {
          if (parity_bit_value == 0) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 1) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 2) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          }
        }

        EEPROM.writeUShort(modbus_baud_rate_address, baud_rate_value);  // eeproma yazmaya hazırla

        EEPROM.commit();  // eeproma kaydet

        // tik işareti koy
        if (baud_rate_value == 1200) {
          draw_tick(105, 50, TFT_DARKGREEN);
        } else if (baud_rate_value == 2400) {
          draw_tick(105, 83, TFT_DARKGREEN);
        } else if (baud_rate_value == 4800) {
          draw_tick(105, 116, TFT_DARKGREEN);
        } else if (baud_rate_value == 9600) {
          draw_tick(105, 149, TFT_DARKGREEN);
        } else if (baud_rate_value == 19200) {
          draw_tick(105, 182, TFT_DARKGREEN);
        } else if (baud_rate_value == 38400) {
          draw_tick(105, 215, TFT_DARKGREEN);
        }

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > baud_38400) cursor = baud_1200;  // kursoru baştaysa sona döndür
      if (cursor < baud_1200) cursor = baud_38400;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == baud_1200) {
          if (previous_cursor == baud_38400) {
            baud_38400_bar(high_light);
          } else if (previous_cursor == baud_2400) {
            baud_2400_bar(high_light);
          }
          baud_1200_bar(low_light);
        } else if (cursor == baud_2400) {
          if (previous_cursor == baud_1200) {
            baud_1200_bar(high_light);
          } else if (previous_cursor == baud_4800) {
            baud_4800_bar(high_light);
          }
          baud_2400_bar(low_light);
        } else if (cursor == baud_4800) {
          if (previous_cursor == baud_2400) {
            baud_2400_bar(high_light);
          } else if (previous_cursor == baud_9600) {
            baud_9600_bar(high_light);
          }
          baud_4800_bar(low_light);
        } else if (cursor == baud_9600) {
          if (previous_cursor == baud_4800) {
            baud_4800_bar(high_light);
          } else if (previous_cursor == baud_19200) {
            baud_19200_bar(high_light);
          }
          baud_9600_bar(low_light);
        } else if (cursor == baud_19200) {
          if (previous_cursor == baud_9600) {
            baud_9600_bar(high_light);
          } else if (previous_cursor == baud_38400) {
            baud_38400_bar(high_light);
          }
          baud_19200_bar(low_light);
        } else if (cursor == baud_38400) {
          if (previous_cursor == baud_19200) {
            baud_19200_bar(high_light);
          } else if (previous_cursor == baud_1200) {
            baud_1200_bar(high_light);
          }
          baud_38400_bar(low_light);
        }
        previous_cursor = cursor;
        // Seçili baud rate e tik işaretini koy

        write_tick_for_baud_rate();
      }


      break;

    case modbus_id:

      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = slave_ID;                                            // Okunan değeri basamaklara ayrılıp ekrana yazılması için global değişkene at
        number_entry_opening_page(read_or_write_number, positive, decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz
        digit = 5;                                                                  // imleçin en sağdaki basamakta kalması için

        tft.setFreeFont(FSSB12);
        if (language == English) {
          tft.drawString(english[51], 95, 28);
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 75, 190);
        } else if (language == Turkish) {
          tft.drawString(turkish[51], 95, 28);
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[69], 78, 190);
        }
        tft.drawString("= 1 - 247", 150, 190);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = modbus_;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar
        uint16_value = (uint16_t)read_or_write_number;

        if (uint16_value >= 1 && uint16_value <= 247) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          slave_ID = (uint8_t)uint16_value;  // haberleşmenin devam etmesi için kendi ID adresini uyarla

          if (stop_bit_value == 1) {
            if (parity_bit_value == 0) {
              modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N1, SLAVE_RX_PIN, SLAVE_TX_PIN);
            } else if (parity_bit_value == 1) {
              modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O1, SLAVE_RX_PIN, SLAVE_TX_PIN);
            } else if (parity_bit_value == 2) {
              modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E1, SLAVE_RX_PIN, SLAVE_TX_PIN);
            }
          } else if (stop_bit_value == 2) {
            if (parity_bit_value == 0) {
              modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N2, SLAVE_RX_PIN, SLAVE_TX_PIN);
            } else if (parity_bit_value == 1) {
              modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O2, SLAVE_RX_PIN, SLAVE_TX_PIN);
            } else if (parity_bit_value == 2) {
              modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E2, SLAVE_RX_PIN, SLAVE_TX_PIN);
            }
          }

          EEPROM.writeByte(slave_ID_eep_address, slave_ID);
          EEPROM.commit();  // kaydet

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 75, 190);  // Range
            tft.drawString("= 1 - 247", 150, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 78, 190);  // Aralik
            tft.drawString("= 1 - 247", 150, 190);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını kırmızı yap
          tft.setTextColor(TFT_RED, TFT_WHITE);
          tft.setFreeFont(FSSB9);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 75, 190);  // Range
            tft.drawString("= 1 - 247", 150, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 90, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 78, 190);  // Aralik
            tft.drawString("= 1 - 247", 150, 190);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }

      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
        if (digit > 7) digit = 5;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir
      break;

    case modbus_parity_bit:

      if (opening_page == true) {
        opening_page = false;
        cursor = none;
        tft.fillScreen(0xc658);
        odd_bar(high_light);
        even_bar(high_light);
        centered_modbus_parity_bit_bar(high_light);
        none_bar(low_light);

        // Seçili baud rate e tik işaretini koy
        write_tick_for_parity_bit();
      }

      if (button_state == press_esc) {
        button_state = idle;
        screen_switch = modbus_;  // ayarlar sayfasına git
        opening_page = true;
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_parity_bit();

        if (cursor == none) parity_bit_value = 0;
        else if (cursor == odd) parity_bit_value = 1;
        else if (cursor == even) parity_bit_value = 2;

        if (stop_bit_value == 1) {
          if (parity_bit_value == 0) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 1) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 2) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          }
        } else if (stop_bit_value == 2) {
          if (parity_bit_value == 0) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 1) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 2) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          }
        }

        EEPROM.writeUShort(modbus_parity_bit_address, parity_bit_value);  // eeproma yazmaya hazırla

        EEPROM.commit();  // eeproma kaydet

        write_tick_for_parity_bit();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > even) cursor = none;  // kursoru baştaysa sona döndür
      if (cursor < none) cursor = even;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == none) {
          if (previous_cursor == even) {
            even_bar(high_light);
          } else if (previous_cursor == odd) {
            odd_bar(high_light);
          }
          none_bar(low_light);
        } else if (cursor == odd) {
          if (previous_cursor == none) {
            none_bar(high_light);
          } else if (previous_cursor == even) {
            even_bar(high_light);
          }
          odd_bar(low_light);
        } else if (cursor == even) {
          if (previous_cursor == none) {
            none_bar(high_light);
          } else if (previous_cursor == odd) {
            odd_bar(high_light);
          }
          even_bar(low_light);
        }
        previous_cursor = cursor;

        write_tick_for_parity_bit();
      }

      break;

    case modbus_stop_bit:

      if (opening_page == true) {
        opening_page = false;
        cursor = one;
        tft.fillScreen(0xc658);
        two_bar(high_light);
        centered_modbus_stop_bit_bar(high_light);
        one_bar(low_light);

        write_tick_for_stop_bit();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = modbus_;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_stop_bit();

        if (cursor == one) stop_bit_value = 1;
        else if (cursor == two) stop_bit_value = 2;

        if (stop_bit_value == 1) {
          if (parity_bit_value == 0) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 1) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 2) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E1, SLAVE_RX_PIN, SLAVE_TX_PIN);
          }
        } else if (stop_bit_value == 2) {
          if (parity_bit_value == 0) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8N2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 1) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8O2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          } else if (parity_bit_value == 2) {
            modbus_slave.begin(slave_ID, baud_rate_value, SERIAL_8E2, SLAVE_RX_PIN, SLAVE_TX_PIN);
          }
        }

        EEPROM.writeUShort(modbus_stop_bit_address, stop_bit_value);  // eeproma yazmaya hazırla

        EEPROM.commit();  // eeproma kaydet

        write_tick_for_stop_bit();

      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > two) cursor = one;  // kursoru baştaysa sona döndür
      if (cursor < one) cursor = two;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == one) {
          two_bar(high_light);
          one_bar(low_light);
        } else if (cursor == two) {
          one_bar(high_light);
          two_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_stop_bit();
      }
      break;

    case ethernet:
      break;

    case hart:
      break;

    case profibus:
      break;

    case bluetooth:
      break;

    case wifi:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        WiFi.mode(WIFI_OFF);
        screen_switch = communication;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        opening_page = true;
        if (cursor == no) {
          screen_switch = communication;
        } else if (cursor == yes) {
          screen_switch = wifi_firmware_uptade;
        }
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(communication_icon, 159, 140, middle_aligned, 91, 90, no, yes);

      if (first_text == true) {
        first_text = false;

        tft.setTextColor(TFT_BLACK, 0xc658);
        if (language == English) {
          tft.setFreeFont(FSS9);
          tft.drawString("To connect, wifi settings must be:", 20, 130);
          tft.drawString("Wifi name: bass", 20, 154);
          tft.drawString("Wifi password: 12345678", 20, 178);
          tft.drawString(version, 20, 202);
        } else if (language == Turkish) {
          tft.setFreeFont(FSS9);
          tft.drawString("Baglanmak icin wifi ayarlari su olmalidir:", 20, 130);
          tft.drawString("Wifi adi: bass", 20, 154);
          tft.drawString("Wifi sifre: 12345678", 20, 178);
          tft.drawString(version, 20, 202);
        }
      }

      break;

    case wifi_firmware_uptade:

      if (opening_page == true) {
        opening_page = false;

        tft.fillScreen(0xc658);  // arka planı hafif griye boya

        tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla

        WiFi.begin(ssid, password);

        if (language == English) {
          tft.drawString("Connecting to Wi-Fi", 40, 40);
        } else if (language == Turkish) {
          tft.drawString("Wi-Fi'ye baglaniliyor", 40, 40);
        }

        uint8_t connection_counter = 0;
        while (WiFi.status() != WL_CONNECTED) {
          delay(1000);
          tft.drawString(".", 203 + (connection_counter * 10), 40);
          connection_counter++;
          if (connection_counter >= 10) break;
        }

        if (WiFi.status() == WL_CONNECTED) {
          if (language == English) {
            tft.drawString("Wi-Fi connection is successful !", 40, 64);
            tft.drawString("Downloading new firmware ...", 40, 88);
          } else if (language == Turkish) {
            tft.drawString("Wi-Fi baglantisi basarili !", 40, 64);
            tft.drawString("Yeni Firmware indiriliyor ...", 40, 88);
          }

          // Starting OTA Update
          firmwareUpdate();
        } else {
          if (language == English) {
            tft.drawString("Unable to connect to Wi-Fi", 40, 64);

          } else if (language == Turkish) {
            tft.drawString("Wi-Fi'ye baglanilamadi", 40, 64);
          }
          delay(3000);
        }
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        first_text = true;
        screen_switch = wifi;
        break;
      }

      break;

    case display:

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = settings;  // ayarlar sayfasına git
        break;
      } else if (button_state == press_enter) {
        button_state = idle;
        screen_switch = cursor;  // kursor nerdeyse o ayara git
        opening_page = true;
        break;
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      bar_select(display_icon, 8, 55, left_aligned, 26, 157, 158, reverse_colors, damping_time);

      break;

    case reverse_colors:

      if (opening_page == true) {
        opening_page = false;
        cursor = dark_theme;
        tft.fillScreen(0xc658);
        white_theme_bar(high_light);
        centered_reverse_colors_bar(high_light);
        dark_theme_bar(low_light);

        write_tick_for_reverse_colors();
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = display;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;

        delete_tick_for_reverse_colors();

        if (cursor == dark_theme) theme_color = dark_theme;
        else if (cursor == white_theme) theme_color = white_theme;

        EEPROM.writeByte(theme_color_address, theme_color);

        EEPROM.commit();  // eeproma kaydet

        write_tick_for_reverse_colors();


      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > white_theme) cursor = dark_theme;  // kursoru baştaysa sona döndür
      if (cursor < dark_theme) cursor = white_theme;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == dark_theme) {
          white_theme_bar(high_light);
          dark_theme_bar(low_light);
        } else if (cursor == white_theme) {
          dark_theme_bar(high_light);
          white_theme_bar(low_light);
        }
        previous_cursor = cursor;
        write_tick_for_reverse_colors();
      }
      break;

    case screen_refresh_time:
      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = screen_refresh_time_value;

        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        tft.setFreeFont(FSS12);
        if (language == English) {
          tft.drawString(english[157], 53, 30);  // screen refresh time
          tft.drawString(english[69], 80, 185);  // Range
          tft.drawString("= 0.5 - 4", 157, 185);
        } else if (language == Turkish) {
          tft.drawString(turkish[157], 40, 30);  // ekran yenilenme suresi
          tft.drawString(turkish[69], 78, 185);  // aralık
          tft.drawString("= 0.5 - 4", 145, 185);
        }
        tft.drawString("S", 245, 119);
      }


      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = display;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.5 && read_or_write_number <= 4.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap

          screen_refresh_time_value = read_or_write_number;

          EEPROM.writeFloat(screen_refresh_time_value_address, screen_refresh_time_value);

          EEPROM.commit();  // kaydet

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 80, 185);  // Range
            tft.drawString("= 0.5 - 4", 157, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 78, 185);  // Aralik
            tft.drawString("= 0.5 - 4", 145, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 80, 185);  // Range
            tft.drawString("= 0.5 - 4", 157, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 78, 185);  // Aralik
            tft.drawString("= 0.5 - 4", 145, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case damping_time:
      // Case döngüsüne ilk girdiğinde bir kez yapılacaklar
      if (opening_page == true) {
        opening_page = false;

        read_or_write_number = 0;
        modbus_master.read_or_write(1, READ_HOLDING, 0x0107, &read_or_write_number);
        delay(time_after_communication);                                                // iki modbus haberleşmesi arası beklenecek min süre
        number_entry_opening_page(read_or_write_number, positive, non_decimal_number);  // Okunan değeri bulunduran değişkeni ekrana basamak basamak yaz

        if (language == English) {
          tft.setFreeFont(FSS18);
          tft.drawString(english[158], 50, 20);  // damping time
          tft.setFreeFont(FSS12);
          tft.drawString(english[69], 48, 185);  // Range
          tft.drawString("= 0.0 - 50.0", 125, 185);
        } else if (language == Turkish) {
          tft.setFreeFont(FSS12);
          tft.drawString(turkish[158], 60, 30);  // sonumleme suresi
          tft.drawString(turkish[69], 65, 185);  // aralık
          tft.drawString("= 0.0 - 50.0", 135, 185);
        }
        tft.drawString("S", 245, 119);
      }

      // Buton kontrolü
      if (button_state == press_esc) {
        button_state = idle;

        opening_page = true;
        screen_switch = display;
        break;
      } else if (button_state == press_enter) {
        button_state = idle;

        number_entry();  // basamaklardaki rakamları read_or_write_number global değişkenine yazar

        if (read_or_write_number >= 0.0 && read_or_write_number <= 50.0) {  // Girilen sayı aralıktaysa registera yaz range yazısını 1 sn yeşil yap
          modbus_master.read_or_write(1, WRITE_MULTI, 0x0107, &read_or_write_number);
          delay(time_after_communication);  // iki modbus haberleşmesi arası beklenecek min süre

          tft.fillRect(80, 163, 150, 18, TFT_WHITE);  // Arka plan temizle
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_DARKGREEN, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[2], 135, 162);  // done !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 185);  // Range
            tft.drawString("= 0.0 - 50.0", 125, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[2], 112, 162);  // onaylandi !
            tft.setTextColor(TFT_GREY, TFT_WHITE);
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 65, 185);  // Aralik
            tft.drawString("= 0.0 - 50.0", 135, 185);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        } else {  // Girilen sayı aralıkta değilse registera yazma range yazısını 1 sn kırmızı yap
          tft.setFreeFont(FSSB9);
          tft.setTextColor(TFT_RED, TFT_WHITE);
          if (language == English) {
            tft.drawString(english[73], 105, 162);  // out of range
            tft.setFreeFont(FSS12);
            tft.drawString(english[69], 48, 185);  // Range
            tft.drawString("= 0.0 - 50.0", 125, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          } else if (language == Turkish) {
            tft.drawString(turkish[73], 95, 162);  // araligin disinda
            tft.setFreeFont(FSS12);
            tft.drawString(turkish[69], 65, 185);  // Aralik
            tft.drawString("= 0.0 - 50.0", 135, 185);
            tft.setTextColor(TFT_GREY, TFT_WHITE);
          }
          delay(1000);
          tft.drawString("                            ", 75, 162);
        }


      } else if (button_state == press_up) {
        button_state = idle;

        increase_digit_number();
      } else if (button_state == press_down) {
        button_state = idle;
        digit++;
      }
      cursor_movement();  // Basamak altı kısa kırmızı çizginin hareklerini gerçekleştir

      break;

    case data_logging:

      if (opening_page == true) {
        opening_page = false;
        cursor = interval_unit;
        tft.fillScreen(0xc658);
        interval_time_bar(high_light);
        centered_data_logging_bar(high_light);
        interval_unit_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        // screen_switch = cursor;  // kursor nerdeyse o ayara git
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > interval_time) cursor = interval_unit;  // kursoru baştaysa sona döndür
      if (cursor < interval_unit) cursor = interval_time;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == interval_unit) {
          interval_time_bar(high_light);
          interval_unit_bar(low_light);
        } else if (cursor == interval_time) {
          interval_unit_bar(high_light);
          interval_time_bar(low_light);
        }
        previous_cursor = cursor;
      }
      break;

    case information:

      if (opening_page == true) {
        opening_page = false;
        cursor = serial_no;
        tft.fillScreen(0xc658);
        information__bar(high_light);
        product_date_bar(high_light);
        centered_information_bar(high_light);
        serial_no_bar(low_light);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = settings;  // ayarlar sayfasına git
      } else if (button_state == press_enter) {
        button_state = idle;
        if (cursor == _information) {
          screen_switch = _information;
          opening_page = true;
        }
      } else if (button_state == press_up) {
        button_state = idle;
        cursor--;
      } else if (button_state == press_down) {
        button_state = idle;
        cursor++;
      }

      if (cursor > _information) cursor = serial_no;  // kursoru baştaysa sona döndür
      if (cursor < serial_no) cursor = _information;  // kursoru sondaysa başa döndür

      if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
        if (cursor == serial_no) {
          if (previous_cursor == product_date) {
            product_date_bar(high_light);
          } else if (previous_cursor == _information) {
            information__bar(high_light);
          }
          serial_no_bar(low_light);
        } else if (cursor == product_date) {
          if (previous_cursor == serial_no) {
            serial_no_bar(high_light);
          } else if (previous_cursor == _information) {
            information__bar(high_light);
          }
          product_date_bar(low_light);
        } else if (cursor == _information) {
          if (previous_cursor == product_date) {
            product_date_bar(high_light);
          } else if (previous_cursor == serial_no) {
            serial_no_bar(high_light);
          }
          information__bar(low_light);
        }
        previous_cursor = cursor;
      }
      break;

    case _information:


      if (opening_page == true) {
        opening_page = false;
        tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla
        tft.setTextColor(TFT_BLACK, TFT_WHITE);
        tft.drawString("Electromagnetic Flowmeter", 40, 40);
        tft.drawString("www.bass.com.tr", 40, 88);
        tft.drawString("Tel: 0216 660 01 63 - 64", 40, 136);
        tft.drawString("Istanbul / Turkey", 40, 184);
      }

      if (button_state == press_esc) {
        button_state = idle;
        opening_page = true;
        screen_switch = information;  // ayarlar sayfasına git
        break;
      }

      break;
  }
}

// Kesme içinde timer ile bekleme oluşturma fonksiyonu
void wait(uint32_t ms) {
  unsigned long previous_time = millis();
  while (millis() - previous_time < ms)
    ;
}

// Zamanlama fonksiyonu
void count_second() {

  current_time = millis();                                 // anlık zamanı al
  if (current_time < last_time) last_time = current_time;  // zaman taşması olursa sıfırla

  // Belirlenen sürede girecek
  if (current_time - last_time >= 500) {
    last_time = current_time;  // zamanı güncelle

    half_second++; // yarım saniyeyi 1 artır
    if(screen_switch == second_screen) conductivity_temperature_second += 0.5;

    if (half_second % 2 == 0) {

      time_for_main_sreens++; 

      second_for_outputs_set++;

      // Ayarlar ekranı timeout
      if(screen_switch != main_screen && screen_switch != second_screen) second_for_menu++;
      if(second_for_menu > 60){
        second_for_menu = 0;
        screen_switch = main_screen;
        opening_page = true;
      }                                                      

      if (password_validity_time < 120) password_validity_time++;  // şifre geçerlilik süresi başlatıldıysa saniyede 1 artır
      else password_validity_time = 150;                           // geçerlilik süresi bittiyse durdur ya da başlatılmamışsa saydırma
    
    }
  }
}

// ChatGPT ile oluşturuldu
// Dac çıkışları için eğim hesaplama uyarlama fonksiyonu
float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float read_temperature() {
  const float referenceResistance = 10000;  // 10kΩ sabit direnç
  const float nominalResistance = 10000;    // NTC'nin 25°C'deki nominal direnci
  const float nominalTemperature = 25;      // NTC'nin nominal sıcaklığı (25°C)
  const float bCoefficient = 3950;          // NTC'nin beta katsayısı
  const float seriesResistor = 10000;       // Sabit direnç (10kΩ)
  const float calibrationOffset = -5.5;     // Kalibrasyon faktörü (-x °C çıkararak düzeltme)

  int analogValue = analogRead(NTC_PIN);         // NTC'den analog okuma
  float voltage = analogValue * (3.3 / 4095.0);  // ADC'den voltaj hesapla

  // Direnç hesaplamasını yaparken formülü düzeltiyoruz
  float resistance = (seriesResistor * voltage) / (3.3 - voltage);  // NTC'nin direncini hesapla

  // Steinhart-Hart Denklemi ile sıcaklık hesaplama (Kelvin)
  float steinhart;
  steinhart = resistance / nominalResistance;        // (R/Ro)
  steinhart = log(steinhart);                        // ln(R/Ro)
  steinhart /= bCoefficient;                         // 1/B * ln(R/Ro)
  steinhart += 1.0 / (nominalTemperature + 273.15);  // + (1/To)
  steinhart = 1.0 / steinhart;                       // T = 1/(...)
  steinhart -= 273.15;                               // Kelvin'i Celcius'a çevir

  // Kalibrasyon uygulaması (offset ekleyerek düzeltme)
  steinhart += calibrationOffset;
  if (steinhart > 70) steinhart = 70;
  else if (steinhart < -50) steinhart = -50;
  return steinhart;
}

// ChatGPT ile oluşturuldu
// Doğrusal interpolasyon fonksiyonu
int interpolateMTPToUS(int mtp) {

  // MTP ve uS değerleri için tablolar
  int mtp_values[] = { 2, 5, 6, 9, 11, 25, 36, 56, 69, 85, 107, 148, 2230, 3830, 4230 };
  int us_values[] = { 5440, 4550, 3800, 3200, 2500, 1820, 1375, 911, 762, 631, 500, 368, 20, 10, 0 };

  // Array uzunluğu
  int table_size = sizeof(mtp_values) / sizeof(mtp_values[0]);

  // MTP değeri tablodaki minimumdan küçükse
  if (mtp <= mtp_values[0]) {
    return us_values[0];
  }

  // MTP değeri tablodaki maksimumdan büyükse
  if (mtp >= mtp_values[table_size - 1]) {
    return us_values[table_size - 1];
  }

  // Tablodaki MTP değerleri arasında interpolasyon
  for (int i = 0; i < table_size - 1; i++) {
    if (mtp >= mtp_values[i] && mtp <= mtp_values[i + 1]) {
      int mtp_diff = mtp_values[i + 1] - mtp_values[i];
      int us_diff = us_values[i + 1] - us_values[i];
      int mtp_offset = mtp - mtp_values[i];

      // Doğrusal interpolasyon hesabı
      return us_values[i] + ((us_diff * mtp_offset) / mtp_diff);
    }
  }

  // Eğer bir hata olursa (normalde buraya ulaşılmaması gerekir)
  return -1;
}

int interpolateUSToMTP(int us) {

  // MTP ve uS değerleri için tablolar
  int mtp_values[] = { 2, 5, 6, 9, 11, 25, 36, 56, 69, 85, 107, 148, 2230, 3830, 4230 };
  int us_values[] = { 5440, 4550, 3800, 3200, 2500, 1820, 1375, 911, 762, 631, 500, 368, 20, 10, 0 };

  // Array uzunluğu
  int table_size = sizeof(mtp_values) / sizeof(mtp_values[0]);

  // uS değeri tablodaki maksimumdan büyükse
  if (us >= us_values[0]) {
    return mtp_values[0];
  }

  // uS değeri tablodaki minimumdan küçükse
  if (us <= us_values[table_size - 1]) {
    return mtp_values[table_size - 1];
  }

  // Tablodaki uS değerleri arasında interpolasyon
  for (int i = 0; i < table_size - 1; i++) {
    if (us <= us_values[i] && us >= us_values[i + 1]) {
      int us_diff = us_values[i] - us_values[i + 1];
      int mtp_diff = mtp_values[i + 1] - mtp_values[i];
      int us_offset = us_values[i] - us;

      // Doğrusal interpolasyon hesabı
      return mtp_values[i] + ((mtp_diff * us_offset) / us_diff);
    }
  }

  // Eğer bir hata olursa (normalde buraya ulaşılmaması gerekir)
  return -1;
}

void modbus_rx() {

  if (register_adress != 10000) {

    // yazma isteği gelirse
    if (register_adress == 0) {

      // modbus_slave.read_from_holding_registers(holdingRegisters, &flow_range_value, flow_range_value_address);

      // verification = modbus_master.read_or_write(1, WRITE_MULTI, 261, &flow_range_value);

      if (verification == 0) {

      }

    }

    register_adress = 10000;
  }

}

void IRAM_ATTR serial_interrupt() {

  if (Serial.available()) {
    register_adress = modbus_slave.poll();
  }
}

void IRAM_ATTR esc_button_interrupt() {

  uint32_t now = millis();
  int lvl = digitalRead(esc_button);

  if (lvl == LOW) {  // basış
    if (now < quiet_until) return;
    if (esc_locked) return;
    if (now - esc_tedge < DEBOUNCE_MS) return;
    if (pin_low(esc_button) && pin_low(esc_button)) {
      esc_count++;
      esc_locked = true;
      esc_tedge = now;
      quiet_until = now + QUIET_MS;
      button_state = press_esc;
      second_for_menu = 0;
      if (password_validity_time != 150) password_validity_time = 0;
    }
    return;
  }
  // bırakış
  if (esc_locked) {
    if (now - esc_tedge < DEBOUNCE_MS) return;
    if (pin_high(esc_button) && pin_high(esc_button)) {
      esc_locked = false;
      esc_tedge = now;
    }
  }
}

void IRAM_ATTR up_button_interrupt() {

  uint32_t now = millis();
  int lvl = digitalRead(up_button);

  if (lvl == LOW) {
    if (now < quiet_until) return;
    if (up_locked) return;
    if (now - up_tedge < DEBOUNCE_MS) return;
    if (pin_low(up_button) && pin_low(up_button)) {
      up_count++;
      up_locked = true;
      up_tedge = now;
      quiet_until = now + QUIET_MS;
      button_state = press_up;
      second_for_menu = 0;
      if (password_validity_time != 150) password_validity_time = 0;
    }
    return;
  }
  if (up_locked) {
    if (now - up_tedge < DEBOUNCE_MS) return;
    if (pin_high(up_button) && pin_high(up_button)) {
      up_locked = false;
      up_tedge = now;
    }
  }
}

void IRAM_ATTR down_button_interrupt() {
  uint32_t now = millis();
  int lvl = digitalRead(down_button);

  if (lvl == LOW) {
    if (now < quiet_until) return;
    if (down_locked) return;
    if (now - down_tedge < DEBOUNCE_MS) return;
    if (pin_low(down_button) && pin_low(down_button)) {
      down_count++;
      down_locked = true;
      down_tedge = now;
      quiet_until = now + QUIET_MS;
      button_state = press_down;
      second_for_menu = 0;
      if (password_validity_time != 150) password_validity_time = 0;
    }
    return;
  }
  if (down_locked) {
    if (now - down_tedge < DEBOUNCE_MS) return;
    if (pin_high(down_button) && pin_high(down_button)) {
      down_locked = false;
      down_tedge = now;
    }
  }
}

void IRAM_ATTR enter_button_interrupt() {

  uint32_t now = millis();
  int lvl = digitalRead(enter_button);

  if (lvl == LOW) {
    if (now < quiet_until) return;
    if (enter_locked) return;
    if (now - enter_tedge < DEBOUNCE_MS) return;
    if (pin_low(enter_button) && pin_low(enter_button)) {
      enter_count++;
      enter_locked = true;
      enter_tedge = now;
      quiet_until = now + QUIET_MS;
      button_state = press_enter;
      second_for_menu = 0;
      if (password_validity_time != 150) password_validity_time = 0;
    }
    return;
  }
  if (enter_locked) {
    if (now - enter_tedge < DEBOUNCE_MS) return;
    if (pin_high(enter_button) && pin_high(enter_button)) {
      enter_locked = false;
      enter_tedge = now;
    }
  }
}

/*******************************************************************************************************************************************/


/*******************************************************************************************************************************************/
// ANA EKRAN FONKSİYONLARI

// Yüzdekik bar graph
void bar_graph_new(uint16_t x, uint8_t y, uint16_t percentage_value, uint16_t first_color, uint16_t second_color, uint16_t frame_color) {

  if (theme_color == dark_theme) {
    tft.fillRectVGradient(x + (percentage_value * 2.8), y, 280 - (percentage_value * 2.8), 20, 0x2124, 0x2124);  // Bar ic kısım silmek için siyahla doldurur
    tft.setTextColor(TFT_WHITE, 0x2124);
    tft.fillRectVGradient(x, y, percentage_value * 2.8, 20, first_color, second_color);  // Bar ic renkli dolgusu
  } else {
    tft.fillRectVGradient(x + (percentage_value * 2.8), y, 280 - (percentage_value * 2.8), 20, TFT_WHITE, TFT_WHITE);  // Bar ic kısım silmek için beyazla doldurur
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
    tft.fillRectVGradient(x, y, percentage_value * 2.8, 20, first_color, second_color);  // Bar ic renkli dolgusu
  }

  if (percentage_value < 100 && percentage_value > 0) {
    tft.drawWideLine(x + percentage_value * 2.8 - 1, y, x + percentage_value * 2.8 - 1, y + 19, 2, TFT_RED, TFT_RED);  // Bar kırmızı cizgi
  }

  tft.drawRoundRect(x - 1, y - 1, 282, 22, 4, frame_color);  // Bar cercevesi

  // Bar cizgileri
  tft.drawLine(x + 13, y + 8, x + 13, y + 19, frame_color);
  tft.drawLine(x + 28, y + 8, x + 28, y + 19, frame_color);
  tft.drawLine(x + 43, y + 8, x + 43, y + 19, frame_color);
  tft.drawLine(x + 56, y + 8, x + 56, y + 19, frame_color);
  tft.drawLine(x + 69, y + 4, x + 69, y + 19, frame_color);  // uzun çizgi
  tft.drawLine(x + 83, y + 8, x + 83, y + 19, frame_color);
  tft.drawLine(x + 97, y + 8, x + 97, y + 19, frame_color);
  tft.drawLine(x + 111, y + 8, x + 111, y + 19, frame_color);
  tft.drawLine(x + 125, y + 8, x + 125, y + 19, frame_color);
  tft.drawLine(x + 140, y + 4, x + 140, y + 19, frame_color);  // uzun çizgi
  tft.drawLine(x + 153, y + 8, x + 153, y + 19, frame_color);
  tft.drawLine(x + 168, y + 8, x + 168, y + 19, frame_color);
  tft.drawLine(x + 181, y + 8, x + 181, y + 19, frame_color);
  tft.drawLine(x + 196, y + 8, x + 196, y + 19, frame_color);
  tft.drawLine(x + 209, y + 4, x + 209, y + 19, frame_color);  // uzun çizgi
  tft.drawLine(x + 223, y + 8, x + 223, y + 19, frame_color);
  tft.drawLine(x + 237, y + 8, x + 237, y + 19, frame_color);
  tft.drawLine(x + 251, y + 8, x + 251, y + 19, frame_color);
  tft.drawLine(x + 265, y + 8, x + 265, y + 19, frame_color);

  // Bar yuzde sayıları
  tft.setFreeFont(FSS9);
  tft.setTextColor(TFT_NAVY, TFT_WHITE);
  tft.drawString("0", x - 2, y + 28);
  // tft.drawString("25", x + 62, y + 28, FONT2);
  tft.drawString("50", x + 132, y + 28);
  // tft.drawString("75", x + 202, y + 28, FONT2);
  tft.drawString("100", x + 262, y + 28);
}

void bar_graph(uint16_t x, uint8_t y, uint16_t percentage_value, uint16_t first_color, uint16_t second_color, uint16_t frame_color) {

  if (theme_color == dark_theme) {
    tft.fillRectVGradient(x + (percentage_value * 2.5), y, 250 - (percentage_value * 2.5), 20, TFT_BLACK, TFT_BLACK);  // Bar ic kısım silmek için siyahla doldurur
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.fillRectVGradient(x, y, percentage_value * 2.5, 20, first_color, second_color);  // Bar ic renkli dolgusu
  } else {
    tft.fillRectVGradient(x + (percentage_value * 2.5), y, 250 - (percentage_value * 2.5), 20, TFT_CREAM, TFT_CREAM);  // Bar ic kısım silmek için siyahla doldurur
    tft.setTextColor(TFT_BLACK, TFT_CREAM);
    tft.fillRectVGradient(x, y, percentage_value * 2.5, 20, first_color, second_color);  // Bar ic renkli dolgusu
  }

  if (percentage_value < 100 && percentage_value > 0) {
    tft.drawWideLine(x + percentage_value * 2.5 - 1, y, x + percentage_value * 2.5 - 1, y + 19, 2, TFT_RED, TFT_RED);  // Bar kırmızı cizgi
  }

  tft.drawRoundRect(x - 1, y - 1, 252, 22, 4, frame_color);  // Bar cercevesi

  // Bar cizgileri
  tft.drawLine(x + 12, y + 8, x + 12, y + 19, frame_color);
  tft.drawLine(x + 25, y + 8, x + 25, y + 19, frame_color);
  tft.drawLine(x + 38, y + 8, x + 38, y + 19, frame_color);
  tft.drawLine(x + 50, y + 8, x + 50, y + 19, frame_color);
  tft.drawLine(x + 62, y + 4, x + 62, y + 19, frame_color);  // uzun cizgi
  tft.drawLine(x + 74, y + 8, x + 74, y + 19, frame_color);
  tft.drawLine(x + 87, y + 8, x + 87, y + 19, frame_color);
  tft.drawLine(x + 99, y + 8, x + 99, y + 19, frame_color);
  tft.drawLine(x + 112, y + 8, x + 112, y + 19, frame_color);
  tft.drawLine(x + 125, y + 4, x + 125, y + 19, frame_color);  // uzun cizgi
  tft.drawLine(x + 137, y + 8, x + 137, y + 19, frame_color);
  tft.drawLine(x + 150, y + 8, x + 150, y + 19, frame_color);
  tft.drawLine(x + 162, y + 8, x + 162, y + 19, frame_color);
  tft.drawLine(x + 175, y + 8, x + 175, y + 19, frame_color);
  tft.drawLine(x + 187, y + 4, x + 187, y + 19, frame_color);  // uzun cizgi
  tft.drawLine(x + 199, y + 8, x + 199, y + 19, frame_color);
  tft.drawLine(x + 212, y + 8, x + 212, y + 19, frame_color);
  tft.drawLine(x + 224, y + 8, x + 224, y + 19, frame_color);
  tft.drawLine(x + 237, y + 8, x + 237, y + 19, frame_color);

  // Bar yuzde sayıları
  tft.drawString("0", x - 2, y + 28, FONT2);
  tft.drawString("25", x + 55, y + 28, FONT2);
  tft.drawString("50", x + 118, y + 28, FONT2);
  tft.drawString("75", x + 180, y + 28, FONT2);
  tft.drawString("100", x + 234, y + 28, FONT2);
}

// Sigma işareti (toplam gösterimleri için)
void draw_sigma(uint16_t x, uint8_t y, uint16_t color) {

  tft.drawWideLine(x + 13, y, x, y, 2, color, color);
  tft.drawWideLine(x + 10, y + 10, x, y, 2, color, color);
  tft.drawWideLine(x, y + 20, x + 10, y + 10, 2, color, color);
  tft.drawWideLine(x + 13, y + 20, x, y + 20, 2, color, color);
}

// Açılış logo animasyonu
void beginning_logo_animation() {

  tft.pushImage(0, 0, 320, 240, better_solution);
  delay(5000);

  tft.fillScreen(TFT_BLACK);

  tft.pushImage(97, 52, 126, 137, bass_logo_kucuk);
  delay(5000);
}
/*******************************************************************************************************************************************/

 
/*******************************************************************************************************************************************/
// AYARLAR EKRANI FONKSİYONLARI

// Sayı giriş ekranı açılış fonksiyonu
void number_entry_opening_page(double read_number, bool sign, bool decimal) {

  char string_read_number[15];  // 7 basamak + 1 null karakter için yer ayrıldı
  sign_digit = sign;           // fonksiyonda girilen işaret durumunu farklı fonksiyonlarda kullanmak için global değişkene ata
  decimal_state = decimal; // okunan registerdaki sayının tam mı noktalı mı olduğunu tutar
  memset(number, 0, sizeof(number));  // Basamaklardaki rakamları sıfırla

  tft.fillScreen(0xc658);
  tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);
  tft.drawWideLine(260, 70, 60, 70, 4, TFT_RED, TFT_RED);  // uzun kırmızı çizgi
  tft.setTextColor(TFT_GREY, TFT_WHITE); 
  tft.setFreeFont(FSS18);
  
  // İşaretli sayıysa işaret koy değilse koyma
  if (sign == true) {
    digit = 0;  // yanıp sönen imleç dijit konumu
    if (read_number >= 0) {
      tft.drawString("+", 35, 101);
      sign_state = true; //sayı işaretsizse pozitif olarak ayarla
    } else {
      tft.drawWideLine(51, 119, 38, 119, 3, TFT_GREY, TFT_GREY);  // - işareti
      sign_state = false; //sayı negatif bilgisi
    }
  } else{
    digit = 1;                                     // yanıp sönen imleç dijit konumunu en soldaki rakamdan başlat
    sign_state = true; //sayı işaretsizse pozitif olarak ayarla
  } 
  if (read_number < 0) read_number = read_number * -1;  // okunan sayı negatifse pozitif yap

  tft.setFreeFont(FSS24);

  // Okunan sayıya göre nokta konumunu ayarla
    if (read_number >= 100000){
    sprintf(string_read_number, "%07.0f", read_number);
    write_as_character(string_read_number, read_number);
  } else if (read_number < 100000 && read_number >= 10000) {
    sprintf(string_read_number, "%07.1f", read_number);
    write_as_character(string_read_number, read_number);
  } else if (read_number < 10000 && read_number >= 1000) {
    sprintf(string_read_number, "%07.2f", read_number);
    write_as_character(string_read_number, read_number);
  } else if (read_number < 1000 && read_number >= 100) {
    sprintf(string_read_number, "%07.3f", read_number);
    write_as_character(string_read_number, read_number);
  } else if (read_number < 100 && read_number >= 10) {
    sprintf(string_read_number, "%07.4f", read_number);
    write_as_character(string_read_number, read_number);
  } else if (read_number < 10) {
    sprintf(string_read_number, "%07.5f", read_number);
    write_as_character(string_read_number, read_number);
  }
}

// Sayı giriş ekranındaki basamakları belirlenen bir double registerda topla
// Artı eksi durumunu, noktalı noktasız, 7 basamağa kadar girilen sayıyı bir double girildiği yazar
void number_entry() {
  uint8_t divider = 0;         // sayı ondalıksa nokta konumu
  read_or_write_number = 0;  // önceki girilen sayıyı temizle

  // Basamaklardaki ayrı rakamlarları tek bir değişkende topla
  for (uint8_t digit_count = 1; digit_count < 8; digit_count++) {

    if (number[digit_count] == 10) divider = digit_count;  // Sayı ondalıklıysa noktanın konumunu kaydet

    if (number[digit_count] != 0 && number[digit_count] != 10) {  // basamaklardaki 0 ve . karakterlerini (10 nokta karakterinin karşılığı olarak registerda tutuyor)
      if (divider != 0) {
        read_or_write_number = read_or_write_number + number[digit_count] * pow(10, (8 - digit_count));  // sayıda nokta varsa hesaplamayı doğru yapmak için noktadan sonraki basamakları ilave 10 ile çarp
      } else {
        read_or_write_number = read_or_write_number + number[digit_count] * pow(10, (7 - digit_count));  // sayı max 7 basamaklı olduğu için on üzeri yedi den geriye düşerek hesaplama yapılıyor
      }
    }
  }

  // Sayı ondalıksa noktasını koy
  if (divider != 0) {
    read_or_write_number = read_or_write_number / pow(10, (8 - divider));
  }

  if (sign_state == false ) read_or_write_number = read_or_write_number * -1;  // Sayı negatifse değişkenini negatife çevir
}

void cursor_movement() {
  static bool red_line_short = true;  // red line çizilimi kontrol değişkeni
  static uint8_t previous_half_second;

  // Sayı altı kırmızı imleç konum değiştir
  if (digit != previous_digit) {
    previous_half_second = 0;
    half_second = 1;
    red_line_short = false;
    if (digit > 7) {
      if (sign_digit == true) digit = 0;  // sayı işaretli ise işaret basamağından başla
      else digit = 1;
    }
    tft.drawWideLine(57 + previous_digit * 25, 147, 34 + previous_digit * 25, 147, 4, TFT_WHITE, TFT_WHITE);
    previous_digit = digit;
  }

  // Sayı altı kırmızı imleç var yok animasyon
  if (half_second != previous_half_second) {
    if (red_line_short == true) {  // red line çizilimi
      tft.drawWideLine(57 + digit * 25, 147, 34 + digit * 25, 147, 4, TFT_RED, TFT_RED);
    } else {
      tft.drawWideLine(57 + digit * 25, 147, 34 + digit * 25, 147, 4, TFT_WHITE, TFT_WHITE);
    }
    red_line_short = !red_line_short;
    previous_half_second = half_second;
  }
}

// Girilen string sayıyı, sayı giriş ekranına karakter karakter bastır
void write_as_character(char string[], double read_number) {
  tft.setTextColor(TFT_GREY, TFT_WHITE); 
  // Okunan sayının sağındaki sıfırları sola yazdır
  int8_t number_of_zero = 0, digit_count;
  if(read_number < 100000){
  for ( digit_count = 6; digit_count >= 0; digit_count--) {
    if (string[digit_count] == '0' || string[digit_count] == '\.') {
      tft.drawString("0", 58 + number_of_zero * 25, 100);
      number_of_zero++;
      if(string[digit_count] == '\.') break;
    } else break;
  }
  }

  // Okunan sayının sağındaki sıfır kadar sağa ötele
  for ( digit_count = 0; digit_count < strlen(string) - number_of_zero; digit_count++) {
    char char_buffer[2];
    char_buffer[0] = string[digit_count];
    char_buffer[1] = '\0';
    if (char_buffer[0] == '\.') {  // nokta karakterini boşluğuna ortala
      tft.drawString(char_buffer, 65 + (digit_count + number_of_zero) * 25, 100);
       number[digit_count + number_of_zero + 1] = 10; // modbus ile okunan sayıyıdaki noktayı basamağa yaz
    } else {
      tft.drawString(char_buffer, 58 + (digit_count + number_of_zero) * 25, 100);
       number[digit_count + number_of_zero + 1] = char_buffer[0] - '0'; // modbus ile okunan sayıyı basamaklara yaz
    }
  }

}

// Digite karakteri yaz
void write_in_digit(int8_t *entered_number) {

  char char_buffer[2];
  uint8_t number_of_point = 0;

  if (*entered_number < 10) {  // 0 - 9 arasını direkt ekrana yaz
    sprintf(char_buffer, "%d", *entered_number);
  } else if (*entered_number == 10) {  // 9 dan sonra nokta karakteri olarak yaz
    if (decimal_state == false) {
      for (uint8_t digit_count = 1; digit_count < 8; digit_count++) {
        if (number[digit_count] == 10) number_of_point++;
      }

      if (number_of_point > 1 || digit == 1 || digit == 7) {  // Diğer basamaklarda nokta varsa bulunulan basamağa nokta yazma. İlk ve son basamağa da nokta yazma
        *entered_number = 0;
        sprintf(char_buffer, "%d", *entered_number);
      } else {  // Basamaklardan herhangi birinde nokta yoksa o basağa nokta koyabilirsin
        char_buffer[0] = '\.';
        char_buffer[1] = '\0';
      }
    } else {
      *entered_number = 0;
      sprintf(char_buffer, "%d", *entered_number);
    }

  } else if (*entered_number == 11) {  // nokta karakterinden sonra tekrar 0 dan başlat
    *entered_number = 0;
    sprintf(char_buffer, "%d", *entered_number);
  }

  tft.fillRect((digit * 25) + 34, 101, 24, 35, TFT_WHITE);  // Sayı yazmadan önce arka planı temizle

  if (char_buffer[0] == '\.') {  // nokta karakteri varsa, o basamakta boşluğuna ortala
    tft.drawString(char_buffer, 40 + digit * 25, 100);
  } else {
    tft.drawString(char_buffer, 34 + digit * 25, 100);
  }
}

// İmleç hangi basamaktaysa onun rakamını artır
void increase_digit_number() {

  tft.setFreeFont(FSS24);
  if (digit == 0) {
    sign_state = !sign_state;                              // okunan sayıda pozitif negatif işareti varsa göster yoksa gösterme
    tft.fillRect((digit * 25) + 34, 101, 24, 35, TFT_WHITE);  // İşaret yazmadan önce arka planı temizle
    if (sign_state) {
      tft.setFreeFont(FSS18);
      tft.drawString("+", 35, 101);
    } else {
      tft.drawWideLine(51, 119, 38, 119, 3, TFT_GREY, TFT_GREY);  // - işareti
    }
  } else if (digit == 1) {
    number[1]++;
    write_in_digit(&number[1]);
  } else if (digit == 2) {
    number[2]++;
    write_in_digit(&number[2]);
  } else if (digit == 3) {
    number[3]++;
    write_in_digit(&number[3]);
  } else if (digit == 4) {
    number[4]++;
    write_in_digit(&number[4]);
  } else if (digit == 5) {
    number[5]++;
    write_in_digit(&number[5]);
  } else if (digit == 6) {
    number[6]++;
    write_in_digit(&number[6]);
  } else if (digit == 7) {
    number[7]++;
    write_in_digit(&number[7]);
  }
}

// Şifre giriş ekranı için özel sayı yazma fonksiyonu (sayı altındaki fazlalık arka plan rengini temizler)
void draw_char(uint8_t entered_number, uint16_t x, uint16_t y, uint16_t fgcolor, uint16_t bgcolor) {
  tft.setFreeFont(FSSB24);
  tft.setTextColor(fgcolor, bgcolor);
  tft.drawNumber(entered_number, x, y);
  tft.fillRect(x, y + 39, 27, 10, TFT_BLACK);
}

// Büyüktür çizgisi
void draw_greather_than(uint16_t x, uint8_t y, uint16_t color) {
  tft.drawWideLine(x + 6, y + 6, x, y, 1, color, color);
  tft.drawWideLine(x, y + 12, x + 6, y + 6, 1, color, color);
}

// Yeşil tick işareti
void draw_tick(uint16_t x, uint8_t y, uint16_t color){
  tft.drawWideLine(x + 11, y + 13, x + 4, y + 7, 2, color, color); // kısa çizgi
  tft.drawWideLine(x + 21, y - 6, x + 11, y + 13, 2, color, color); // uzun çizgi
}



  /**
    * @brief Tik işareti koyan ya da silen fonksiyonlardır, global değişken olan tick location un durumuna göre barlarda tick oluşturur ve ya siler
    * @param tick_position_x Tick işaretinin x koordinatında başlama hizasıdır. Önerilen yazı başlangıcından 35 az olmasıdır
    */

void write_tick(uint16_t tick_position_x) {
  if (tick_location == 1) {
    draw_tick(tick_position_x, 50, TFT_DARKGREEN);
  } else if (tick_location == 2) {
    draw_tick(tick_position_x, 83, TFT_DARKGREEN);
  } else if (tick_location == 3) {
    draw_tick(tick_position_x, 116, TFT_DARKGREEN);
  } else if (tick_location == 4) {
    draw_tick(tick_position_x, 149, TFT_DARKGREEN);
  } else if (tick_location == 5) {
    draw_tick(tick_position_x, 182, TFT_DARKGREEN);
  } else if (tick_location == 6) {
    draw_tick(tick_position_x, 215, TFT_DARKGREEN);
  }
}

void delete_tick(uint16_t tick_position_x) {
  if (tick_location == 1) {
    draw_tick(tick_position_x, 50, TFT_WHITE);
  } else if (tick_location == 2) {
    draw_tick(tick_position_x, 83, TFT_WHITE);
  } else if (tick_location == 3) {
    draw_tick(tick_position_x, 116, TFT_WHITE);
  } else if (tick_location == 4) {
    draw_tick(tick_position_x, 149, TFT_WHITE);
  } else if (tick_location == 5) {
    draw_tick(tick_position_x, 182, TFT_WHITE);
  } else if (tick_location == 6) {
    draw_tick(tick_position_x, 215, TFT_WHITE);
  }
}




void write_tick_for_baud_rate() {
  if (baud_rate_value == 1200) {
    draw_tick(105, 50, TFT_DARKGREEN);
  } else if (baud_rate_value == 2400) {
    draw_tick(105, 83, TFT_DARKGREEN);
  } else if (baud_rate_value == 4800) {
    draw_tick(105, 116, TFT_DARKGREEN);
  } else if (baud_rate_value == 9600) {
    draw_tick(105, 149, TFT_DARKGREEN);
  } else if (baud_rate_value == 19200) {
    draw_tick(105, 182, TFT_DARKGREEN);
  } else if (baud_rate_value == 38400) {
    draw_tick(105, 215, TFT_DARKGREEN);
  }
}

void write_tick_for_parity_bit() {
  if (parity_bit_value == 0) {
    draw_tick(105, 50, TFT_DARKGREEN);
  } else if (parity_bit_value == 1) {
    draw_tick(105, 83, TFT_DARKGREEN);
  } else if (parity_bit_value == 2) {
    draw_tick(105, 116, TFT_DARKGREEN);
  }
}

void delete_tick_for_parity_bit() {
  if (parity_bit_value == 0) {
    draw_tick(105, 50, TFT_WHITE);
  } else if (parity_bit_value == 1) {
    draw_tick(105, 83, TFT_WHITE);
  } else if (parity_bit_value == 2) {
    draw_tick(105, 116, TFT_WHITE);
  }
}

void write_tick_for_sensor_freqency(uint16_t sensor_freqency_value) {
  if (sensor_freqency_value == 0) {
    draw_tick(105, 50, TFT_DARKGREEN);
  } else if (sensor_freqency_value == 1) {
    draw_tick(105, 83, TFT_DARKGREEN);
  } else if (sensor_freqency_value == 2) {
    draw_tick(105, 116, TFT_DARKGREEN);
  }
}

void delete_tick_for_sensor_freqency(uint16_t sensor_freqency_value) {
  if (sensor_freqency_value == 0) {
    draw_tick(105, 50, TFT_WHITE);
  } else if (sensor_freqency_value == 1) {
    draw_tick(105, 83, TFT_WHITE);
  } else if (sensor_freqency_value == 2) {
    draw_tick(105, 116, TFT_WHITE);
  }
}

void write_tick_for_application_mode(uint16_t application_mode_value) {
  if (application_mode_value == 0) {
    draw_tick(80, 50, TFT_DARKGREEN);
  } else if (application_mode_value == 9) {
    draw_tick(80, 83, TFT_DARKGREEN);
  }
}

void delete_tick_for_application_mode(uint16_t application_mode_value){
  if (application_mode_value == 0) {
    draw_tick(80, 50, TFT_WHITE);
  } else if (application_mode_value == 9) {
    draw_tick(80, 83, TFT_WHITE);
  }
}

void write_tick_for_fine_calibration_en(uint16_t fine_calibration_en) {
  if (fine_calibration_en == 1) {
    draw_tick(80, 50, TFT_DARKGREEN);
  } else if (fine_calibration_en == 0) {
    draw_tick(80, 83, TFT_DARKGREEN);
  }
}

void delete_tick_for_fine_calibration_en(uint16_t fine_calibration_en){
  if (fine_calibration_en == 1) {
    draw_tick(80, 50, TFT_WHITE);
  } else if (fine_calibration_en == 0) {
    draw_tick(80, 83, TFT_WHITE);
  }
}

void write_tick_for_stop_bit() {
  if (stop_bit_value == 1) {
    draw_tick(120, 50, TFT_DARKGREEN);
  } else if (stop_bit_value == 2) {
    draw_tick(120, 83, TFT_DARKGREEN);
  }
}

void delete_tick_for_stop_bit(){
  if (stop_bit_value == 1) {
    draw_tick(120, 50, TFT_WHITE);
  } else if (stop_bit_value == 2) {
    draw_tick(120, 83, TFT_WHITE);
  }
}

void write_tick_for_flow_unit() {
  if (flow_unit_value == m3_s || flow_unit_value == kg_s || flow_unit_value == ft3_s || flow_unit_value == usgal_s) {
    draw_tick(85, 50, TFT_DARKGREEN);
  } else if (flow_unit_value == m3_m || flow_unit_value == kg_m || flow_unit_value == ft3_m || flow_unit_value == usgal_m) {
    draw_tick(85, 83, TFT_DARKGREEN);
  } else if (flow_unit_value == m3_h || flow_unit_value == kg_h || flow_unit_value == ft3_h || flow_unit_value == usgal_h) {
    draw_tick(85, 116, TFT_DARKGREEN);
  } else if (flow_unit_value == L_s || flow_unit_value == t_s || flow_unit_value == ukgal_s || flow_unit_value == Lb_s) {
    draw_tick(85, 149, TFT_DARKGREEN);
  } else if (flow_unit_value == L_m || flow_unit_value == t_m || flow_unit_value == ukgal_m || flow_unit_value == Lb_m) {
    draw_tick(85, 182, TFT_DARKGREEN);
  } else if (flow_unit_value == L_h || flow_unit_value == t_h || flow_unit_value == ukgal_h || flow_unit_value == Lb_h) {
    draw_tick(85, 215, TFT_DARKGREEN);
  }
}

void delete_tick_for_flow_unit() {
  if (flow_unit_value == m3_s || flow_unit_value == kg_s || flow_unit_value == ft3_s || flow_unit_value == usgal_s) {
    draw_tick(85, 50, TFT_WHITE);
  } else if (flow_unit_value == m3_m || flow_unit_value == kg_m || flow_unit_value == ft3_m || flow_unit_value == usgal_m) {
    draw_tick(85, 83, TFT_WHITE);
  } else if (flow_unit_value == m3_h || flow_unit_value == kg_h || flow_unit_value == ft3_h || flow_unit_value == usgal_h) {
    draw_tick(85, 116, TFT_WHITE);
  } else if (flow_unit_value == L_s || flow_unit_value == t_s || flow_unit_value == ukgal_s || flow_unit_value == Lb_s) {
    draw_tick(85, 149, TFT_WHITE);
  } else if (flow_unit_value == L_m || flow_unit_value == t_m || flow_unit_value == ukgal_m || flow_unit_value == Lb_m) {
    draw_tick(85, 182, TFT_WHITE);
  } else if (flow_unit_value == L_h || flow_unit_value == t_h || flow_unit_value == ukgal_h || flow_unit_value == Lb_h) {
    draw_tick(85, 215, TFT_WHITE);
  }
}

void write_tick_for_density_unit() {
  if (density_unit_value == 0) {
    draw_tick(90, 50, TFT_DARKGREEN);
  } else if (density_unit_value == 1) {
    draw_tick(90, 83, TFT_DARKGREEN);
  } else if (density_unit_value == 2) {
    draw_tick(90, 116, TFT_DARKGREEN);
  } else if (density_unit_value == 3) {
    draw_tick(90, 149, TFT_DARKGREEN);
  } else if (density_unit_value == 4) {
    draw_tick(90, 182, TFT_DARKGREEN);
  }
}

void delete_tick_for_density_unit() {
  if (density_unit_value == 0) {
    draw_tick(90, 50, TFT_WHITE);
  } else if (density_unit_value == 1) {
    draw_tick(90, 83, TFT_WHITE);
  } else if (density_unit_value == 2) {
    draw_tick(90, 116, TFT_WHITE);
  } else if (density_unit_value == 3) {
    draw_tick(90, 149, TFT_WHITE);
  } else if (density_unit_value == 4) {
    draw_tick(90, 182, TFT_WHITE);
  }
}

void write_tick_for_analog_out_1_type() {
  if (analog_out_1_type == 1) {
    draw_tick(76, 50, TFT_DARKGREEN);
  } else if (analog_out_1_type == 2) {
    draw_tick(76, 83, TFT_DARKGREEN);
  } else if (analog_out_1_type == 3) {
    draw_tick(76, 116, TFT_DARKGREEN);
  }
}

void delete_tick_for_analog_out_1_type() {
  if (analog_out_1_type == 1) {
    draw_tick(76, 50, TFT_WHITE);
  } else if (analog_out_1_type == 2) {
    draw_tick(76, 83, TFT_WHITE);
  } else if (analog_out_1_type == 3) {
    draw_tick(76, 116, TFT_WHITE);
  }
}

void write_tick_for_analog_out_2_type() {
  if (analog_out_2_type == _ma_4_20) {
    draw_tick(76, 50, TFT_DARKGREEN);
  } else if (analog_out_2_type == _ma_4_12_20) {
    draw_tick(76, 83, TFT_DARKGREEN);
  }
}

void delete_tick_for_analog_out_2_type() {
  if (analog_out_2_type == _ma_4_20) {
    draw_tick(76, 50, TFT_WHITE);
  } else if (analog_out_2_type == _ma_4_12_20) {
    draw_tick(76, 83, TFT_WHITE);
  }
}

void write_tick_for_analog_out_3_type() {
  if (analog_out_3_type == v_0_10) {
    draw_tick(76, 50, TFT_DARKGREEN);
  } else if (analog_out_3_type == v_0_5_10) {
    draw_tick(76, 83, TFT_DARKGREEN);
  }
}

void delete_tick_for_analog_out_3_type() {
  if (analog_out_3_type == v_0_10) {
    draw_tick(76, 50, TFT_WHITE);
  } else if (analog_out_3_type == v_0_5_10) {
    draw_tick(76, 83, TFT_WHITE);
  }
}

void write_tick_for_analog_out_2_test() {
  if (analog_out_2_type == ma_4) {
    draw_tick(76, 50, TFT_DARKGREEN);
  } else if (analog_out_2_type == ma_12) {
    draw_tick(76, 83, TFT_DARKGREEN);
  } else if (analog_out_2_type == ma_20) {
    draw_tick(76, 116, TFT_DARKGREEN);
  }
}

void delete_tick_for_analog_out_2_test() {
  if (analog_out_2_type == ma_4) {
    draw_tick(76, 50, TFT_WHITE);
  } else if (analog_out_2_type == ma_12) {
    draw_tick(76, 83, TFT_WHITE);
  } else if (analog_out_2_type == ma_20) {
    draw_tick(76, 116, TFT_WHITE);
  }
}

void write_tick_for_digital_out(){
   if (digital_out_selection == 2) {
    draw_tick(40, 83, TFT_DARKGREEN);
  } else if (digital_out_selection == 3) {
    draw_tick(40, 116, TFT_DARKGREEN);
  } else if (digital_out_selection == 5) {
    draw_tick(40, 149, TFT_DARKGREEN);
  } else if (digital_out_selection == 6) {
    draw_tick(40, 182, TFT_DARKGREEN);
  } else if (digital_out_selection == 4) {
    draw_tick(40, 215, TFT_DARKGREEN);
  } 
}

void delete_tick_for_digital_out() {
    if (digital_out_selection == 2) {
    draw_tick(40, 83, TFT_WHITE);
  } else if (digital_out_selection == 3) {
    draw_tick(40, 116, TFT_WHITE);
  } else if (digital_out_selection == 5) {
    draw_tick(40, 149, TFT_WHITE);
  } else if (digital_out_selection == 6) {
    draw_tick(40, 182, TFT_WHITE);
  } else if (digital_out_selection == 4) {
    draw_tick(40, 215, TFT_WHITE);
  } 
}

void write_tick_for_pulse_freqency(){
   if (digital_out_selection == 1) {
    draw_tick(40, 50, TFT_DARKGREEN);
  } else if (digital_out_selection == 0) {
    draw_tick(40, 83, TFT_DARKGREEN);
  }
}

void delete_tick_for_pulse_freqency(){
   if (digital_out_selection == 1) {
    draw_tick(40, 50, TFT_WHITE);
  } else if (digital_out_selection == 0) {
    draw_tick(40, 83, TFT_WHITE);
  }
}

void write_tick_for_flow_direction() {

  if (measure_mode_value == 1) {
    draw_tick(50, 50, TFT_DARKGREEN);
  } else if (measure_mode_value == 0) {
    draw_tick(83, 83, TFT_DARKGREEN);
  } else if (measure_mode_value == 2) {
    draw_tick(83, 116, TFT_DARKGREEN);
  }
}

void delete_tick_for_flow_direction() {

  if (measure_mode_value == 1) {
    draw_tick(50, 50, TFT_WHITE);
  } else if (measure_mode_value == 0) {
    draw_tick(83, 83, TFT_WHITE);
  } else if (measure_mode_value == 2) {
    draw_tick(83, 116, TFT_WHITE);
  }
}

void covert_flow_unit_value() {
  // okunan değerlerin enum daki sıralama ile denkleştirilmesi
  if (flow_unit_value == 0) {
    cursor = m3_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = m3_s;  // birimi sabit tutan register
  } else if (flow_unit_value == 1) {
    cursor = m3_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = m3_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 2) {
    cursor = m3_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = m3_h;  // birimi sabit tutan register
  } else if (flow_unit_value == 3) {
    cursor = L_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = L_s;  // birimi sabit tutan register  m3_s,
  } else if (flow_unit_value == 4) {
    cursor = L_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = L_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 5) {
    cursor = L_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = L_h;  // birimi sabit tutan register
  } else if (flow_unit_value == 6) {
    cursor = ft3_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = ft3_s;  // birimi sabit tutan register
  } else if (flow_unit_value == 7) {
    cursor = ft3_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = ft3_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 8) {
    cursor = ft3_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = ft3_h;  // birimi sabit tutan register
  } else if (flow_unit_value == 9) {
    cursor = ukgal_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = ukgal_s;  // birimi sabit tutan register
  } else if (flow_unit_value == 10) {
    cursor = ukgal_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = ukgal_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 11) {
    cursor = ukgal_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = ukgal_h;  // birimi sabit tutan register
  } else if (flow_unit_value == 12) {
    cursor = usgal_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = usgal_s;  // birimi sabit tutan register
  } else if (flow_unit_value == 13) {
    cursor = usgal_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = usgal_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 14) {
    cursor = usgal_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = usgal_h;  // birimi sabit tutan register
  } else if (flow_unit_value == 15) {
    cursor = kg_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = kg_s;  // birimi sabit tutan register
  } else if (flow_unit_value == 16) {
    cursor = kg_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = kg_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 17) {
    cursor = kg_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = kg_h;  // birimi sabit tutan register
  } else if (flow_unit_value == 18) {
    cursor = t_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = t_s;  // birimi sabit tutan register
  } else if (flow_unit_value == 19) {
    cursor = t_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = t_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 20) {
    cursor = t_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = t_h;  // birimi sabit tutan register
  } else if (flow_unit_value == 21) {
    cursor = Lb_s;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = Lb_s;  // birimi sabit tutan register
  } else if (flow_unit_value == 22) {
    cursor = Lb_m;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = Lb_m;  // birimi sabit tutan register
  } else if (flow_unit_value == 23) {
    cursor = Lb_h;         // ilk açılışta seçili birimi göstemesi için
    flow_unit_value = Lb_h;  // birimi sabit tutan register
  }
}

void write_tick_for_total_unit() {
  if (total_unit_value == m3_ || total_unit_value == t_) {
    draw_tick(85, 50, TFT_DARKGREEN);
  } else if (total_unit_value == L_ || total_unit_value == Lb_) {
    draw_tick(85, 83, TFT_DARKGREEN);
  } else if (total_unit_value == ft3_) {
    draw_tick(85, 116, TFT_DARKGREEN);
  } else if (total_unit_value == ukgal_) {
    draw_tick(85, 149, TFT_DARKGREEN);
  } else if (total_unit_value == usgal_) {
    draw_tick(85, 182, TFT_DARKGREEN);
  } else if (total_unit_value == kg_) {
    draw_tick(85, 215, TFT_DARKGREEN);
  }
}

void delete_tick_for_total_unit() {
  if (total_unit_value == m3_ || total_unit_value == t_) {
    draw_tick(85, 50, TFT_WHITE);
  } else if (total_unit_value == L_ || total_unit_value == Lb_) {
    draw_tick(85, 83, TFT_WHITE);
  } else if (total_unit_value == ft3_ && page_number != 2) {
    draw_tick(85, 116, TFT_WHITE);
  } else if (total_unit_value == ukgal_ && page_number != 2) {
    draw_tick(85, 149, TFT_WHITE);
  } else if (total_unit_value == usgal_ && page_number != 2) {
    draw_tick(85, 182, TFT_WHITE);
  } else if (total_unit_value == kg_ && page_number != 2) {
    draw_tick(85, 215, TFT_WHITE);
  }
}

void covert_total_unit_value() {
  // okunan değerlerin enum daki sıralama ile denkleştirilmesi
  if (total_unit_value == 0 || total_unit_value == 1 ||  total_unit_value == 2 || total_unit_value == 3 ) {
    cursor = m3_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = m3_;  // birimi sabit tutan register
  } else if (total_unit_value == 4 || total_unit_value == 5 ||  total_unit_value == 6 || total_unit_value == 7 ) {
    cursor = L_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = L_;  // birimi sabit tutan register
  } else if (total_unit_value == 8 || total_unit_value == 9 ||  total_unit_value == 10 || total_unit_value == 11 ) {
    cursor = ft3_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = ft3_;  // birimi sabit tutan register
  } else if (total_unit_value == 12 || total_unit_value == 13 ||  total_unit_value == 14 || total_unit_value == 15 ) {
    cursor = ukgal_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = ukgal_;  // birimi sabit tutan register  m3_s,
  } else if (total_unit_value == 16 || total_unit_value == 17 ||  total_unit_value == 18 || total_unit_value == 19 ) {
    cursor = usgal_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = usgal_;  // birimi sabit tutan register
  } else if (total_unit_value == 20 || total_unit_value == 21 ||  total_unit_value == 22 || total_unit_value == 23 ) {
    cursor = kg_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = kg_;  // birimi sabit tutan register
  } else if (total_unit_value == 24 || total_unit_value == 25 ||  total_unit_value == 26 || total_unit_value == 27 ) {
    cursor = t_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = t_;  // birimi sabit tutan register
  } else if (total_unit_value == 28 || total_unit_value == 29 ||  total_unit_value == 30 || total_unit_value == 31 ) {
    cursor = Lb_;         // ilk açılışta seçili birimi göstemesi için
    total_unit_value = Lb_;  // birimi sabit tutan register
  }
}

void write_tick_for_reverse_colors() {
  if (theme_color == dark_theme) {
    draw_tick(80, 50, TFT_DARKGREEN);
  } else {
    draw_tick(80, 83, TFT_DARKGREEN);
  }
}

void delete_tick_for_reverse_colors(){
  if (theme_color == dark_theme) {
    draw_tick(80, 50, TFT_WHITE);
  } else {
    draw_tick(80, 83, TFT_WHITE);
  }
}


// Settings menü barları
void menu_screen_opening_page() {

  bool high_light = true;
  bool low_light = false;
  previous_cursor = previous_cursor - 1;  // manü ekranı ilk açıldığında kaldığı yeri göstermesi için // FIXME: emin değilim


  tft.fillScreen(0xc658);

  // PARCA PARCA MENU SECENEKLERINI BAS
  basic_settings_bar(high_light);
  advanced_setting_bar(high_light);
  output_bar(high_light);
  communication_bar(high_light);
  display_bar(high_light);
  data_logging_bar(high_light);
  information_bar(high_light);

  // DIK ACIDA MENU VE P3 YAZISINI BAS
  tft.setRotation(0);
  tft.setTextColor(TFT_BLACK, 0xc658);
  tft.drawString(" 3", 219, 2, FONT2);
  if (language == English) {
    tft.drawString(english[13], 215, 2, FONT2);  // P
    tft.drawString(english[11], 105, 2, FONT2);  // MENU
  } else if (language == Turkish) {
    tft.drawString(turkish[13], 215, 2, FONT2);  // S
    tft.drawString(turkish[11], 105, 2, FONT2);  // MENU
  }
  tft.setRotation(1);
}

void basic_settings_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  draw_greather_than(268, 15, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[4], 80, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[4], 80, 13);
  }
  tft.pushImage(33, 7, 27, 26, basic_settings_icon);
}

void advanced_setting_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[5], 80, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[5], 80, 46);
  }
  tft.pushImage(33, 40, 27, 26, advanced_setting_icon);
}

void output_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[6], 80, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[6], 80, 79);
  }
  tft.pushImage(33, 73, 27, 26, output_icon);
}

void communication_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[7], 80, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[7], 80, 112);
  }

  tft.pushImage(33, 106, 27, 26, communication_icon);
}

void display_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[8], 80, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[8], 80, 145);
  }
  tft.pushImage(33, 139, 27, 26, display_icon);
}

void data_logging_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 180, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[9], 80, 178);
  } else if (language == Turkish) {
    tft.drawString(turkish[9], 80, 178);
  }
  tft.pushImage(33, 172, 27, 26, data_logging_icon);
}

void information_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 213, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[10], 80, 211);
  } else if (language == Turkish) {
    tft.drawString(turkish[10], 80, 211);
  }
  tft.pushImage(33, 205, 27, 26, Information_icon);
}


// Basic settings menü barları
void centered_basic_settings_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[4], 110, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[4], 110, 13);
  }
  tft.pushImage(70, 7, 27, 26, basic_settings_icon);
}

void centered_flow_parameters_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[16], 105, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[16], 105, 13);
  }
  tft.pushImage(65, 7, 27, 26, basic_settings_icon);
}

void centered_flow_unit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[32], 112, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[32], 112, 13);
  }
  tft.pushImage(72, 7, 27, 26, basic_settings_icon);
}

void centered_total_unit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[110], 112, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[110], 112, 13);
  }
  tft.pushImage(72, 7, 27, 26, basic_settings_icon);
}

void centered_language_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[15], 140, 13);
     tft.pushImage(100, 7, 27, 26, basic_settings_icon);
  } else if (language == Turkish) {
    tft.drawString(turkish[15], 160, 13);
     tft.pushImage(120, 7, 27, 26, basic_settings_icon);
  }
 
}

void centered_flow_direction_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[37], 105, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[37], 105, 13);
  }
  tft.pushImage(65, 7, 27, 26, basic_settings_icon);
}

void centered_units_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[109], 105, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[109], 105, 13);
  }
  tft.pushImage(65, 7, 27, 26, basic_settings_icon);
}

void languages_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[15], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[15], 45, 46);
  }
 
}

void flow_parameters_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[16], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[16], 45, 79);
  }

}

void sensor_size_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[17], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[17], 45, 112);
  }

}

void units_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[109], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[109], 45, 46);
  }

}

void flow_unit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[32], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[32], 45, 46);
  }

}

void total_unit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[110], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[110], 45, 79);
  }

}

void flow_range_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[33], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[33], 45, 79);
  }

}

void decimal_point_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[34], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[34], 45, 112);
  }

}

void response_time_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[35], 45, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[35], 45, 145);
  }

}

void flow_cut_off_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 180, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[36], 45, 178);
  } else if (language == Turkish) {
    tft.drawString(turkish[36], 45, 178);
  }

}

void flow_direction_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 213, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[37], 45, 211);
  } else if (language == Turkish) {
    tft.drawString(turkish[37], 45, 211);
  }

}

void forward_reverse_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[89], 80, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[89], 80, 46);
  }
 
}

void forward_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[80], 120, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[80], 120, 79);
  }

}

void reverse_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[81], 120, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[81], 120, 112);
  }

}

void english_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[78], 134, 46);
  } else if (language == Turkish) {
    tft.drawString(english[78], 134, 46);
  }
 
}

void turkish_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(turkish[79], 134, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[79], 134, 79);
  }

}

void m3_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[4], 135, 46);
}

void m3_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[5], 135, 79);
}

void m3_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[6], 135, 112);
}

void L_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[7], 142, 145);
}

void L_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[8], 142, 178);
}

void L_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[9], 142, 211);
}

void ft3_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[10], 135, 46);
}

void ft3_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[11], 135, 79);
}

void ft3_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[12], 135, 112);
}

void ukgal_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[13], 127, 145);
}

void ukgal_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[14], 127, 178);
}

void ukgal_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[15], 127, 211);
}

void usgal_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[16], 124, 46);
}

void usgal_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[17], 124, 79);
}

void usgal_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[18], 124, 112);
}

void t_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[22], 142, 145);
}

void t_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[23], 142, 178);
}

void t_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[24], 142, 211);
}

void kg_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[19], 135, 46);
}

void kg_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[20], 135, 79);
}

void kg_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[21], 135, 112);
}

void Lb_s_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[25], 135, 145);
}

void Lb_m_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[26], 135, 178);
}

void Lb_h_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[27], 135, 211);
}

void m3_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[35], 142, 46);
}

void L_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[36], 142, 79);
}

void ft3_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[37], 142, 112);
}

void ukgal_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[38], 142, 145);
}

void usgal_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[39], 142, 178);
}

void kg_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[40], 142, 211);
}

void t_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[41], 150, 46);
}

void Lb_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[42], 150, 79);
}


// Advanced settings menü barları
void centered_advanced_settings_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[5], 98, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[5], 98, 13);
  }
  tft.pushImage(61, 7, 27, 26, advanced_setting_icon);
}

void centered_zero_functions_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[18], 98, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[18], 98, 13);
  }
  tft.pushImage(61, 7, 27, 26, advanced_setting_icon);
}

void centered_automatic_zero_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[48], 107, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[48], 107, 13);
  }
  tft.pushImage(70, 7, 27, 26, advanced_setting_icon);
}

void centered_density_conductivity_alarm_valuebar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[19], 85, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[19], 85, 13);
  }
  tft.pushImage(45, 7, 27, 26, advanced_setting_icon);
}

void centered_density_unit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[74], 125, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[74], 125, 13);
  }
  tft.pushImage(84, 7, 27, 26, advanced_setting_icon);
}

void centered_reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[21], 150, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[21], 150, 13);
  }
  tft.pushImage(108, 7, 27, 26, advanced_setting_icon);
}

void centered_factory_reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[95], 115, 13);
      tft.pushImage(78, 7, 27, 26, advanced_setting_icon);

  } else if (language == Turkish) {
    tft.drawString(turkish[95], 103, 13);
      tft.pushImage(66, 7, 27, 26, advanced_setting_icon);

  }
}

void centered_total_forward_reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[96], 94, 13);
      tft.pushImage(57, 7, 27, 26, advanced_setting_icon);

  } else if (language == Turkish) {
    tft.drawString(turkish[96], 106, 13);
      tft.pushImage(69, 7, 27, 26, advanced_setting_icon);

  }
}

void centered_total_backward_reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[97], 90, 13);
      tft.pushImage(53, 7, 27, 26, advanced_setting_icon);

  } else if (language == Turkish) {
    tft.drawString(turkish[97], 106, 13);
      tft.pushImage(69, 7, 27, 26, advanced_setting_icon);

  }
}

void centered_meter_k_factor_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[23], 98, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[23], 98, 13);
  }
  tft.pushImage(61, 7, 27, 26, advanced_setting_icon);
}

void centered_fine_calibration_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[22], 98, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[22], 98, 13);
  }
  tft.pushImage(61, 7, 27, 26, advanced_setting_icon);
}

void centered_application_mode_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[115], 98, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[115], 98, 13);
  }
  tft.pushImage(61, 7, 27, 26, advanced_setting_icon);
}

void centered_sensor_freqency_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[116], 98, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[116], 98, 13);
  }
  tft.pushImage(61, 7, 27, 26, advanced_setting_icon);
}

void centered_fine_calibration_en_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[125], 98, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[125], 98, 13);
  }
  tft.pushImage(61, 7, 27, 26, advanced_setting_icon);
}

void zero_function_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[18], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[18], 45, 46);
  }
 
}

void automatic_zero_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[48], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[48], 45, 46);
  }
 
}

void manual_zero_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[49], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[49], 45, 79);
  }

}

void density_conductivity_alarm_valuebar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[19], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[19], 45, 79);
  }

}

void density_unit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[74], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[74], 45, 46);
  }
 
}

void density_value_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[75], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[75], 45, 79);
  }

}

void conductivity__bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[113], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[113], 45, 112);
  }

}

void g_cm3_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

  tft.drawString(units[0], 125, 46);
}

void kg_m3_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[1], 125, 79);
}

void lb_ukgal_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[2], 125, 112);
}

void lb_usgal_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[28], 125, 145);
}

void lb_f3_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 169, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 169, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[3], 125, 178);

}

void change_password_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[20], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[20], 45, 112);
  }

}

void reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[21], 45, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[21], 45, 145);
  }

}

void factory_reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[95], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[95], 45, 46);
  }
 
}

void no_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[91], 147, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[91], 134, 46);
  }
 
}

void yes_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[90], 143, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[90], 140, 79);
  }

}

void total_forward_reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[96], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[96], 45, 79);
  }

}

void total_backward_reset_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[97], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[97], 45, 112);
  }

}

void meter_k_factor_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 180, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[23], 45, 178);
  } else if (language == Turkish) {
    tft.drawString(turkish[23], 45, 178);
  }

}

void meter_factor_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[112], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[112], 45, 46);
  }
 
}

void k_factor_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[108], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[108], 45, 79);
  }

}

void fine_calibration_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 213, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[22], 45, 211);
  } else if (language == Turkish) {
    tft.drawString(turkish[22], 45, 211);
  }

}

void sensitivity_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[111], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[111], 45, 46);
  }
 
}

void application_mode_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[115], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[115], 45, 79);
  }

}

void sensor_freqency_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[116], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[116], 45, 112);
  }

}

void fine_calibration_en_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[125], 45, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[125], 45, 145);
  }

}

void _1_st_point_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 180, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[117], 45, 178);
  } else if (language == Turkish) {
    tft.drawString(turkish[117], 45, 178);
  }

}

void _1_st_value_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 213, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[118], 45, 211);
  } else if (language == Turkish) {
    tft.drawString(turkish[118], 45, 211);
  }

}

void _2_st_point_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[119], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[119], 45, 46);
  }
 
}

void _2_st_value_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[120], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[120], 45, 79);
  }

}

void _3_st_point_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[121], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[121], 45, 112);
  }

}

void _3_st_value_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[122], 45, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[122], 45, 145);
  }

}

void _4_st_point_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 180, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[123], 45, 178);
  } else if (language == Turkish) {
    tft.drawString(turkish[123], 45, 178);
  }

}

void _4_st_value_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 213, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[124], 45, 211);
  } else if (language == Turkish) {
    tft.drawString(turkish[124], 45, 211);
  }

}
 
void _5_Hz_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
    tft.drawString(units[43], 138, 46);
 
}

void _4_167_Hz_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
    tft.drawString(units[44], 138, 79);

}

void _3_125_Hz_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
    tft.drawString(units[45], 138, 112);
}

void normal_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

  if (language == English) {
    tft.drawString(english[126], 120, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[126], 120, 46);
  }
}

void pulp_or_slurry_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

  if (language == English) {
    tft.drawString(english[127], 120, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[127], 120, 79);
  }


}

void enable_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

  if (language == English) {
    tft.drawString(english[128], 120, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[128], 120, 46);
  }

}

void disable_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

  if (language == English) {
    tft.drawString(english[129], 120, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[129], 120, 79);
  }

}


// Output menü barları
void centered_output_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[6], 140, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[6], 140, 13);
  }
  tft.pushImage(103, 7, 27, 26, output_icon);
}

void centered_analog_output_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[24], 117, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[24], 117, 13);
  }
  tft.pushImage(80, 7, 27, 26, output_icon);
}

void centered_analog_output_1_mA_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[82], 104, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[82], 104, 13);
  }
  tft.pushImage(67, 7, 27, 26, output_icon);
}

void centered_analog_output_2_mA_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[83], 104, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[83], 104, 13);
  }
  tft.pushImage(67, 7, 27, 26, output_icon);
}

void centered_analog_output_3_VDC_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[101], 100, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[101], 100, 13);
  }
  tft.pushImage(64, 7, 27, 26, output_icon);
}

void centered_digital_output_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[25], 117, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[25], 117, 13);
  }
  tft.pushImage(80, 7, 27, 26, output_icon);
}

void centered_funciton_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[47], 135, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[47], 135, 13);
  }
  tft.pushImage(98, 7, 27, 26, output_icon);
}

void centered_output_type_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[84], 117, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[84], 117, 13);
  }
  tft.pushImage(80, 7, 27, 26, output_icon);
}

void centered_test_mode_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[102], 117, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[102], 117, 13);
  }
  tft.pushImage(80, 7, 27, 26, output_icon);
}

void centered_output_calibration_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[103], 104, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[103], 104, 13);
  }
  tft.pushImage(67, 7, 27, 26, output_icon);
}

void centered_digital_out_1_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[55], 122, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[55], 122, 13);
  }
  tft.pushImage(80, 7, 27, 26, output_icon);
}

void centered_digital_out_2_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[56], 122, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[56], 122, 13);
  }
  tft.pushImage(85, 7, 27, 26, output_icon);
}

void centered_digital_out_3_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[57], 122, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[57], 122, 13);
  }
  tft.pushImage(85, 7, 27, 26, output_icon);
}

void centered_pulse_frequency_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[61], 105, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[61], 105, 13);
  }
  tft.pushImage(68, 7, 27, 26, output_icon);
}

void analog_output_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[24], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[24], 45, 46);
  }
 
}

void digital_output_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[25], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[25], 45, 79);
  }

}

void analog_out_1_mA_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[82], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[82], 45, 46);
  }
 
}

void analog_out_2_mA_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[83], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[83], 45, 79);
  }

}

void analog_out_3_VDC_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[101], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[101], 45, 112);
  }

}

void ma_4_20_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[54], 110, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[54], 110, 46);
  }
 
}

void ma_4_12_20_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[60], 110, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[60], 110, 79);
  }

}

void ma_0_20_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[59], 110, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[59], 110, 112);
  }

}

void ma_4_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[30], 130, 46);
}

void ma_12_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[31], 130, 79);
}

void ma_20_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[32], 130, 112);
}

void function_analog_out_1_mA_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[47], 45, 46);
    tft.drawString("- Flow", 130, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[47], 45, 46);
    tft.drawString("- Akis", 150, 46);
  }
 
}

void function_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[47], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[47], 45, 46);
  }
 
}

void output_type_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[84], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[84], 45, 79);
  }

}

void test_mode_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);

  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[102], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[102], 45, 112);
  }
}

void output_calibration_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 136, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 136, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);

  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[103], 45, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[103], 45, 145);
  }
}

void flow_type_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 245, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[85], 110, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[85], 110, 46);
  }
 
}

void temperature_type_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[86], 110, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[86], 110, 79);
  }

}

void conductivity_type_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[87], 110, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[87], 110, 112);
  }

}

void adjust_4_ma_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[104], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[104], 45, 46);
  }
 
}

void adjust_20_ma_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[105], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[105], 45, 79);
  }

}

void adjust_0_V_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[106], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[106], 45, 46);
  }
 
}

void adjust_10_V_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[107], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[107], 45, 79);
  }

}

void v_0_10_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(english[53], 125, 46);
}

void v_0_5_10_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

    tft.drawString(units[29], 115, 79);
  

}

void v_5_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(units[33], 145, 46);
}

void v_10_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

  tft.drawString(units[34], 135, 79);  

}

void _ma_4_20_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString(english[54], 125, 46);
}

void _ma_4_12_20_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);

    tft.drawString(english[60], 115, 79);
  

}

void digital_out_1_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[55], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[55], 45, 46);
  }
 
}

void digital_out_2_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[56], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[56], 45, 79);
  }

}

void digital_out_3_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[57], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[57], 45, 112);
  }

}

void pulse_frequency_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  draw_greather_than(268, 48, TFT_SILVER);
  if (language == English) {
    tft.drawString(english[61], 75, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[61], 75, 46);
  }

}

void alarm_high_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[62], 75, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[62], 75, 79);
  }

}

void alarm_low_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[63], 75, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[63], 75, 112);
  }

}

void conductivity_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[64], 75, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[64], 75, 145);
  }

}

void system_alarm_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[65], 75, 178);
  } else if (language == Turkish) {
    tft.drawString(turkish[65], 75, 178);
  }

}

void direction_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[66], 75, 211);
  } else if (language == Turkish) {
    tft.drawString(turkish[66], 75, 211);
  }

}

void pulse_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[67], 75, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[67], 75, 46);
  }

}

void frequency_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[68], 75, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[68], 75, 79);
  }

}


// Communication menü barları
void centered_communication_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[7], 112, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[7], 122, 13);
  }
  tft.pushImage(75, 7, 27, 26, communication_icon);
}

void centered_modbus_baudrate_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[50], 102, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[50], 102, 13);
  }
  tft.pushImage(65, 7, 27, 26, communication_icon);
}

void centered_modbus_parity_bit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[52], 97, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[52], 90, 13);
  }
  tft.pushImage(60, 7, 27, 26, communication_icon);
}

void centered_modbus_stop_bit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[98], 100, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[98], 90, 13);
  }
  tft.pushImage(63, 7, 27, 26, communication_icon);
}

void centered_modbus_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[40], 140, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[40], 145, 13);
  }
  tft.pushImage(103, 7, 27, 26, communication_icon);
}

void modbus_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[40], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[40], 45, 46);
  }
}

void ethernet_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[41], 45, 79);
    tft.drawString(english[46], 200, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[41], 45, 79);
    tft.drawString(english[46], 200, 79);
  }
}

void hart_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[42], 45, 112);
    tft.drawString(english[46], 200, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[42], 45, 112);
    tft.drawString(english[46], 200, 112);
  }
}

void profibus_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[43], 45, 145);
    tft.drawString(english[46], 200, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[43], 45, 145);
    tft.drawString(english[46], 200, 145);
  }
}

void bluetooth_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 300, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 180, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[44], 45, 178);
    tft.drawString(english[46], 200, 178);
  } else if (language == Turkish) {
    tft.drawString(turkish[44], 45, 178);
    tft.drawString(english[46], 200, 178);
  }
}

void wifi_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 300, 202, TFT_SHADOW);
  draw_greather_than(268, 213, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[45], 45, 211);
    tft.drawString(english[46], 200, 211);
  } else if (language == Turkish) {
    tft.drawString(turkish[45], 45, 211);
    tft.drawString(english[46], 200, 211);
  }
}

void modbus_baudrate_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[50], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[50], 45, 46);
  }
 
}

void modbus_ID_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[51], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[51], 45, 79);
  }

}

void modbus_parity_bit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);

  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[52], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[52], 45, 112);
  }
}

void modbus_stop_bit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 136, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 136, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 300, 136, TFT_SHADOW);
  draw_greather_than(268, 147, TFT_SILVER);

  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[98], 45, 145);
  } else if (language == Turkish) {
    tft.drawString(turkish[98], 45, 145);
  }
}

void one_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
    tft.drawString("1", 160, 46);
}

void two_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString("2", 160, 79);

}

void baud_1200_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString("1200", 139, 46);
}

void baud_2400_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString("2400", 140, 79);
}

void baud_4800_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString("4800", 140, 112);
}

void baud_9600_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 136, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 136, 245, 136, TFT_SHADOW);
  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString("9600", 140, 145);
}

void baud_19200_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 169, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 169, 245, 169, TFT_SHADOW);
  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString("19200", 135, 178);
}

void baud_38400_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 202, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 202, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 202, 245, 202, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  tft.drawString("38400", 136, 211);
}

void none_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 243, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[70], 138, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[70], 138, 46);
  }
 
}

void odd_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 245, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[71], 138, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[71], 138, 79);
  }

}

void even_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 245, 103, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[72], 138, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[72], 138, 112);
  }

}


// Display menü barları
void centered_display_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[8], 142, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[8], 142, 13);
  }
  tft.pushImage(105, 7, 27, 26, display_icon);
}

void centered_reverse_colors_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(63, 37, 257, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[26], 115, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[26], 115, 13);
  }
  tft.pushImage(78, 7, 27, 26, display_icon);
}

void reverse_colors_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[26], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[26], 45, 46);
  }
 
}

void line1_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[27], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[27], 45, 79);
  }

}

void line2_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[28], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[28], 45, 112);
  }

}

void dark_theme_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(63, 37, 257, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[99], 120, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[99], 120, 46);
  }
}

void white_theme_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 243, 70, TFT_SHADOW);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[100], 120, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[100], 120, 79);
  }
}
  

// Data logging menü barları
void centered_data_logging_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[9], 117, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[9], 117, 13);
  }
  tft.pushImage(80, 7, 27, 26, data_logging_icon);
}

void interval_unit_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[38], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[38], 45, 46);
  }
 
}

void interval_time_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 70, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[39], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[39], 45, 79);
  }

}


// Information menü barları
void centered_information_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 4, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 23, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.setFreeFont(FSSB9);
  if (language == English) {
    tft.drawString(english[10], 127, 13);
  } else if (language == Turkish) {
    tft.drawString(turkish[10], 127, 13);
  }
  tft.pushImage(85, 7, 27, 26, Information_icon);
}

void serial_no_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 37, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 37, 300, 37, TFT_SHADOW);
  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  draw_greather_than(268, 48, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[29], 45, 46);
  } else if (language == Turkish) {
    tft.drawString(turkish[29], 45, 46);
  }
 
}

void product_date_bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 70, 280, 34, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 70, 300, 70, TFT_SHADOW);
  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 81, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[30], 45, 79);
  } else if (language == Turkish) {
    tft.drawString(turkish[30], 45, 79);
  }

}

void information__bar(bool light) {

  if (light) {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_WHITE);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_WHITE);
    tft.setTextColor(TFT_BLACK, TFT_WHITE);
  } else {
    tft.fillRoundRect(20, 103, 280, 34, 15, TFT_SHADOW);
    tft.fillRoundRect(20, 103, 280, 15, 0, TFT_SHADOW);
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);
  }

  tft.drawLine(75, 103, 300, 103, TFT_SHADOW);
  draw_greather_than(268, 114, TFT_SILVER);
  tft.setFreeFont(FSS9);
  if (language == English) {
    tft.drawString(english[31], 45, 112);
  } else if (language == Turkish) {
    tft.drawString(turkish[31], 45, 112);
  }

}


/*******************************************************************************************************************************************/


/*******************************************************************************************************************************************/
// MODBUS PİN KONTROL FONKSİYONLARI
void preTransmission() {
  digitalWrite(DE_RE_PIN_2, HIGH);
}

void postTransmission() {
  digitalWrite(DE_RE_PIN_2, LOW);
}

// WI-FI FIRMWARE GÜNCELLEME
void firmwareUpdate() {
  HTTPClient http;

  http.begin(firmwareUrl);  // URL of the firmware on GitHub
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    int fileSize = http.getSize();
    if (fileSize > 0) {
      bool canBegin = Update.begin(fileSize);
      if (canBegin) {
        WiFiClient* stream = http.getStreamPtr();
        size_t written = Update.writeStream(*stream);

        if (written == fileSize) {
          if (language == English) {
            tft.drawString("Download complete", 40, 112);
          } else if (language == Turkish) {
            tft.drawString("indirme eksiksiz tamamlandi", 40, 112);
          }
        } else {
          if (language == English) {
            tft.drawString("Downloaded data is missing", 40, 112);
            tft.drawString("Size: " + String(written) + " / " + String(fileSize), 40, 136);
            tft.drawString("The update has been canceled !", 40, 160);
          } else if (language == Turkish) {
            tft.drawString("indirilen veri eksik", 40, 112);
            tft.drawString("Boyut: " + String(written) + " / " + String(fileSize), 40, 136);
            tft.drawString("Guncelleme iptal edildi !", 40, 160);
          }
          Update.abort();  // Eksik yükleme durumunda işlemi iptal et
          return;          // İşlemi sonlandır
        }

        if (Update.end()) {
          if (Update.isFinished()) {
            if (language == English) {
              tft.drawString("Update complete.", 40, 136);
              tft.drawString("Rebooting the device ...", 40, 160);
            } else if (language == Turkish) {
              tft.drawString("Guncelleme tamamlandi.", 40, 136);
              tft.drawString("Cihaz yeniden baslatiliyor ...", 40, 160);
            }
            delay(6000);
            ESP.restart();
          } else {
            if (language == English) {
              tft.drawString("Error update incomplete !", 40, 136);
            } else if (language == Turkish) {
              tft.drawString("Hata güncelleme tamamlanmadi !", 40, 136);
            }
          }
        } else {
          if (language == English) {
            tft.drawString("Error occurred Error #: " + String(Update.getError()), 40, 136);
          } else if (language == Turkish) {
            tft.drawString("Hata oluştu. Hata #: " + String(Update.getError()), 40, 136);
          }
        }
      } else {
        if (language == English) {
          tft.drawString("There's not enough space for OTA.", 40, 112);
        } else if (language == Turkish) {
          tft.drawString("OTA icin yeterli alan yok.", 40, 112);
        }
      }
    }
  } else {
    if (language == English) {
      tft.drawString("HTTP GET operation failed", 40, 112);
      tft.drawString("Error: " + String(http.errorToString(httpCode).c_str()), 40, 136);
    } else if (language == Turkish) {
      tft.drawString("HTTP GET islemi basarisiz oldu", 40, 112);
      tft.drawString("Hata: " + String(http.errorToString(httpCode).c_str()), 40, 136);
    }
  }
  http.end();
}

/*******************************************************************************************************************************************/

 /**
 * @brief Bu fonksiyonlar, ekranda başlık dahil 1 - 6 adet arasında bar oluşturmak ve yön tuşlarına basarak bu barlar arasında gölge efekti ile gezinmeyi sağlar.
 *
 * @param icon_title Başlık barında görünecek küçük ikon
 * @param title_number Başlık barında görünecek yazının buffer numarası
 * @param text_position_x Yazıların x ekseninde başlangıç pozisyonu
 * @param text_aligned Bar stili
 *        - left_aligned : Alt seçeneği olan barlar 
 *        - middle_aligned : Alt seçeneği olmayan doğrudan seçenek olarak kullanılan barlar (yeşil tikli)
 * @param bar_1 1. sıradaki barın yazısının buffer numarası
 * @param bar_2 2. sıradaki barın yazısının buffer numarası
 * @param bar_3 3. sıradaki barın yazısının buffer numarası
 * @param bar_4 4. sıradaki barın yazısının buffer numarası
 * @param bar_5 5. sıradaki barın yazısının buffer numarası
 * @param bar_6 6. sıradaki barın yazısının buffer numarası
 * @param cursor_beginning Barlara karşılık gelen sıralı etiketin başlangıç ismi
 * @param cursor_finish Barlara karşılık gelen sıralı etiketin bitiş ismi
 *
 * @example 
 * bar_select(basic_settings_icon, english[32], 100, middle_aligned, units[4], units[5], units[6], units[7], units[8], units[9], m3_s, L_h);
 * Sondaki iki parametre ardışık sayılı tam sayı değişkenleri olmalı
 */

void bar_select(const uint16_t *icon_title, uint16_t title_number, uint16_t text_position_x, bool text_aligned, uint16_t bar_1, uint16_t bar_2, uint16_t bar_3, uint16_t bar_4, uint16_t bar_5, uint16_t bar_6, int cursor_beginning, int cursor_finish) {

  static int16_t buffer_value;
  static uint8_t current_cursor, current_previous_cursor;  // 1 ile 6 arasında birsayı

  if (opening_page == true) {
    opening_page = false;

    // Baştaki bardan başlaması için
    cursor = cursor_beginning;
    previous_cursor = cursor_beginning + 1;

    buffer_value = cursor_beginning - 1;  // bar seçimi yaparken cursor 1 sabit den başlamak için union değerini hafızada tutuyor

    tft.fillScreen(0xc658);  // arka planı hafif griye boya

    tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla

    uint8_t title_char_counter;
    if (language == English) {
      title_char_counter = strlen(english[title_number]);
    } else if (language == Turkish) {
      title_char_counter = strlen(turkish[title_number]);
    }
    uint8_t title_text_beginning_point = 185 - (title_char_counter * 5);
    uint8_t title_icon_beginning_point = title_text_beginning_point - 35;

    tft.pushImage(title_icon_beginning_point, 7, 27, 26, icon_title);  // ikonu bas

    tft.setFreeFont(FSSB9);                  // başlık fontunu ayarla (kalın yap)
    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    if (language == English) {
      tft.drawString(english[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    } else if (language == Turkish) {
      tft.drawString(turkish[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    }

    // çizgileri ve büyüktür işaretini bastır
    for (int i = 1; i <= 6; i++) {
      if (text_aligned == left_aligned) {
        tft.drawLine(text_position_x, i * 33 + 4, 300, i * 33 + 4, TFT_SHADOW);
        draw_greather_than(268, i * 33 + 15, TFT_SILVER);
      } else {
        tft.drawLine(75, i * 33 + 4, 243, i * 33 + 4, TFT_SHADOW);
      }
    }

    tft.setFreeFont(FSS9);                    // yazı fontu
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi gölge zemin üstüne siyah yazı

    if (language == English) {
      // diğer barlardaki yazıları yazdır
      tft.drawString(english[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(english[bar_2], text_position_x, 79);
      tft.drawString(english[bar_3], text_position_x, 112);
      tft.drawString(english[bar_4], text_position_x, 145);
      tft.drawString(english[bar_5], text_position_x, 178);
      tft.drawString(english[bar_6], text_position_x, 211);
    } else if (language == Turkish) {
      tft.drawString(turkish[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(turkish[bar_2], text_position_x, 79);
      tft.drawString(turkish[bar_3], text_position_x, 112);
      tft.drawString(turkish[bar_4], text_position_x, 145);
      tft.drawString(turkish[bar_5], text_position_x, 178);
      tft.drawString(turkish[bar_6], text_position_x, 211);
    }
  }

  if (cursor > cursor_finish) cursor = cursor_beginning;  // kursoru baştaysa sona döndür
  if (cursor < cursor_beginning) cursor = cursor_finish;  // kursoru sondaysa başa döndür

  current_cursor = cursor - buffer_value;
  current_previous_cursor = previous_cursor - buffer_value;

  if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
    // Barlar arası gezinirken gölge animasyonları
    if (current_previous_cursor == ((cursor_finish - cursor_beginning) + 1)) {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 15, TFT_WHITE);
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 15, 0, TFT_WHITE);
    } else {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 0, TFT_WHITE);
    }

    if (current_cursor == (cursor_finish - cursor_beginning) + 1) {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 15, TFT_SHADOW);
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 15, 0, TFT_SHADOW);
    } else {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 0, TFT_SHADOW);
    }

    if (text_aligned == left_aligned) {  // Bar stili, alt seçeneği olan bar
      tft.drawLine(text_position_x, current_previous_cursor * 33 + 4, 300, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(text_position_x, current_previous_cursor * 33 + 37, 300, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
      draw_greather_than(268, current_previous_cursor * 33 + 15, TFT_SILVER);
      draw_greather_than(268, current_cursor * 33 + 15, TFT_SILVER);
    } else {  // alt seçeneği olmayan bar
      tft.drawLine(75, current_previous_cursor * 33 + 4, 243, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(75, current_previous_cursor * 33 + 37, 243, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
    }

    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 145);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 145);
        }
        break;

      case 5:
        if (language == English) {
          tft.drawString(english[bar_5], text_position_x, 178);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_5], text_position_x, 178);
        }
        break;

      case 6:
        if (language == English) {
          tft.drawString(english[bar_6], text_position_x, 211);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_6], text_position_x, 211);
        }

        break;
    }

    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_previous_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 145);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 145);
        }
        break;

      case 5:
        if (language == English) {
          tft.drawString(english[bar_5], text_position_x, 178);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_5], text_position_x, 178);
        }
        break;

      case 6:
        if (language == English) {
          tft.drawString(english[bar_6], text_position_x, 211);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_6], text_position_x, 211);
        }
    }

    if (text_aligned == middle_aligned) {
      write_tick(text_position_x - 35);
    }

    previous_cursor = cursor;
  }
}

void bar_select(const uint16_t *icon_title, uint16_t title_number, uint16_t text_position_x, bool text_aligned, uint16_t bar_1, uint16_t bar_2, uint16_t bar_3, uint16_t bar_4, uint16_t bar_5, int cursor_beginning, int cursor_finish) {

  static int16_t buffer_value;
  static uint8_t current_cursor, current_previous_cursor;  // 1 ile 6 arasında birsayı

  if (opening_page == true) {
    opening_page = false;

    // Baştaki bardan başlaması için
    cursor = cursor_beginning;
    previous_cursor = cursor_beginning + 1;

    buffer_value = cursor_beginning - 1;  // bar seçimi yaparken cursor 1 sabit den başlamak için union değerini hafızada tutuyor

    tft.fillScreen(0xc658);  // arka planı hafif griye boya

    tft.fillRoundRect(20, 4, 280, 199, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla

    uint8_t title_char_counter;
    if (language == English) {
      title_char_counter = strlen(english[title_number]);
    } else if (language == Turkish) {
      title_char_counter = strlen(turkish[title_number]);
    }
    uint8_t title_text_beginning_point = 185 - (title_char_counter * 5);
    uint8_t title_icon_beginning_point = title_text_beginning_point - 35;

    tft.pushImage(title_icon_beginning_point, 7, 27, 26, icon_title);  // ikonu bas

    tft.setFreeFont(FSSB9);                  // başlık fontunu ayarla (kalın yap)
    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    if (language == English) {
      tft.drawString(english[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    } else if (language == Turkish) {
      tft.drawString(turkish[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    }

    // çizgileri ve büyüktür işaretini bastır
    for (int i = 1; i <= 5; i++) {
      if (text_aligned == left_aligned) {
        tft.drawLine(text_position_x, i * 33 + 4, 300, i * 33 + 4, TFT_SHADOW);
        draw_greather_than(268, i * 33 + 15, TFT_SILVER);
      } else {
        tft.drawLine(75, i * 33 + 4, 243, i * 33 + 4, TFT_SHADOW);
      }
    }

    // diğer barlardaki yazıları yazdır
    tft.setFreeFont(FSS9);                    // yazı fontu
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi gölge zemin üstüne siyah yazı
    if (language == English) {
      // diğer barlardaki yazıları yazdır
      tft.drawString(english[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(english[bar_2], text_position_x, 79);
      tft.drawString(english[bar_3], text_position_x, 112);
      tft.drawString(english[bar_4], text_position_x, 145);
      tft.drawString(english[bar_5], text_position_x, 178);
    } else if (language == Turkish) {
      tft.drawString(turkish[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(turkish[bar_2], text_position_x, 79);
      tft.drawString(turkish[bar_3], text_position_x, 112);
      tft.drawString(turkish[bar_4], text_position_x, 145);
      tft.drawString(turkish[bar_5], text_position_x, 178);
    }
  }

  if (cursor > cursor_finish) cursor = cursor_beginning;  // kursoru baştaysa sona döndür
  if (cursor < cursor_beginning) cursor = cursor_finish;  // kursoru sondaysa başa döndür,

  current_cursor = cursor - buffer_value;
  current_previous_cursor = previous_cursor - buffer_value;

  if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin

    // Barlar arası gezinirken gölge animasyonları
    if (current_previous_cursor == (cursor_finish - cursor_beginning) + 1) {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 15, TFT_WHITE);
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 15, 0, TFT_WHITE);
    } else {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 0, TFT_WHITE);
    }

    if (current_cursor == ((cursor_finish - cursor_beginning) + 1)) {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 15, TFT_SHADOW);
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 15, 0, TFT_SHADOW);
    } else {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 0, TFT_SHADOW);
    }

    if (text_aligned == left_aligned) {  // Bar stili, alt seçeneği olan bar
      tft.drawLine(text_position_x, current_previous_cursor * 33 + 4, 300, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(text_position_x, current_previous_cursor * 33 + 37, 300, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
      draw_greather_than(268, current_previous_cursor * 33 + 15, TFT_SILVER);
      draw_greather_than(268, current_cursor * 33 + 15, TFT_SILVER);
    } else {  // alt seçeneği olmayan bar
      tft.drawLine(75, current_previous_cursor * 33 + 4, 243, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(75, current_previous_cursor * 33 + 37, 243, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
    }

    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 145);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 145);
        }
        break;

      case 5:
        if (language == English) {
          tft.drawString(english[bar_5], text_position_x, 178);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_5], text_position_x, 178);
        }
        break;
    }

    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_previous_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 145);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 145);
        }
        break;

      case 5:
        if (language == English) {
          tft.drawString(english[bar_5], text_position_x, 178);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_5], text_position_x, 178);
        }
        break;
    }

    if (text_aligned == middle_aligned) {
      write_tick(text_position_x - 35);
    }

    previous_cursor = cursor;
  }
}

void bar_select(const uint16_t *icon_title, uint16_t title_number, uint16_t text_position_x, bool text_aligned, uint16_t bar_1, uint16_t bar_2, uint16_t bar_3, uint16_t bar_4, int cursor_beginning, int cursor_finish) {

  static int16_t buffer_value;
  static uint8_t current_cursor, current_previous_cursor;  // 1 ile 6 arasında birsayı

  if (opening_page == true) {
    opening_page = false;

    // Baştaki bardan başlaması için
    cursor = cursor_beginning;
    previous_cursor = cursor_beginning + 1;

    buffer_value = cursor_beginning - 1;  // bar seçimi yaparken cursor 1 sabit den başlamak için union değerini hafızada tutuyor

    tft.fillScreen(0xc658);  // arka planı hafif griye boya

    tft.fillRoundRect(20, 4, 280, 166, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla

    uint8_t title_char_counter;
    if (language == English) {
      title_char_counter = strlen(english[title_number]);
    } else if (language == Turkish) {
      title_char_counter = strlen(turkish[title_number]);
    }
    uint8_t title_text_beginning_point = 185 - (title_char_counter * 5);
    uint8_t title_icon_beginning_point = title_text_beginning_point - 35;

    tft.pushImage(title_icon_beginning_point, 7, 27, 26, icon_title);  // ikonu bas

    tft.setFreeFont(FSSB9);                  // başlık fontunu ayarla (kalın yap)
    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    if (language == English) {
      tft.drawString(english[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    } else if (language == Turkish) {
      tft.drawString(turkish[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    }

    // çizgileri ve büyüktür işaretini bastır
    for (int i = 1; i <= 4; i++) {
      if (text_aligned == left_aligned) {
        tft.drawLine(text_position_x, i * 33 + 4, 300, i * 33 + 4, TFT_SHADOW);
        draw_greather_than(268, i * 33 + 15, TFT_SILVER);
      } else {
        tft.drawLine(75, i * 33 + 4, 243, i * 33 + 4, TFT_SHADOW);
      }
    }

    // diğer barlardaki yazıları yazdır
    tft.setFreeFont(FSS9);                    // yazı fontu
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi gölge zemin üstüne siyah yazı
    if (language == English) {
      // diğer barlardaki yazıları yazdır
      if (bar_1 == 154) {        // quick setup ın kalın yazılması için
        tft.setFreeFont(FSSB9);  // yazı fontu
        tft.drawString(english[bar_1], text_position_x, 46);
        tft.setFreeFont(FSS9);  // yazı fontu
      } else {
        tft.drawString(english[bar_1], text_position_x, 46);
      }
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(english[bar_2], text_position_x, 79);
      tft.drawString(english[bar_3], text_position_x, 112);
      tft.drawString(english[bar_4], text_position_x, 145);
    } else if (language == Turkish) {
      if (bar_1 == 154) {        // hızlı kurulum un kalın yazılması için
        tft.setFreeFont(FSSB9);  // yazı fontu
        tft.drawString(turkish[bar_1], text_position_x, 46);
        tft.setFreeFont(FSS9);  // yazı fontu
      } else {
        tft.drawString(turkish[bar_1], text_position_x, 46);
      }
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(turkish[bar_2], text_position_x, 79);
      tft.drawString(turkish[bar_3], text_position_x, 112);
      tft.drawString(turkish[bar_4], text_position_x, 145);
    }
  }

  if (cursor > cursor_finish) cursor = cursor_beginning;  // kursoru baştaysa sona döndür
  if (cursor < cursor_beginning) cursor = cursor_finish;  // kursoru sondaysa başa döndür,

  current_cursor = cursor - buffer_value;
  current_previous_cursor = previous_cursor - buffer_value;

  if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin

    // Barlar arası gezinirken gölge animasyonları
    if (current_previous_cursor == (cursor_finish - cursor_beginning) + 1) {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 15, TFT_WHITE);
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 15, 0, TFT_WHITE);
    } else {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 0, TFT_WHITE);
    }

    if (current_cursor == ((cursor_finish - cursor_beginning) + 1)) {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 15, TFT_SHADOW);
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 15, 0, TFT_SHADOW);
    } else {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 0, TFT_SHADOW);
    }

    // Bar stili, alt seçeneği olan bar
    if (text_aligned == left_aligned) {
      tft.drawLine(text_position_x, current_previous_cursor * 33 + 4, 300, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(text_position_x, current_previous_cursor * 33 + 37, 300, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
      draw_greather_than(268, current_previous_cursor * 33 + 15, TFT_SILVER);
      draw_greather_than(268, current_cursor * 33 + 15, TFT_SILVER);
    } else {  // alt seçeneği olmayan bar
      tft.drawLine(75, current_previous_cursor * 33 + 4, 243, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(75, current_previous_cursor * 33 + 37, 243, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
    }

    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_cursor) {
      case 1:
        if (language == English) {
          if (bar_1 == 154) {        // quick setup ın kalın yazılması için
            tft.setFreeFont(FSSB9);  // yazı fontu
            tft.drawString(english[bar_1], text_position_x, 46);
            tft.setFreeFont(FSS9);  // yazı fontu
          } else {
            tft.drawString(english[bar_1], text_position_x, 46);
          }
        } else if (language == Turkish) {
          if (bar_1 == 154) {        // hızlı kurulum un kalın yazılması için
            tft.setFreeFont(FSSB9);  // yazı fontu
            tft.drawString(turkish[bar_1], text_position_x, 46);
            tft.setFreeFont(FSS9);  // yazı fontu
          } else {
            tft.drawString(turkish[bar_1], text_position_x, 46);
          }
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 145);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 145);
        }
        break;
    }

    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_previous_cursor) {
      case 1:
        if (language == English) {
          if (bar_1 == 154) {        // quick setup ın kalın yazılması için
            tft.setFreeFont(FSSB9);  // yazı fontu
            tft.drawString(english[bar_1], text_position_x, 46);
            tft.setFreeFont(FSS9);  // yazı fontu
          } else {
            tft.drawString(english[bar_1], text_position_x, 46);
          }
        } else if (language == Turkish) {
          if (bar_1 == 154) {        // hızlı kurulum un kalın yazılması için
            tft.setFreeFont(FSSB9);  // yazı fontu
            tft.drawString(turkish[bar_1], text_position_x, 46);
            tft.setFreeFont(FSS9);  // yazı fontu
          } else {
            tft.drawString(turkish[bar_1], text_position_x, 46);
          }
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 145);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 145);
        }
        break;
    }

    if (text_aligned == middle_aligned) {
      write_tick(text_position_x - 35);
    }

    previous_cursor = cursor;
  }
}

void bar_select(const uint16_t *icon_title, uint16_t title_number, uint16_t text_position_x, bool text_aligned, uint16_t bar_1, uint16_t bar_2, uint16_t bar_3, int cursor_beginning, int cursor_finish) {

  static int16_t buffer_value;
  static uint8_t current_cursor, current_previous_cursor;  // 1 ile 6 arasında birsayı

  if (opening_page == true) {
    opening_page = false;

    // Baştaki bardan başlaması için
    cursor = cursor_beginning;
    previous_cursor = cursor_beginning + 1;

    buffer_value = cursor_beginning - 1;  // bar seçimi yaparken cursor 1 sabit den başlamak için union değerini hafızada tutuyor

    tft.fillScreen(0xc658);  // arka planı hafif griye boya

    tft.fillRoundRect(20, 4, 280, 133, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla

    uint8_t title_char_counter;
    if (language == English) {
      title_char_counter = strlen(english[title_number]);
    } else if (language == Turkish) {
      title_char_counter = strlen(turkish[title_number]);
    }
    uint8_t title_text_beginning_point = 185 - (title_char_counter * 5);
    uint8_t title_icon_beginning_point = title_text_beginning_point - 35;

    tft.pushImage(title_icon_beginning_point, 7, 27, 26, icon_title);  // ikonu bas

    tft.setFreeFont(FSSB9);                  // başlık fontunu ayarla (kalın yap)
    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    if (language == English) {
      tft.drawString(english[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    } else if (language == Turkish) {
      tft.drawString(turkish[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    }


    // çizgileri ve büyüktür işaretini bastır
    for (int i = 1; i <= 3; i++) {
      if (text_aligned == left_aligned) {
        tft.drawLine(text_position_x, i * 33 + 4, 300, i * 33 + 4, TFT_SHADOW);
        draw_greather_than(268, i * 33 + 15, TFT_SILVER);
      } else {
        tft.drawLine(75, i * 33 + 4, 243, i * 33 + 4, TFT_SHADOW);
      }
    }

    // diğer barlardaki yazıları yazdır
    tft.setFreeFont(FSS9);                    // yazı fontu
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi gölge zemin üstüne siyah yazı
    if (language == English) {
      // diğer barlardaki yazıları yazdır
      tft.drawString(english[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(english[bar_2], text_position_x, 79);
      tft.drawString(english[bar_3], text_position_x, 112);
    } else if (language == Turkish) {
      tft.drawString(turkish[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(turkish[bar_2], text_position_x, 79);
      tft.drawString(turkish[bar_3], text_position_x, 112);
    }
  }

  if (cursor > cursor_finish) cursor = cursor_beginning;  // kursoru baştaysa sona döndür
  if (cursor < cursor_beginning) cursor = cursor_finish;  // kursoru sondaysa başa döndür,

  current_cursor = cursor - buffer_value;
  current_previous_cursor = previous_cursor - buffer_value;

  if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin

    // Barlar arası gezinirken gölge animasyonları
    if (current_previous_cursor == (cursor_finish - cursor_beginning) + 1) {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 15, TFT_WHITE);
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 15, 0, TFT_WHITE);
    } else {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 0, TFT_WHITE);
    }

    if (current_cursor == ((cursor_finish - cursor_beginning) + 1)) {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 15, TFT_SHADOW);
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 15, 0, TFT_SHADOW);
    } else {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 0, TFT_SHADOW);
    }

    // Bar stili, alt seçeneği olan bar
    if (text_aligned == left_aligned) {
      tft.drawLine(text_position_x, current_previous_cursor * 33 + 4, 300, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(text_position_x, current_previous_cursor * 33 + 37, 300, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
      draw_greather_than(268, current_previous_cursor * 33 + 15, TFT_SILVER);
      draw_greather_than(268, current_cursor * 33 + 15, TFT_SILVER);
    } else {  // alt seçeneği olmayan bar
      tft.drawLine(75, current_previous_cursor * 33 + 4, 243, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(75, current_previous_cursor * 33 + 37, 243, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
    }

    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;
    }

    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_previous_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;

      case 3:
        if (language == English) {
          tft.drawString(english[bar_3], text_position_x, 112);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_3], text_position_x, 112);
        }
        break;
    }

    if (text_aligned == middle_aligned) {
      write_tick(text_position_x - 35);
    }

    previous_cursor = cursor;
  }
}

void bar_select(const uint16_t *icon_title, uint16_t title_number, uint16_t text_position_x, bool text_aligned, uint16_t bar_1, uint16_t bar_2, int cursor_beginning, int cursor_finish) {

  static int16_t buffer_value;
  static uint8_t current_cursor, current_previous_cursor;  // 1 ile 6 arasında birsayı

  if (opening_page == true) {
    opening_page = false;

    // Baştaki bardan başlaması için
    cursor = cursor_beginning;
    previous_cursor = cursor_beginning + 1;

    buffer_value = cursor_beginning - 1;  // bar seçimi yaparken cursor 1 sabit den başlamak için union değerini hafızada tutuyor

    tft.fillScreen(0xc658);  // arka planı hafif griye boya

    tft.fillRoundRect(20, 4, 280, 100, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla

    uint8_t title_char_counter;
    if (language == English) {
      title_char_counter = strlen(english[title_number]);
    } else if (language == Turkish) {
      title_char_counter = strlen(turkish[title_number]);
    }
    uint8_t title_text_beginning_point = 185 - (title_char_counter * 5);
    uint8_t title_icon_beginning_point = title_text_beginning_point - 35;

    tft.pushImage(title_icon_beginning_point, 7, 27, 26, icon_title);  // ikonu bas

    tft.setFreeFont(FSSB9);                  // başlık fontunu ayarla (kalın yap)
    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    if (language == English) {
      tft.drawString(english[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    } else if (language == Turkish) {
      tft.drawString(turkish[title_number], title_text_beginning_point, 13);  // başlık yazısını yazdır
    }

    // çizgileri ve büyüktür işaretini bastır
    for (int i = 1; i <= 2; i++) {
      if (text_aligned == left_aligned) {
        tft.drawLine(text_position_x, i * 33 + 4, 300, i * 33 + 4, TFT_SHADOW);
        draw_greather_than(268, i * 33 + 15, TFT_SILVER);
      } else {
        tft.drawLine(75, i * 33 + 4, 243, i * 33 + 4, TFT_SHADOW);
      }
    }

    // diğer barlardaki yazıları yazdır
    tft.setFreeFont(FSS9);                    // yazı fontu
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi gölge zemin üstüne siyah yazı
    if (language == English) {
      // diğer barlardaki yazıları yazdır
      tft.drawString(english[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(english[bar_2], text_position_x, 79);
    } else if (language == Turkish) {
      tft.drawString(turkish[bar_1], text_position_x, 46);
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
      tft.drawString(turkish[bar_2], text_position_x, 79);
    }
  }

  if (cursor > cursor_finish) cursor = cursor_beginning;  // kursoru baştaysa sona döndür
  if (cursor < cursor_beginning) cursor = cursor_finish;  // kursoru sondaysa başa döndür,

  current_cursor = cursor - buffer_value;
  current_previous_cursor = previous_cursor - buffer_value;

  if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin

    // Barlar arası gezinirken gölge animasyonları
    if (current_previous_cursor == (cursor_finish - cursor_beginning) + 1) {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 15, TFT_WHITE);
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 15, 0, TFT_WHITE);
    } else {
      tft.fillRoundRect(20, current_previous_cursor * 33 + 4, 280, 34, 0, TFT_WHITE);
    }

    if (current_cursor == ((cursor_finish - cursor_beginning) + 1)) {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 15, TFT_SHADOW);
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 15, 0, TFT_SHADOW);
    } else {
      tft.fillRoundRect(20, current_cursor * 33 + 4, 280, 34, 0, TFT_SHADOW);
    }

    // Bar stili, alt seçeneği olan bar
    if (text_aligned == left_aligned) {
      tft.drawLine(text_position_x, current_previous_cursor * 33 + 4, 300, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(text_position_x, current_previous_cursor * 33 + 37, 300, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
      draw_greather_than(268, current_previous_cursor * 33 + 15, TFT_SILVER);
      draw_greather_than(268, current_cursor * 33 + 15, TFT_SILVER);
    } else {  // alt seçeneği olmayan bar
      tft.drawLine(75, current_previous_cursor * 33 + 4, 243, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(75, current_previous_cursor * 33 + 37, 243, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
    }

    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;
    }

    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_previous_cursor) {
      case 1:
        if (language == English) {
          tft.drawString(english[bar_1], text_position_x, 46);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_1], text_position_x, 46);
        }
        break;

      case 2:
        if (language == English) {
          tft.drawString(english[bar_2], text_position_x, 79);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 79);
        }
        break;
    }

    if (text_aligned == middle_aligned) {
      write_tick(text_position_x - 35);
    }

    previous_cursor = cursor;
  }
}

void bar_select(const uint16_t *icons[], uint16_t text_position_x, bool text_aligned, uint16_t bar_1, uint16_t bar_2, uint16_t bar_3, uint16_t bar_4, uint16_t bar_5, uint16_t bar_6, uint16_t bar_7, int cursor_beginning, int cursor_finish) {


  static int16_t buffer_value;
  static uint8_t current_cursor, current_previous_cursor;  // 1 ile 6 arasında birsayı

  if (opening_page == true) {
    opening_page = false;

    // Baştaki bardan başlaması için
    cursor = cursor_beginning;
    previous_cursor = cursor_beginning + 1;

    buffer_value = cursor_beginning - 1;  // bar seçimi yaparken cursor 1 sabit den başlamak için union değerini hafızada tutuyor

    tft.fillScreen(0xc658);  // arka planı hafif griye boya

    tft.fillRoundRect(20, 4, 280, 232, 15, TFT_WHITE);  // yumuşak köşeli beyaz zemin hazırla

    // çizgileri ve büyüktür işaretini bastır
    for (int i = 0; i <= 6; i++) {
      if (text_aligned == left_aligned) {
        if (i > 0) { tft.drawLine(text_position_x, i * 33 + 4, 300, i * 33 + 4, TFT_SHADOW); }
        draw_greather_than(268, i * 33 + 15, TFT_SILVER);
      } else {
        if (i > 0) { tft.drawLine(75, i * 33 + 4, 243, i * 33 + 4, TFT_SHADOW); }
      }
    }

    tft.setFreeFont(FSS9);                    // yazı fontu
    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi gölge zemin üstüne siyah yazı

    if (language == English) {
      // diğer barlardaki yazıları yazdır
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı


      tft.drawString(english[bar_1], text_position_x, 13);
      tft.pushImage(33, 7, 27, 26, icons[0]);

      tft.drawString(english[bar_2], text_position_x, 46);
      tft.pushImage(33, 40, 27, 26, icons[1]);
      tft.drawString(english[bar_3], text_position_x, 79);
      tft.pushImage(33, 73, 27, 26, icons[2]);

      tft.drawString(english[bar_4], text_position_x, 112);
      tft.pushImage(33, 106, 27, 26, icons[3]);

      tft.drawString(english[bar_5], text_position_x, 145);
      tft.pushImage(33, 139, 27, 26, icons[4]);

      tft.drawString(english[bar_6], text_position_x, 178);
      tft.pushImage(33, 172, 27, 26, icons[5]);

      tft.drawString(english[bar_7], text_position_x, 211);
      tft.pushImage(33, 205, 27, 26, icons[6]);

    } else if (language == Turkish) {
      tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı

      tft.drawString(turkish[bar_1], text_position_x, 13);
      tft.pushImage(33, 7, 27, 26, icons[0]);

      tft.drawString(turkish[bar_2], text_position_x, 46);
      tft.pushImage(33, 40, 27, 26, icons[1]);
      tft.drawString(turkish[bar_3], text_position_x, 79);
      tft.pushImage(33, 73, 27, 26, icons[2]);

      tft.drawString(turkish[bar_4], text_position_x, 112);
      tft.pushImage(33, 106, 27, 26, icons[3]);

      tft.drawString(turkish[bar_5], text_position_x, 145);
      tft.pushImage(33, 139, 27, 26, icons[4]);

      tft.drawString(turkish[bar_6], text_position_x, 178);
      tft.pushImage(33, 172, 27, 26, icons[5]);

      tft.drawString(turkish[bar_7], text_position_x, 211);
      tft.pushImage(33, 205, 27, 26, icons[6]);
    }
  }

  if (cursor > cursor_finish) cursor = cursor_beginning;  // kursoru baştaysa sona döndür
  if (cursor < cursor_beginning) cursor = cursor_finish;  // kursoru sondaysa başa döndür

  current_cursor = cursor - buffer_value;
  current_previous_cursor = previous_cursor - buffer_value;
  if (cursor != previous_cursor) {  // cursor değiştiyse menü içi gezin
    // Önceki seçili barın gölgesini temizle
    if (current_previous_cursor <= (cursor_finish - cursor_beginning + 1)) {
      if (current_previous_cursor != 1 && current_previous_cursor != 7) {
        tft.fillRoundRect(20, (current_previous_cursor - 1) * 33 + 4, 280, 34, 0, TFT_WHITE);
      } else if (current_previous_cursor == 1) {
        tft.fillRoundRect(20, (current_previous_cursor - 1) * 33 + 4, 280, 34, 15, TFT_WHITE);
        tft.fillRect(20, (current_previous_cursor - 1) * 33 + 23, 280, 15, TFT_WHITE);
      } else if (current_previous_cursor == 7) {
        tft.fillRoundRect(20, (current_previous_cursor - 1) * 33 + 4, 280, 34, 15, TFT_WHITE);
        tft.fillRect(20, (current_previous_cursor - 1) * 33 + 4, 280, 15, TFT_WHITE);
      }
    }

    // Yeni seçili barın gölgesini çiz
    if (current_cursor <= (cursor_finish - cursor_beginning + 1)) {
      if (current_cursor != 1 && current_cursor != 7) {
        //tft.fillRoundRect(20, (current_cursor - 1) * 33 + 4, 280, 34, 0, TFT_SHADOW);
        tft.fillRect(20, (current_cursor - 1) * 33 + 4, 280, 34, TFT_SHADOW);
      } else if (current_cursor == 1) {
        tft.fillRoundRect(20, (current_cursor - 1) * 33 + 4, 280, 34, 15, TFT_SHADOW);
        tft.fillRect(20, (current_cursor - 1) * 33 + 23, 280, 15, TFT_SHADOW);
      } else if (current_cursor == 7) {
        tft.fillRoundRect(20, (current_cursor - 1) * 33 + 4, 280, 34, 15, TFT_SHADOW);
        tft.fillRect(20, (current_cursor - 1) * 33 + 4, 280, 15, TFT_SHADOW);
      }
    }


    // Sabit çizgileri ve büyüktür işaretlerini her seferinde yeniden çiz
    for (int i = 0; i <= 6; i++) {
      if (text_aligned == left_aligned) {
        if (i > 0) { tft.drawLine(text_position_x, i * 33 + 4, 300, i * 33 + 4, TFT_SHADOW); }
        draw_greather_than(268, i * 33 + 15, TFT_SILVER);
      } else {
        if (i > 0) { tft.drawLine(75, i * 33 + 4, 243, i * 33 + 4, TFT_SHADOW); }
      }
    }

    if (text_aligned == left_aligned) {  // Bar stili, alt seçeneği olan bar
      tft.drawLine(text_position_x, current_previous_cursor * 33 + 4, 300, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(text_position_x, current_previous_cursor * 33 + 37, 300, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
      draw_greather_than(268, current_previous_cursor * 33 + 15, TFT_SILVER);
      draw_greather_than(268, current_cursor * 33 + 15, TFT_SILVER);
    } else {  // alt seçeneği olmayan bar
      tft.drawLine(75, current_previous_cursor * 33 + 4, 243, current_previous_cursor * 33 + 4, TFT_SHADOW);
      if (previous_cursor != cursor_finish) {
        tft.drawLine(75, current_previous_cursor * 33 + 37, 243, current_previous_cursor * 33 + 37, TFT_SHADOW);
      }
    }



    tft.setTextColor(TFT_BLACK, TFT_SHADOW);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_cursor) {
      case 1:
        if (language == English) {

          tft.drawString(english[bar_1], text_position_x, 13);
          tft.pushImage(33, 7, 27, 26, icons[0]);
        } else if (language == Turkish) {

          tft.drawString(turkish[bar_1], text_position_x, 13);
          tft.pushImage(33, 7, 27, 26, icons[0]);
        }
        break;

      case 2:
        if (language == English) {

          tft.drawString(english[bar_2], text_position_x, 46);
          tft.pushImage(33, 40, 27, 26, icons[1]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 46);
          tft.pushImage(33, 40, 27, 26, icons[1]);
        }
        break;

      case 3:
        if (language == English) {

          tft.drawString(english[bar_3], text_position_x, 79);
          tft.pushImage(33, 73, 27, 26, icons[2]);
        } else if (language == Turkish) {

          tft.drawString(turkish[bar_3], text_position_x, 79);
          tft.pushImage(33, 73, 27, 26, icons[2]);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 112);
          tft.pushImage(33, 106, 27, 26, icons[3]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 112);
          tft.pushImage(33, 106, 27, 26, icons[3]);
        }
        break;

      case 5:
        if (language == English) {
          tft.drawString(english[bar_5], text_position_x, 145);
          tft.pushImage(33, 139, 27, 26, icons[4]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_5], text_position_x, 145);
          tft.pushImage(33, 139, 27, 26, icons[4]);
        }
        break;

      case 6:
        if (language == English) {

          tft.drawString(english[bar_6], text_position_x, 178);
          tft.pushImage(33, 172, 27, 26, icons[5]);
        } else if (language == Turkish) {

          tft.drawString(turkish[bar_6], text_position_x, 178);
          tft.pushImage(33, 172, 27, 26, icons[5]);
        }

        break;
      case 7:
        if (language == English) {

          tft.drawString(english[bar_7], text_position_x, 211);
          tft.pushImage(33, 205, 27, 26, icons[6]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_7], text_position_x, 211);
          tft.pushImage(33, 205, 27, 26, icons[6]);
        }

        break;
    }

    tft.setTextColor(TFT_BLACK, TFT_WHITE);  // yazı arka plan rengi beyaz  zemin üstüne siyah yazı
    switch (current_previous_cursor) {
      case 1:
        if (language == English) {

          tft.drawString(english[bar_1], text_position_x, 13);
          tft.pushImage(33, 7, 27, 26, icons[0]);
        } else if (language == Turkish) {

          tft.drawString(turkish[bar_1], text_position_x, 13);
          tft.pushImage(33, 7, 27, 26, icons[0]);
        }
        break;

      case 2:
        if (language == English) {

          tft.drawString(english[bar_2], text_position_x, 46);
          tft.pushImage(33, 40, 27, 26, icons[1]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_2], text_position_x, 46);
          tft.pushImage(33, 40, 27, 26, icons[1]);
        }
        break;

      case 3:
        if (language == English) {

          tft.drawString(english[bar_3], text_position_x, 79);
          tft.pushImage(33, 73, 27, 26, icons[2]);
        } else if (language == Turkish) {

          tft.drawString(turkish[bar_3], text_position_x, 79);
          tft.pushImage(33, 73, 27, 26, icons[2]);
        }
        break;

      case 4:
        if (language == English) {
          tft.drawString(english[bar_4], text_position_x, 112);
          tft.pushImage(33, 106, 27, 26, icons[3]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_4], text_position_x, 112);
          tft.pushImage(33, 106, 27, 26, icons[3]);
        }
        break;

      case 5:
        if (language == English) {
          tft.drawString(english[bar_5], text_position_x, 145);
          tft.pushImage(33, 139, 27, 26, icons[4]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_5], text_position_x, 145);
          tft.pushImage(33, 139, 27, 26, icons[4]);
        }
        break;

      case 6:
        if (language == English) {

          tft.drawString(english[bar_6], text_position_x, 178);
          tft.pushImage(33, 172, 27, 26, icons[5]);
        } else if (language == Turkish) {

          tft.drawString(turkish[bar_6], text_position_x, 178);
          tft.pushImage(33, 172, 27, 26, icons[5]);
        }

        break;
      case 7:
        if (language == English) {

          tft.drawString(english[bar_7], text_position_x, 211);
          tft.pushImage(33, 205, 27, 26, icons[6]);
        } else if (language == Turkish) {
          tft.drawString(turkish[bar_7], text_position_x, 211);
          tft.pushImage(33, 205, 27, 26, icons[6]);
        }

        break;
    }


    if (text_aligned == middle_aligned) {
      write_tick(text_position_x - 35);
    }

    if (text_aligned == middle_aligned) {
      write_tick(text_position_x - 35);
    }

    previous_cursor = cursor;
  }

  // if ((text_aligned == middle_aligned) && (previous_tick_location != tick_location)) {
  //   delete_tick(text_position_x - 35);
  //   write_tick(text_position_x - 35);
  //   previous_tick_location = tick_location;
  // }
}

